

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri May 16 18:10:45 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1,group=1
    64                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1,group=1
    65                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1,group=1
    66                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text69,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	text76,global,reloc=2,class=CODE,space=0,delta=1
    90                           	psect	text77,global,reloc=2,class=CODE,space=0,delta=1
    91                           	psect	text78,global,reloc=2,class=CODE,space=0,delta=1
    92                           	psect	text79,global,reloc=2,class=CODE,space=0,delta=1
    93                           	psect	text80,global,reloc=2,class=CODE,space=0,delta=1
    94                           	psect	text81,global,reloc=2,class=CODE,space=0,delta=1
    95                           	psect	text82,global,reloc=2,class=CODE,space=0,delta=1
    96                           	psect	text83,global,reloc=2,class=CODE,space=0,delta=1
    97                           	psect	text84,global,reloc=2,class=CODE,space=0,delta=1
    98                           	psect	text85,global,reloc=2,class=CODE,space=0,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
   102                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   103                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   104   000000                     
   105                           ; Generated 05/12/2024 GMT
   106                           ; 
   107                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution. Publication is not required when
   121                           ;        this file is used in an embedded application.
   122                           ; 
   123                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   124                           ;        software without specific prior written permission.
   125                           ; 
   126                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   127                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   128                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   129                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   130                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   131                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   132                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   133                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   134                           ; 
   135                           ; 
   136                           ; Code-generator required, PIC18F4321 Definitions
   137                           ; 
   138                           ; SFR Addresses
   139   000FE0                     bsr             equ	4064
   140   000FE9                     fsr0            equ	4073
   141   000FEA                     fsr0h           equ	4074
   142   000FE9                     fsr0l           equ	4073
   143   000FE1                     fsr1            equ	4065
   144   000FE2                     fsr1h           equ	4066
   145   000FE1                     fsr1l           equ	4065
   146   000FD9                     fsr2            equ	4057
   147   000FDA                     fsr2h           equ	4058
   148   000FD9                     fsr2l           equ	4057
   149   000FEF                     indf0           equ	4079
   150   000FE7                     indf1           equ	4071
   151   000FDF                     indf2           equ	4063
   152   000FF2                     intcon          equ	4082
   153   000000                     nvmcon          equ	0
   154   000FF9                     pcl             equ	4089
   155   000FFA                     pclath          equ	4090
   156   000FFB                     pclatu          equ	4091
   157   000FEB                     plusw0          equ	4075
   158   000FE3                     plusw1          equ	4067
   159   000FDB                     plusw2          equ	4059
   160   000FED                     postdec0        equ	4077
   161   000FE5                     postdec1        equ	4069
   162   000FDD                     postdec2        equ	4061
   163   000FEE                     postinc0        equ	4078
   164   000FE6                     postinc1        equ	4070
   165   000FDE                     postinc2        equ	4062
   166   000FEC                     preinc0         equ	4076
   167   000FE4                     preinc1         equ	4068
   168   000FDC                     preinc2         equ	4060
   169   000FF3                     prod            equ	4083
   170   000FF4                     prodh           equ	4084
   171   000FF3                     prodl           equ	4083
   172   000FD8                     status          equ	4056
   173   000FF5                     tablat          equ	4085
   174   000FF6                     tblptr          equ	4086
   175   000FF7                     tblptrh         equ	4087
   176   000FF6                     tblptrl         equ	4086
   177   000FF8                     tblptru         equ	4088
   178   000FFD                     tosl            equ	4093
   179   000FE8                     wreg            equ	4072
   180   000F80                     PORTA           equ	3968	;# 
   181   000F81                     PORTB           equ	3969	;# 
   182   000F82                     PORTC           equ	3970	;# 
   183   000F83                     PORTD           equ	3971	;# 
   184   000F84                     PORTE           equ	3972	;# 
   185   000F89                     LATA            equ	3977	;# 
   186   000F8A                     LATB            equ	3978	;# 
   187   000F8B                     LATC            equ	3979	;# 
   188   000F8C                     LATD            equ	3980	;# 
   189   000F8D                     LATE            equ	3981	;# 
   190   000F92                     TRISA           equ	3986	;# 
   191   000F92                     DDRA            equ	3986	;# 
   192   000F93                     TRISB           equ	3987	;# 
   193   000F93                     DDRB            equ	3987	;# 
   194   000F94                     TRISC           equ	3988	;# 
   195   000F94                     DDRC            equ	3988	;# 
   196   000F95                     TRISD           equ	3989	;# 
   197   000F95                     DDRD            equ	3989	;# 
   198   000F96                     TRISE           equ	3990	;# 
   199   000F96                     DDRE            equ	3990	;# 
   200   000F9B                     OSCTUNE         equ	3995	;# 
   201   000F9D                     PIE1            equ	3997	;# 
   202   000F9E                     PIR1            equ	3998	;# 
   203   000F9F                     IPR1            equ	3999	;# 
   204   000FA0                     PIE2            equ	4000	;# 
   205   000FA1                     PIR2            equ	4001	;# 
   206   000FA2                     IPR2            equ	4002	;# 
   207   000FA6                     EECON1          equ	4006	;# 
   208   000FA7                     EECON2          equ	4007	;# 
   209   000FA8                     EEDATA          equ	4008	;# 
   210   000FA9                     EEADR           equ	4009	;# 
   211   000FAB                     RCSTA           equ	4011	;# 
   212   000FAB                     RCSTA1          equ	4011	;# 
   213   000FAC                     TXSTA           equ	4012	;# 
   214   000FAC                     TXSTA1          equ	4012	;# 
   215   000FAD                     TXREG           equ	4013	;# 
   216   000FAD                     TXREG1          equ	4013	;# 
   217   000FAE                     RCREG           equ	4014	;# 
   218   000FAE                     RCREG1          equ	4014	;# 
   219   000FAF                     SPBRG           equ	4015	;# 
   220   000FAF                     SPBRG1          equ	4015	;# 
   221   000FB0                     SPBRGH          equ	4016	;# 
   222   000FB1                     T3CON           equ	4017	;# 
   223   000FB2                     TMR3            equ	4018	;# 
   224   000FB2                     TMR3L           equ	4018	;# 
   225   000FB3                     TMR3H           equ	4019	;# 
   226   000FB4                     CMCON           equ	4020	;# 
   227   000FB5                     CVRCON          equ	4021	;# 
   228   000FB6                     ECCP1AS         equ	4022	;# 
   229   000FB7                     ECCP1DEL        equ	4023	;# 
   230   000FB7                     PWM1CON         equ	4023	;# 
   231   000FB8                     BAUDCON         equ	4024	;# 
   232   000FB8                     BAUDCTL         equ	4024	;# 
   233   000FBA                     CCP2CON         equ	4026	;# 
   234   000FBB                     CCPR2           equ	4027	;# 
   235   000FBB                     CCPR2L          equ	4027	;# 
   236   000FBC                     CCPR2H          equ	4028	;# 
   237   000FBD                     CCP1CON         equ	4029	;# 
   238   000FBD                     ECCP1CON        equ	4029	;# 
   239   000FBE                     CCPR1           equ	4030	;# 
   240   000FBE                     CCPR1L          equ	4030	;# 
   241   000FBF                     CCPR1H          equ	4031	;# 
   242   000FC0                     ADCON2          equ	4032	;# 
   243   000FC1                     ADCON1          equ	4033	;# 
   244   000FC2                     ADCON0          equ	4034	;# 
   245   000FC3                     ADRES           equ	4035	;# 
   246   000FC3                     ADRESL          equ	4035	;# 
   247   000FC4                     ADRESH          equ	4036	;# 
   248   000FC5                     SSPCON2         equ	4037	;# 
   249   000FC6                     SSPCON1         equ	4038	;# 
   250   000FC7                     SSPSTAT         equ	4039	;# 
   251   000FC8                     SSPADD          equ	4040	;# 
   252   000FC9                     SSPBUF          equ	4041	;# 
   253   000FCA                     T2CON           equ	4042	;# 
   254   000FCB                     PR2             equ	4043	;# 
   255   000FCB                     MEMCON          equ	4043	;# 
   256   000FCC                     TMR2            equ	4044	;# 
   257   000FCD                     T1CON           equ	4045	;# 
   258   000FCE                     TMR1            equ	4046	;# 
   259   000FCE                     TMR1L           equ	4046	;# 
   260   000FCF                     TMR1H           equ	4047	;# 
   261   000FD0                     RCON            equ	4048	;# 
   262   000FD1                     WDTCON          equ	4049	;# 
   263   000FD2                     HLVDCON         equ	4050	;# 
   264   000FD2                     LVDCON          equ	4050	;# 
   265   000FD3                     OSCCON          equ	4051	;# 
   266   000FD5                     T0CON           equ	4053	;# 
   267   000FD6                     TMR0            equ	4054	;# 
   268   000FD6                     TMR0L           equ	4054	;# 
   269   000FD7                     TMR0H           equ	4055	;# 
   270   000FD8                     STATUS          equ	4056	;# 
   271   000FD9                     FSR2            equ	4057	;# 
   272   000FD9                     FSR2L           equ	4057	;# 
   273   000FDA                     FSR2H           equ	4058	;# 
   274   000FDB                     PLUSW2          equ	4059	;# 
   275   000FDC                     PREINC2         equ	4060	;# 
   276   000FDD                     POSTDEC2        equ	4061	;# 
   277   000FDE                     POSTINC2        equ	4062	;# 
   278   000FDF                     INDF2           equ	4063	;# 
   279   000FE0                     BSR             equ	4064	;# 
   280   000FE1                     FSR1            equ	4065	;# 
   281   000FE1                     FSR1L           equ	4065	;# 
   282   000FE2                     FSR1H           equ	4066	;# 
   283   000FE3                     PLUSW1          equ	4067	;# 
   284   000FE4                     PREINC1         equ	4068	;# 
   285   000FE5                     POSTDEC1        equ	4069	;# 
   286   000FE6                     POSTINC1        equ	4070	;# 
   287   000FE7                     INDF1           equ	4071	;# 
   288   000FE8                     WREG            equ	4072	;# 
   289   000FE9                     FSR0            equ	4073	;# 
   290   000FE9                     FSR0L           equ	4073	;# 
   291   000FEA                     FSR0H           equ	4074	;# 
   292   000FEB                     PLUSW0          equ	4075	;# 
   293   000FEC                     PREINC0         equ	4076	;# 
   294   000FED                     POSTDEC0        equ	4077	;# 
   295   000FEE                     POSTINC0        equ	4078	;# 
   296   000FEF                     INDF0           equ	4079	;# 
   297   000FF0                     INTCON3         equ	4080	;# 
   298   000FF1                     INTCON2         equ	4081	;# 
   299   000FF2                     INTCON          equ	4082	;# 
   300   000FF3                     PROD            equ	4083	;# 
   301   000FF3                     PRODL           equ	4083	;# 
   302   000FF4                     PRODH           equ	4084	;# 
   303   000FF5                     TABLAT          equ	4085	;# 
   304   000FF6                     TBLPTR          equ	4086	;# 
   305   000FF6                     TBLPTRL         equ	4086	;# 
   306   000FF7                     TBLPTRH         equ	4087	;# 
   307   000FF8                     TBLPTRU         equ	4088	;# 
   308   000FF9                     PCLAT           equ	4089	;# 
   309   000FF9                     PC              equ	4089	;# 
   310   000FF9                     PCL             equ	4089	;# 
   311   000FFA                     PCLATH          equ	4090	;# 
   312   000FFB                     PCLATU          equ	4091	;# 
   313   000FFC                     STKPTR          equ	4092	;# 
   314   000FFD                     TOS             equ	4093	;# 
   315   000FFD                     TOSL            equ	4093	;# 
   316   000FFE                     TOSH            equ	4094	;# 
   317   000FFF                     TOSU            equ	4095	;# 
   318   000F80                     PORTA           equ	3968	;# 
   319   000F81                     PORTB           equ	3969	;# 
   320   000F82                     PORTC           equ	3970	;# 
   321   000F83                     PORTD           equ	3971	;# 
   322   000F84                     PORTE           equ	3972	;# 
   323   000F89                     LATA            equ	3977	;# 
   324   000F8A                     LATB            equ	3978	;# 
   325   000F8B                     LATC            equ	3979	;# 
   326   000F8C                     LATD            equ	3980	;# 
   327   000F8D                     LATE            equ	3981	;# 
   328   000F92                     TRISA           equ	3986	;# 
   329   000F92                     DDRA            equ	3986	;# 
   330   000F93                     TRISB           equ	3987	;# 
   331   000F93                     DDRB            equ	3987	;# 
   332   000F94                     TRISC           equ	3988	;# 
   333   000F94                     DDRC            equ	3988	;# 
   334   000F95                     TRISD           equ	3989	;# 
   335   000F95                     DDRD            equ	3989	;# 
   336   000F96                     TRISE           equ	3990	;# 
   337   000F96                     DDRE            equ	3990	;# 
   338   000F9B                     OSCTUNE         equ	3995	;# 
   339   000F9D                     PIE1            equ	3997	;# 
   340   000F9E                     PIR1            equ	3998	;# 
   341   000F9F                     IPR1            equ	3999	;# 
   342   000FA0                     PIE2            equ	4000	;# 
   343   000FA1                     PIR2            equ	4001	;# 
   344   000FA2                     IPR2            equ	4002	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FA8                     EEDATA          equ	4008	;# 
   348   000FA9                     EEADR           equ	4009	;# 
   349   000FAB                     RCSTA           equ	4011	;# 
   350   000FAB                     RCSTA1          equ	4011	;# 
   351   000FAC                     TXSTA           equ	4012	;# 
   352   000FAC                     TXSTA1          equ	4012	;# 
   353   000FAD                     TXREG           equ	4013	;# 
   354   000FAD                     TXREG1          equ	4013	;# 
   355   000FAE                     RCREG           equ	4014	;# 
   356   000FAE                     RCREG1          equ	4014	;# 
   357   000FAF                     SPBRG           equ	4015	;# 
   358   000FAF                     SPBRG1          equ	4015	;# 
   359   000FB0                     SPBRGH          equ	4016	;# 
   360   000FB1                     T3CON           equ	4017	;# 
   361   000FB2                     TMR3            equ	4018	;# 
   362   000FB2                     TMR3L           equ	4018	;# 
   363   000FB3                     TMR3H           equ	4019	;# 
   364   000FB4                     CMCON           equ	4020	;# 
   365   000FB5                     CVRCON          equ	4021	;# 
   366   000FB6                     ECCP1AS         equ	4022	;# 
   367   000FB7                     ECCP1DEL        equ	4023	;# 
   368   000FB7                     PWM1CON         equ	4023	;# 
   369   000FB8                     BAUDCON         equ	4024	;# 
   370   000FB8                     BAUDCTL         equ	4024	;# 
   371   000FBA                     CCP2CON         equ	4026	;# 
   372   000FBB                     CCPR2           equ	4027	;# 
   373   000FBB                     CCPR2L          equ	4027	;# 
   374   000FBC                     CCPR2H          equ	4028	;# 
   375   000FBD                     CCP1CON         equ	4029	;# 
   376   000FBD                     ECCP1CON        equ	4029	;# 
   377   000FBE                     CCPR1           equ	4030	;# 
   378   000FBE                     CCPR1L          equ	4030	;# 
   379   000FBF                     CCPR1H          equ	4031	;# 
   380   000FC0                     ADCON2          equ	4032	;# 
   381   000FC1                     ADCON1          equ	4033	;# 
   382   000FC2                     ADCON0          equ	4034	;# 
   383   000FC3                     ADRES           equ	4035	;# 
   384   000FC3                     ADRESL          equ	4035	;# 
   385   000FC4                     ADRESH          equ	4036	;# 
   386   000FC5                     SSPCON2         equ	4037	;# 
   387   000FC6                     SSPCON1         equ	4038	;# 
   388   000FC7                     SSPSTAT         equ	4039	;# 
   389   000FC8                     SSPADD          equ	4040	;# 
   390   000FC9                     SSPBUF          equ	4041	;# 
   391   000FCA                     T2CON           equ	4042	;# 
   392   000FCB                     PR2             equ	4043	;# 
   393   000FCB                     MEMCON          equ	4043	;# 
   394   000FCC                     TMR2            equ	4044	;# 
   395   000FCD                     T1CON           equ	4045	;# 
   396   000FCE                     TMR1            equ	4046	;# 
   397   000FCE                     TMR1L           equ	4046	;# 
   398   000FCF                     TMR1H           equ	4047	;# 
   399   000FD0                     RCON            equ	4048	;# 
   400   000FD1                     WDTCON          equ	4049	;# 
   401   000FD2                     HLVDCON         equ	4050	;# 
   402   000FD2                     LVDCON          equ	4050	;# 
   403   000FD3                     OSCCON          equ	4051	;# 
   404   000FD5                     T0CON           equ	4053	;# 
   405   000FD6                     TMR0            equ	4054	;# 
   406   000FD6                     TMR0L           equ	4054	;# 
   407   000FD7                     TMR0H           equ	4055	;# 
   408   000FD8                     STATUS          equ	4056	;# 
   409   000FD9                     FSR2            equ	4057	;# 
   410   000FD9                     FSR2L           equ	4057	;# 
   411   000FDA                     FSR2H           equ	4058	;# 
   412   000FDB                     PLUSW2          equ	4059	;# 
   413   000FDC                     PREINC2         equ	4060	;# 
   414   000FDD                     POSTDEC2        equ	4061	;# 
   415   000FDE                     POSTINC2        equ	4062	;# 
   416   000FDF                     INDF2           equ	4063	;# 
   417   000FE0                     BSR             equ	4064	;# 
   418   000FE1                     FSR1            equ	4065	;# 
   419   000FE1                     FSR1L           equ	4065	;# 
   420   000FE2                     FSR1H           equ	4066	;# 
   421   000FE3                     PLUSW1          equ	4067	;# 
   422   000FE4                     PREINC1         equ	4068	;# 
   423   000FE5                     POSTDEC1        equ	4069	;# 
   424   000FE6                     POSTINC1        equ	4070	;# 
   425   000FE7                     INDF1           equ	4071	;# 
   426   000FE8                     WREG            equ	4072	;# 
   427   000FE9                     FSR0            equ	4073	;# 
   428   000FE9                     FSR0L           equ	4073	;# 
   429   000FEA                     FSR0H           equ	4074	;# 
   430   000FEB                     PLUSW0          equ	4075	;# 
   431   000FEC                     PREINC0         equ	4076	;# 
   432   000FED                     POSTDEC0        equ	4077	;# 
   433   000FEE                     POSTINC0        equ	4078	;# 
   434   000FEF                     INDF0           equ	4079	;# 
   435   000FF0                     INTCON3         equ	4080	;# 
   436   000FF1                     INTCON2         equ	4081	;# 
   437   000FF2                     INTCON          equ	4082	;# 
   438   000FF3                     PROD            equ	4083	;# 
   439   000FF3                     PRODL           equ	4083	;# 
   440   000FF4                     PRODH           equ	4084	;# 
   441   000FF5                     TABLAT          equ	4085	;# 
   442   000FF6                     TBLPTR          equ	4086	;# 
   443   000FF6                     TBLPTRL         equ	4086	;# 
   444   000FF7                     TBLPTRH         equ	4087	;# 
   445   000FF8                     TBLPTRU         equ	4088	;# 
   446   000FF9                     PCLAT           equ	4089	;# 
   447   000FF9                     PC              equ	4089	;# 
   448   000FF9                     PCL             equ	4089	;# 
   449   000FFA                     PCLATH          equ	4090	;# 
   450   000FFB                     PCLATU          equ	4091	;# 
   451   000FFC                     STKPTR          equ	4092	;# 
   452   000FFD                     TOS             equ	4093	;# 
   453   000FFD                     TOSL            equ	4093	;# 
   454   000FFE                     TOSH            equ	4094	;# 
   455   000FFF                     TOSU            equ	4095	;# 
   456   000F80                     PORTA           equ	3968	;# 
   457   000F81                     PORTB           equ	3969	;# 
   458   000F82                     PORTC           equ	3970	;# 
   459   000F83                     PORTD           equ	3971	;# 
   460   000F84                     PORTE           equ	3972	;# 
   461   000F89                     LATA            equ	3977	;# 
   462   000F8A                     LATB            equ	3978	;# 
   463   000F8B                     LATC            equ	3979	;# 
   464   000F8C                     LATD            equ	3980	;# 
   465   000F8D                     LATE            equ	3981	;# 
   466   000F92                     TRISA           equ	3986	;# 
   467   000F92                     DDRA            equ	3986	;# 
   468   000F93                     TRISB           equ	3987	;# 
   469   000F93                     DDRB            equ	3987	;# 
   470   000F94                     TRISC           equ	3988	;# 
   471   000F94                     DDRC            equ	3988	;# 
   472   000F95                     TRISD           equ	3989	;# 
   473   000F95                     DDRD            equ	3989	;# 
   474   000F96                     TRISE           equ	3990	;# 
   475   000F96                     DDRE            equ	3990	;# 
   476   000F9B                     OSCTUNE         equ	3995	;# 
   477   000F9D                     PIE1            equ	3997	;# 
   478   000F9E                     PIR1            equ	3998	;# 
   479   000F9F                     IPR1            equ	3999	;# 
   480   000FA0                     PIE2            equ	4000	;# 
   481   000FA1                     PIR2            equ	4001	;# 
   482   000FA2                     IPR2            equ	4002	;# 
   483   000FA6                     EECON1          equ	4006	;# 
   484   000FA7                     EECON2          equ	4007	;# 
   485   000FA8                     EEDATA          equ	4008	;# 
   486   000FA9                     EEADR           equ	4009	;# 
   487   000FAB                     RCSTA           equ	4011	;# 
   488   000FAB                     RCSTA1          equ	4011	;# 
   489   000FAC                     TXSTA           equ	4012	;# 
   490   000FAC                     TXSTA1          equ	4012	;# 
   491   000FAD                     TXREG           equ	4013	;# 
   492   000FAD                     TXREG1          equ	4013	;# 
   493   000FAE                     RCREG           equ	4014	;# 
   494   000FAE                     RCREG1          equ	4014	;# 
   495   000FAF                     SPBRG           equ	4015	;# 
   496   000FAF                     SPBRG1          equ	4015	;# 
   497   000FB0                     SPBRGH          equ	4016	;# 
   498   000FB1                     T3CON           equ	4017	;# 
   499   000FB2                     TMR3            equ	4018	;# 
   500   000FB2                     TMR3L           equ	4018	;# 
   501   000FB3                     TMR3H           equ	4019	;# 
   502   000FB4                     CMCON           equ	4020	;# 
   503   000FB5                     CVRCON          equ	4021	;# 
   504   000FB6                     ECCP1AS         equ	4022	;# 
   505   000FB7                     ECCP1DEL        equ	4023	;# 
   506   000FB7                     PWM1CON         equ	4023	;# 
   507   000FB8                     BAUDCON         equ	4024	;# 
   508   000FB8                     BAUDCTL         equ	4024	;# 
   509   000FBA                     CCP2CON         equ	4026	;# 
   510   000FBB                     CCPR2           equ	4027	;# 
   511   000FBB                     CCPR2L          equ	4027	;# 
   512   000FBC                     CCPR2H          equ	4028	;# 
   513   000FBD                     CCP1CON         equ	4029	;# 
   514   000FBD                     ECCP1CON        equ	4029	;# 
   515   000FBE                     CCPR1           equ	4030	;# 
   516   000FBE                     CCPR1L          equ	4030	;# 
   517   000FBF                     CCPR1H          equ	4031	;# 
   518   000FC0                     ADCON2          equ	4032	;# 
   519   000FC1                     ADCON1          equ	4033	;# 
   520   000FC2                     ADCON0          equ	4034	;# 
   521   000FC3                     ADRES           equ	4035	;# 
   522   000FC3                     ADRESL          equ	4035	;# 
   523   000FC4                     ADRESH          equ	4036	;# 
   524   000FC5                     SSPCON2         equ	4037	;# 
   525   000FC6                     SSPCON1         equ	4038	;# 
   526   000FC7                     SSPSTAT         equ	4039	;# 
   527   000FC8                     SSPADD          equ	4040	;# 
   528   000FC9                     SSPBUF          equ	4041	;# 
   529   000FCA                     T2CON           equ	4042	;# 
   530   000FCB                     PR2             equ	4043	;# 
   531   000FCB                     MEMCON          equ	4043	;# 
   532   000FCC                     TMR2            equ	4044	;# 
   533   000FCD                     T1CON           equ	4045	;# 
   534   000FCE                     TMR1            equ	4046	;# 
   535   000FCE                     TMR1L           equ	4046	;# 
   536   000FCF                     TMR1H           equ	4047	;# 
   537   000FD0                     RCON            equ	4048	;# 
   538   000FD1                     WDTCON          equ	4049	;# 
   539   000FD2                     HLVDCON         equ	4050	;# 
   540   000FD2                     LVDCON          equ	4050	;# 
   541   000FD3                     OSCCON          equ	4051	;# 
   542   000FD5                     T0CON           equ	4053	;# 
   543   000FD6                     TMR0            equ	4054	;# 
   544   000FD6                     TMR0L           equ	4054	;# 
   545   000FD7                     TMR0H           equ	4055	;# 
   546   000FD8                     STATUS          equ	4056	;# 
   547   000FD9                     FSR2            equ	4057	;# 
   548   000FD9                     FSR2L           equ	4057	;# 
   549   000FDA                     FSR2H           equ	4058	;# 
   550   000FDB                     PLUSW2          equ	4059	;# 
   551   000FDC                     PREINC2         equ	4060	;# 
   552   000FDD                     POSTDEC2        equ	4061	;# 
   553   000FDE                     POSTINC2        equ	4062	;# 
   554   000FDF                     INDF2           equ	4063	;# 
   555   000FE0                     BSR             equ	4064	;# 
   556   000FE1                     FSR1            equ	4065	;# 
   557   000FE1                     FSR1L           equ	4065	;# 
   558   000FE2                     FSR1H           equ	4066	;# 
   559   000FE3                     PLUSW1          equ	4067	;# 
   560   000FE4                     PREINC1         equ	4068	;# 
   561   000FE5                     POSTDEC1        equ	4069	;# 
   562   000FE6                     POSTINC1        equ	4070	;# 
   563   000FE7                     INDF1           equ	4071	;# 
   564   000FE8                     WREG            equ	4072	;# 
   565   000FE9                     FSR0            equ	4073	;# 
   566   000FE9                     FSR0L           equ	4073	;# 
   567   000FEA                     FSR0H           equ	4074	;# 
   568   000FEB                     PLUSW0          equ	4075	;# 
   569   000FEC                     PREINC0         equ	4076	;# 
   570   000FED                     POSTDEC0        equ	4077	;# 
   571   000FEE                     POSTINC0        equ	4078	;# 
   572   000FEF                     INDF0           equ	4079	;# 
   573   000FF0                     INTCON3         equ	4080	;# 
   574   000FF1                     INTCON2         equ	4081	;# 
   575   000FF2                     INTCON          equ	4082	;# 
   576   000FF3                     PROD            equ	4083	;# 
   577   000FF3                     PRODL           equ	4083	;# 
   578   000FF4                     PRODH           equ	4084	;# 
   579   000FF5                     TABLAT          equ	4085	;# 
   580   000FF6                     TBLPTR          equ	4086	;# 
   581   000FF6                     TBLPTRL         equ	4086	;# 
   582   000FF7                     TBLPTRH         equ	4087	;# 
   583   000FF8                     TBLPTRU         equ	4088	;# 
   584   000FF9                     PCLAT           equ	4089	;# 
   585   000FF9                     PC              equ	4089	;# 
   586   000FF9                     PCL             equ	4089	;# 
   587   000FFA                     PCLATH          equ	4090	;# 
   588   000FFB                     PCLATU          equ	4091	;# 
   589   000FFC                     STKPTR          equ	4092	;# 
   590   000FFD                     TOS             equ	4093	;# 
   591   000FFD                     TOSL            equ	4093	;# 
   592   000FFE                     TOSH            equ	4094	;# 
   593   000FFF                     TOSU            equ	4095	;# 
   594   000F80                     PORTA           equ	3968	;# 
   595   000F81                     PORTB           equ	3969	;# 
   596   000F82                     PORTC           equ	3970	;# 
   597   000F83                     PORTD           equ	3971	;# 
   598   000F84                     PORTE           equ	3972	;# 
   599   000F89                     LATA            equ	3977	;# 
   600   000F8A                     LATB            equ	3978	;# 
   601   000F8B                     LATC            equ	3979	;# 
   602   000F8C                     LATD            equ	3980	;# 
   603   000F8D                     LATE            equ	3981	;# 
   604   000F92                     TRISA           equ	3986	;# 
   605   000F92                     DDRA            equ	3986	;# 
   606   000F93                     TRISB           equ	3987	;# 
   607   000F93                     DDRB            equ	3987	;# 
   608   000F94                     TRISC           equ	3988	;# 
   609   000F94                     DDRC            equ	3988	;# 
   610   000F95                     TRISD           equ	3989	;# 
   611   000F95                     DDRD            equ	3989	;# 
   612   000F96                     TRISE           equ	3990	;# 
   613   000F96                     DDRE            equ	3990	;# 
   614   000F9B                     OSCTUNE         equ	3995	;# 
   615   000F9D                     PIE1            equ	3997	;# 
   616   000F9E                     PIR1            equ	3998	;# 
   617   000F9F                     IPR1            equ	3999	;# 
   618   000FA0                     PIE2            equ	4000	;# 
   619   000FA1                     PIR2            equ	4001	;# 
   620   000FA2                     IPR2            equ	4002	;# 
   621   000FA6                     EECON1          equ	4006	;# 
   622   000FA7                     EECON2          equ	4007	;# 
   623   000FA8                     EEDATA          equ	4008	;# 
   624   000FA9                     EEADR           equ	4009	;# 
   625   000FAB                     RCSTA           equ	4011	;# 
   626   000FAB                     RCSTA1          equ	4011	;# 
   627   000FAC                     TXSTA           equ	4012	;# 
   628   000FAC                     TXSTA1          equ	4012	;# 
   629   000FAD                     TXREG           equ	4013	;# 
   630   000FAD                     TXREG1          equ	4013	;# 
   631   000FAE                     RCREG           equ	4014	;# 
   632   000FAE                     RCREG1          equ	4014	;# 
   633   000FAF                     SPBRG           equ	4015	;# 
   634   000FAF                     SPBRG1          equ	4015	;# 
   635   000FB0                     SPBRGH          equ	4016	;# 
   636   000FB1                     T3CON           equ	4017	;# 
   637   000FB2                     TMR3            equ	4018	;# 
   638   000FB2                     TMR3L           equ	4018	;# 
   639   000FB3                     TMR3H           equ	4019	;# 
   640   000FB4                     CMCON           equ	4020	;# 
   641   000FB5                     CVRCON          equ	4021	;# 
   642   000FB6                     ECCP1AS         equ	4022	;# 
   643   000FB7                     ECCP1DEL        equ	4023	;# 
   644   000FB7                     PWM1CON         equ	4023	;# 
   645   000FB8                     BAUDCON         equ	4024	;# 
   646   000FB8                     BAUDCTL         equ	4024	;# 
   647   000FBA                     CCP2CON         equ	4026	;# 
   648   000FBB                     CCPR2           equ	4027	;# 
   649   000FBB                     CCPR2L          equ	4027	;# 
   650   000FBC                     CCPR2H          equ	4028	;# 
   651   000FBD                     CCP1CON         equ	4029	;# 
   652   000FBD                     ECCP1CON        equ	4029	;# 
   653   000FBE                     CCPR1           equ	4030	;# 
   654   000FBE                     CCPR1L          equ	4030	;# 
   655   000FBF                     CCPR1H          equ	4031	;# 
   656   000FC0                     ADCON2          equ	4032	;# 
   657   000FC1                     ADCON1          equ	4033	;# 
   658   000FC2                     ADCON0          equ	4034	;# 
   659   000FC3                     ADRES           equ	4035	;# 
   660   000FC3                     ADRESL          equ	4035	;# 
   661   000FC4                     ADRESH          equ	4036	;# 
   662   000FC5                     SSPCON2         equ	4037	;# 
   663   000FC6                     SSPCON1         equ	4038	;# 
   664   000FC7                     SSPSTAT         equ	4039	;# 
   665   000FC8                     SSPADD          equ	4040	;# 
   666   000FC9                     SSPBUF          equ	4041	;# 
   667   000FCA                     T2CON           equ	4042	;# 
   668   000FCB                     PR2             equ	4043	;# 
   669   000FCB                     MEMCON          equ	4043	;# 
   670   000FCC                     TMR2            equ	4044	;# 
   671   000FCD                     T1CON           equ	4045	;# 
   672   000FCE                     TMR1            equ	4046	;# 
   673   000FCE                     TMR1L           equ	4046	;# 
   674   000FCF                     TMR1H           equ	4047	;# 
   675   000FD0                     RCON            equ	4048	;# 
   676   000FD1                     WDTCON          equ	4049	;# 
   677   000FD2                     HLVDCON         equ	4050	;# 
   678   000FD2                     LVDCON          equ	4050	;# 
   679   000FD3                     OSCCON          equ	4051	;# 
   680   000FD5                     T0CON           equ	4053	;# 
   681   000FD6                     TMR0            equ	4054	;# 
   682   000FD6                     TMR0L           equ	4054	;# 
   683   000FD7                     TMR0H           equ	4055	;# 
   684   000FD8                     STATUS          equ	4056	;# 
   685   000FD9                     FSR2            equ	4057	;# 
   686   000FD9                     FSR2L           equ	4057	;# 
   687   000FDA                     FSR2H           equ	4058	;# 
   688   000FDB                     PLUSW2          equ	4059	;# 
   689   000FDC                     PREINC2         equ	4060	;# 
   690   000FDD                     POSTDEC2        equ	4061	;# 
   691   000FDE                     POSTINC2        equ	4062	;# 
   692   000FDF                     INDF2           equ	4063	;# 
   693   000FE0                     BSR             equ	4064	;# 
   694   000FE1                     FSR1            equ	4065	;# 
   695   000FE1                     FSR1L           equ	4065	;# 
   696   000FE2                     FSR1H           equ	4066	;# 
   697   000FE3                     PLUSW1          equ	4067	;# 
   698   000FE4                     PREINC1         equ	4068	;# 
   699   000FE5                     POSTDEC1        equ	4069	;# 
   700   000FE6                     POSTINC1        equ	4070	;# 
   701   000FE7                     INDF1           equ	4071	;# 
   702   000FE8                     WREG            equ	4072	;# 
   703   000FE9                     FSR0            equ	4073	;# 
   704   000FE9                     FSR0L           equ	4073	;# 
   705   000FEA                     FSR0H           equ	4074	;# 
   706   000FEB                     PLUSW0          equ	4075	;# 
   707   000FEC                     PREINC0         equ	4076	;# 
   708   000FED                     POSTDEC0        equ	4077	;# 
   709   000FEE                     POSTINC0        equ	4078	;# 
   710   000FEF                     INDF0           equ	4079	;# 
   711   000FF0                     INTCON3         equ	4080	;# 
   712   000FF1                     INTCON2         equ	4081	;# 
   713   000FF2                     INTCON          equ	4082	;# 
   714   000FF3                     PROD            equ	4083	;# 
   715   000FF3                     PRODL           equ	4083	;# 
   716   000FF4                     PRODH           equ	4084	;# 
   717   000FF5                     TABLAT          equ	4085	;# 
   718   000FF6                     TBLPTR          equ	4086	;# 
   719   000FF6                     TBLPTRL         equ	4086	;# 
   720   000FF7                     TBLPTRH         equ	4087	;# 
   721   000FF8                     TBLPTRU         equ	4088	;# 
   722   000FF9                     PCLAT           equ	4089	;# 
   723   000FF9                     PC              equ	4089	;# 
   724   000FF9                     PCL             equ	4089	;# 
   725   000FFA                     PCLATH          equ	4090	;# 
   726   000FFB                     PCLATU          equ	4091	;# 
   727   000FFC                     STKPTR          equ	4092	;# 
   728   000FFD                     TOS             equ	4093	;# 
   729   000FFD                     TOSL            equ	4093	;# 
   730   000FFE                     TOSH            equ	4094	;# 
   731   000FFF                     TOSU            equ	4095	;# 
   732   000F80                     PORTA           equ	3968	;# 
   733   000F81                     PORTB           equ	3969	;# 
   734   000F82                     PORTC           equ	3970	;# 
   735   000F83                     PORTD           equ	3971	;# 
   736   000F84                     PORTE           equ	3972	;# 
   737   000F89                     LATA            equ	3977	;# 
   738   000F8A                     LATB            equ	3978	;# 
   739   000F8B                     LATC            equ	3979	;# 
   740   000F8C                     LATD            equ	3980	;# 
   741   000F8D                     LATE            equ	3981	;# 
   742   000F92                     TRISA           equ	3986	;# 
   743   000F92                     DDRA            equ	3986	;# 
   744   000F93                     TRISB           equ	3987	;# 
   745   000F93                     DDRB            equ	3987	;# 
   746   000F94                     TRISC           equ	3988	;# 
   747   000F94                     DDRC            equ	3988	;# 
   748   000F95                     TRISD           equ	3989	;# 
   749   000F95                     DDRD            equ	3989	;# 
   750   000F96                     TRISE           equ	3990	;# 
   751   000F96                     DDRE            equ	3990	;# 
   752   000F9B                     OSCTUNE         equ	3995	;# 
   753   000F9D                     PIE1            equ	3997	;# 
   754   000F9E                     PIR1            equ	3998	;# 
   755   000F9F                     IPR1            equ	3999	;# 
   756   000FA0                     PIE2            equ	4000	;# 
   757   000FA1                     PIR2            equ	4001	;# 
   758   000FA2                     IPR2            equ	4002	;# 
   759   000FA6                     EECON1          equ	4006	;# 
   760   000FA7                     EECON2          equ	4007	;# 
   761   000FA8                     EEDATA          equ	4008	;# 
   762   000FA9                     EEADR           equ	4009	;# 
   763   000FAB                     RCSTA           equ	4011	;# 
   764   000FAB                     RCSTA1          equ	4011	;# 
   765   000FAC                     TXSTA           equ	4012	;# 
   766   000FAC                     TXSTA1          equ	4012	;# 
   767   000FAD                     TXREG           equ	4013	;# 
   768   000FAD                     TXREG1          equ	4013	;# 
   769   000FAE                     RCREG           equ	4014	;# 
   770   000FAE                     RCREG1          equ	4014	;# 
   771   000FAF                     SPBRG           equ	4015	;# 
   772   000FAF                     SPBRG1          equ	4015	;# 
   773   000FB0                     SPBRGH          equ	4016	;# 
   774   000FB1                     T3CON           equ	4017	;# 
   775   000FB2                     TMR3            equ	4018	;# 
   776   000FB2                     TMR3L           equ	4018	;# 
   777   000FB3                     TMR3H           equ	4019	;# 
   778   000FB4                     CMCON           equ	4020	;# 
   779   000FB5                     CVRCON          equ	4021	;# 
   780   000FB6                     ECCP1AS         equ	4022	;# 
   781   000FB7                     ECCP1DEL        equ	4023	;# 
   782   000FB7                     PWM1CON         equ	4023	;# 
   783   000FB8                     BAUDCON         equ	4024	;# 
   784   000FB8                     BAUDCTL         equ	4024	;# 
   785   000FBA                     CCP2CON         equ	4026	;# 
   786   000FBB                     CCPR2           equ	4027	;# 
   787   000FBB                     CCPR2L          equ	4027	;# 
   788   000FBC                     CCPR2H          equ	4028	;# 
   789   000FBD                     CCP1CON         equ	4029	;# 
   790   000FBD                     ECCP1CON        equ	4029	;# 
   791   000FBE                     CCPR1           equ	4030	;# 
   792   000FBE                     CCPR1L          equ	4030	;# 
   793   000FBF                     CCPR1H          equ	4031	;# 
   794   000FC0                     ADCON2          equ	4032	;# 
   795   000FC1                     ADCON1          equ	4033	;# 
   796   000FC2                     ADCON0          equ	4034	;# 
   797   000FC3                     ADRES           equ	4035	;# 
   798   000FC3                     ADRESL          equ	4035	;# 
   799   000FC4                     ADRESH          equ	4036	;# 
   800   000FC5                     SSPCON2         equ	4037	;# 
   801   000FC6                     SSPCON1         equ	4038	;# 
   802   000FC7                     SSPSTAT         equ	4039	;# 
   803   000FC8                     SSPADD          equ	4040	;# 
   804   000FC9                     SSPBUF          equ	4041	;# 
   805   000FCA                     T2CON           equ	4042	;# 
   806   000FCB                     PR2             equ	4043	;# 
   807   000FCB                     MEMCON          equ	4043	;# 
   808   000FCC                     TMR2            equ	4044	;# 
   809   000FCD                     T1CON           equ	4045	;# 
   810   000FCE                     TMR1            equ	4046	;# 
   811   000FCE                     TMR1L           equ	4046	;# 
   812   000FCF                     TMR1H           equ	4047	;# 
   813   000FD0                     RCON            equ	4048	;# 
   814   000FD1                     WDTCON          equ	4049	;# 
   815   000FD2                     HLVDCON         equ	4050	;# 
   816   000FD2                     LVDCON          equ	4050	;# 
   817   000FD3                     OSCCON          equ	4051	;# 
   818   000FD5                     T0CON           equ	4053	;# 
   819   000FD6                     TMR0            equ	4054	;# 
   820   000FD6                     TMR0L           equ	4054	;# 
   821   000FD7                     TMR0H           equ	4055	;# 
   822   000FD8                     STATUS          equ	4056	;# 
   823   000FD9                     FSR2            equ	4057	;# 
   824   000FD9                     FSR2L           equ	4057	;# 
   825   000FDA                     FSR2H           equ	4058	;# 
   826   000FDB                     PLUSW2          equ	4059	;# 
   827   000FDC                     PREINC2         equ	4060	;# 
   828   000FDD                     POSTDEC2        equ	4061	;# 
   829   000FDE                     POSTINC2        equ	4062	;# 
   830   000FDF                     INDF2           equ	4063	;# 
   831   000FE0                     BSR             equ	4064	;# 
   832   000FE1                     FSR1            equ	4065	;# 
   833   000FE1                     FSR1L           equ	4065	;# 
   834   000FE2                     FSR1H           equ	4066	;# 
   835   000FE3                     PLUSW1          equ	4067	;# 
   836   000FE4                     PREINC1         equ	4068	;# 
   837   000FE5                     POSTDEC1        equ	4069	;# 
   838   000FE6                     POSTINC1        equ	4070	;# 
   839   000FE7                     INDF1           equ	4071	;# 
   840   000FE8                     WREG            equ	4072	;# 
   841   000FE9                     FSR0            equ	4073	;# 
   842   000FE9                     FSR0L           equ	4073	;# 
   843   000FEA                     FSR0H           equ	4074	;# 
   844   000FEB                     PLUSW0          equ	4075	;# 
   845   000FEC                     PREINC0         equ	4076	;# 
   846   000FED                     POSTDEC0        equ	4077	;# 
   847   000FEE                     POSTINC0        equ	4078	;# 
   848   000FEF                     INDF0           equ	4079	;# 
   849   000FF0                     INTCON3         equ	4080	;# 
   850   000FF1                     INTCON2         equ	4081	;# 
   851   000FF2                     INTCON          equ	4082	;# 
   852   000FF3                     PROD            equ	4083	;# 
   853   000FF3                     PRODL           equ	4083	;# 
   854   000FF4                     PRODH           equ	4084	;# 
   855   000FF5                     TABLAT          equ	4085	;# 
   856   000FF6                     TBLPTR          equ	4086	;# 
   857   000FF6                     TBLPTRL         equ	4086	;# 
   858   000FF7                     TBLPTRH         equ	4087	;# 
   859   000FF8                     TBLPTRU         equ	4088	;# 
   860   000FF9                     PCLAT           equ	4089	;# 
   861   000FF9                     PC              equ	4089	;# 
   862   000FF9                     PCL             equ	4089	;# 
   863   000FFA                     PCLATH          equ	4090	;# 
   864   000FFB                     PCLATU          equ	4091	;# 
   865   000FFC                     STKPTR          equ	4092	;# 
   866   000FFD                     TOS             equ	4093	;# 
   867   000FFD                     TOSL            equ	4093	;# 
   868   000FFE                     TOSH            equ	4094	;# 
   869   000FFF                     TOSU            equ	4095	;# 
   870   000F80                     PORTA           equ	3968	;# 
   871   000F81                     PORTB           equ	3969	;# 
   872   000F82                     PORTC           equ	3970	;# 
   873   000F83                     PORTD           equ	3971	;# 
   874   000F84                     PORTE           equ	3972	;# 
   875   000F89                     LATA            equ	3977	;# 
   876   000F8A                     LATB            equ	3978	;# 
   877   000F8B                     LATC            equ	3979	;# 
   878   000F8C                     LATD            equ	3980	;# 
   879   000F8D                     LATE            equ	3981	;# 
   880   000F92                     TRISA           equ	3986	;# 
   881   000F92                     DDRA            equ	3986	;# 
   882   000F93                     TRISB           equ	3987	;# 
   883   000F93                     DDRB            equ	3987	;# 
   884   000F94                     TRISC           equ	3988	;# 
   885   000F94                     DDRC            equ	3988	;# 
   886   000F95                     TRISD           equ	3989	;# 
   887   000F95                     DDRD            equ	3989	;# 
   888   000F96                     TRISE           equ	3990	;# 
   889   000F96                     DDRE            equ	3990	;# 
   890   000F9B                     OSCTUNE         equ	3995	;# 
   891   000F9D                     PIE1            equ	3997	;# 
   892   000F9E                     PIR1            equ	3998	;# 
   893   000F9F                     IPR1            equ	3999	;# 
   894   000FA0                     PIE2            equ	4000	;# 
   895   000FA1                     PIR2            equ	4001	;# 
   896   000FA2                     IPR2            equ	4002	;# 
   897   000FA6                     EECON1          equ	4006	;# 
   898   000FA7                     EECON2          equ	4007	;# 
   899   000FA8                     EEDATA          equ	4008	;# 
   900   000FA9                     EEADR           equ	4009	;# 
   901   000FAB                     RCSTA           equ	4011	;# 
   902   000FAB                     RCSTA1          equ	4011	;# 
   903   000FAC                     TXSTA           equ	4012	;# 
   904   000FAC                     TXSTA1          equ	4012	;# 
   905   000FAD                     TXREG           equ	4013	;# 
   906   000FAD                     TXREG1          equ	4013	;# 
   907   000FAE                     RCREG           equ	4014	;# 
   908   000FAE                     RCREG1          equ	4014	;# 
   909   000FAF                     SPBRG           equ	4015	;# 
   910   000FAF                     SPBRG1          equ	4015	;# 
   911   000FB0                     SPBRGH          equ	4016	;# 
   912   000FB1                     T3CON           equ	4017	;# 
   913   000FB2                     TMR3            equ	4018	;# 
   914   000FB2                     TMR3L           equ	4018	;# 
   915   000FB3                     TMR3H           equ	4019	;# 
   916   000FB4                     CMCON           equ	4020	;# 
   917   000FB5                     CVRCON          equ	4021	;# 
   918   000FB6                     ECCP1AS         equ	4022	;# 
   919   000FB7                     ECCP1DEL        equ	4023	;# 
   920   000FB7                     PWM1CON         equ	4023	;# 
   921   000FB8                     BAUDCON         equ	4024	;# 
   922   000FB8                     BAUDCTL         equ	4024	;# 
   923   000FBA                     CCP2CON         equ	4026	;# 
   924   000FBB                     CCPR2           equ	4027	;# 
   925   000FBB                     CCPR2L          equ	4027	;# 
   926   000FBC                     CCPR2H          equ	4028	;# 
   927   000FBD                     CCP1CON         equ	4029	;# 
   928   000FBD                     ECCP1CON        equ	4029	;# 
   929   000FBE                     CCPR1           equ	4030	;# 
   930   000FBE                     CCPR1L          equ	4030	;# 
   931   000FBF                     CCPR1H          equ	4031	;# 
   932   000FC0                     ADCON2          equ	4032	;# 
   933   000FC1                     ADCON1          equ	4033	;# 
   934   000FC2                     ADCON0          equ	4034	;# 
   935   000FC3                     ADRES           equ	4035	;# 
   936   000FC3                     ADRESL          equ	4035	;# 
   937   000FC4                     ADRESH          equ	4036	;# 
   938   000FC5                     SSPCON2         equ	4037	;# 
   939   000FC6                     SSPCON1         equ	4038	;# 
   940   000FC7                     SSPSTAT         equ	4039	;# 
   941   000FC8                     SSPADD          equ	4040	;# 
   942   000FC9                     SSPBUF          equ	4041	;# 
   943   000FCA                     T2CON           equ	4042	;# 
   944   000FCB                     PR2             equ	4043	;# 
   945   000FCB                     MEMCON          equ	4043	;# 
   946   000FCC                     TMR2            equ	4044	;# 
   947   000FCD                     T1CON           equ	4045	;# 
   948   000FCE                     TMR1            equ	4046	;# 
   949   000FCE                     TMR1L           equ	4046	;# 
   950   000FCF                     TMR1H           equ	4047	;# 
   951   000FD0                     RCON            equ	4048	;# 
   952   000FD1                     WDTCON          equ	4049	;# 
   953   000FD2                     HLVDCON         equ	4050	;# 
   954   000FD2                     LVDCON          equ	4050	;# 
   955   000FD3                     OSCCON          equ	4051	;# 
   956   000FD5                     T0CON           equ	4053	;# 
   957   000FD6                     TMR0            equ	4054	;# 
   958   000FD6                     TMR0L           equ	4054	;# 
   959   000FD7                     TMR0H           equ	4055	;# 
   960   000FD8                     STATUS          equ	4056	;# 
   961   000FD9                     FSR2            equ	4057	;# 
   962   000FD9                     FSR2L           equ	4057	;# 
   963   000FDA                     FSR2H           equ	4058	;# 
   964   000FDB                     PLUSW2          equ	4059	;# 
   965   000FDC                     PREINC2         equ	4060	;# 
   966   000FDD                     POSTDEC2        equ	4061	;# 
   967   000FDE                     POSTINC2        equ	4062	;# 
   968   000FDF                     INDF2           equ	4063	;# 
   969   000FE0                     BSR             equ	4064	;# 
   970   000FE1                     FSR1            equ	4065	;# 
   971   000FE1                     FSR1L           equ	4065	;# 
   972   000FE2                     FSR1H           equ	4066	;# 
   973   000FE3                     PLUSW1          equ	4067	;# 
   974   000FE4                     PREINC1         equ	4068	;# 
   975   000FE5                     POSTDEC1        equ	4069	;# 
   976   000FE6                     POSTINC1        equ	4070	;# 
   977   000FE7                     INDF1           equ	4071	;# 
   978   000FE8                     WREG            equ	4072	;# 
   979   000FE9                     FSR0            equ	4073	;# 
   980   000FE9                     FSR0L           equ	4073	;# 
   981   000FEA                     FSR0H           equ	4074	;# 
   982   000FEB                     PLUSW0          equ	4075	;# 
   983   000FEC                     PREINC0         equ	4076	;# 
   984   000FED                     POSTDEC0        equ	4077	;# 
   985   000FEE                     POSTINC0        equ	4078	;# 
   986   000FEF                     INDF0           equ	4079	;# 
   987   000FF0                     INTCON3         equ	4080	;# 
   988   000FF1                     INTCON2         equ	4081	;# 
   989   000FF2                     INTCON          equ	4082	;# 
   990   000FF3                     PROD            equ	4083	;# 
   991   000FF3                     PRODL           equ	4083	;# 
   992   000FF4                     PRODH           equ	4084	;# 
   993   000FF5                     TABLAT          equ	4085	;# 
   994   000FF6                     TBLPTR          equ	4086	;# 
   995   000FF6                     TBLPTRL         equ	4086	;# 
   996   000FF7                     TBLPTRH         equ	4087	;# 
   997   000FF8                     TBLPTRU         equ	4088	;# 
   998   000FF9                     PCLAT           equ	4089	;# 
   999   000FF9                     PC              equ	4089	;# 
  1000   000FF9                     PCL             equ	4089	;# 
  1001   000FFA                     PCLATH          equ	4090	;# 
  1002   000FFB                     PCLATU          equ	4091	;# 
  1003   000FFC                     STKPTR          equ	4092	;# 
  1004   000FFD                     TOS             equ	4093	;# 
  1005   000FFD                     TOSL            equ	4093	;# 
  1006   000FFE                     TOSH            equ	4094	;# 
  1007   000FFF                     TOSU            equ	4095	;# 
  1008   000F80                     PORTA           equ	3968	;# 
  1009   000F81                     PORTB           equ	3969	;# 
  1010   000F82                     PORTC           equ	3970	;# 
  1011   000F83                     PORTD           equ	3971	;# 
  1012   000F84                     PORTE           equ	3972	;# 
  1013   000F89                     LATA            equ	3977	;# 
  1014   000F8A                     LATB            equ	3978	;# 
  1015   000F8B                     LATC            equ	3979	;# 
  1016   000F8C                     LATD            equ	3980	;# 
  1017   000F8D                     LATE            equ	3981	;# 
  1018   000F92                     TRISA           equ	3986	;# 
  1019   000F92                     DDRA            equ	3986	;# 
  1020   000F93                     TRISB           equ	3987	;# 
  1021   000F93                     DDRB            equ	3987	;# 
  1022   000F94                     TRISC           equ	3988	;# 
  1023   000F94                     DDRC            equ	3988	;# 
  1024   000F95                     TRISD           equ	3989	;# 
  1025   000F95                     DDRD            equ	3989	;# 
  1026   000F96                     TRISE           equ	3990	;# 
  1027   000F96                     DDRE            equ	3990	;# 
  1028   000F9B                     OSCTUNE         equ	3995	;# 
  1029   000F9D                     PIE1            equ	3997	;# 
  1030   000F9E                     PIR1            equ	3998	;# 
  1031   000F9F                     IPR1            equ	3999	;# 
  1032   000FA0                     PIE2            equ	4000	;# 
  1033   000FA1                     PIR2            equ	4001	;# 
  1034   000FA2                     IPR2            equ	4002	;# 
  1035   000FA6                     EECON1          equ	4006	;# 
  1036   000FA7                     EECON2          equ	4007	;# 
  1037   000FA8                     EEDATA          equ	4008	;# 
  1038   000FA9                     EEADR           equ	4009	;# 
  1039   000FAB                     RCSTA           equ	4011	;# 
  1040   000FAB                     RCSTA1          equ	4011	;# 
  1041   000FAC                     TXSTA           equ	4012	;# 
  1042   000FAC                     TXSTA1          equ	4012	;# 
  1043   000FAD                     TXREG           equ	4013	;# 
  1044   000FAD                     TXREG1          equ	4013	;# 
  1045   000FAE                     RCREG           equ	4014	;# 
  1046   000FAE                     RCREG1          equ	4014	;# 
  1047   000FAF                     SPBRG           equ	4015	;# 
  1048   000FAF                     SPBRG1          equ	4015	;# 
  1049   000FB0                     SPBRGH          equ	4016	;# 
  1050   000FB1                     T3CON           equ	4017	;# 
  1051   000FB2                     TMR3            equ	4018	;# 
  1052   000FB2                     TMR3L           equ	4018	;# 
  1053   000FB3                     TMR3H           equ	4019	;# 
  1054   000FB4                     CMCON           equ	4020	;# 
  1055   000FB5                     CVRCON          equ	4021	;# 
  1056   000FB6                     ECCP1AS         equ	4022	;# 
  1057   000FB7                     ECCP1DEL        equ	4023	;# 
  1058   000FB7                     PWM1CON         equ	4023	;# 
  1059   000FB8                     BAUDCON         equ	4024	;# 
  1060   000FB8                     BAUDCTL         equ	4024	;# 
  1061   000FBA                     CCP2CON         equ	4026	;# 
  1062   000FBB                     CCPR2           equ	4027	;# 
  1063   000FBB                     CCPR2L          equ	4027	;# 
  1064   000FBC                     CCPR2H          equ	4028	;# 
  1065   000FBD                     CCP1CON         equ	4029	;# 
  1066   000FBD                     ECCP1CON        equ	4029	;# 
  1067   000FBE                     CCPR1           equ	4030	;# 
  1068   000FBE                     CCPR1L          equ	4030	;# 
  1069   000FBF                     CCPR1H          equ	4031	;# 
  1070   000FC0                     ADCON2          equ	4032	;# 
  1071   000FC1                     ADCON1          equ	4033	;# 
  1072   000FC2                     ADCON0          equ	4034	;# 
  1073   000FC3                     ADRES           equ	4035	;# 
  1074   000FC3                     ADRESL          equ	4035	;# 
  1075   000FC4                     ADRESH          equ	4036	;# 
  1076   000FC5                     SSPCON2         equ	4037	;# 
  1077   000FC6                     SSPCON1         equ	4038	;# 
  1078   000FC7                     SSPSTAT         equ	4039	;# 
  1079   000FC8                     SSPADD          equ	4040	;# 
  1080   000FC9                     SSPBUF          equ	4041	;# 
  1081   000FCA                     T2CON           equ	4042	;# 
  1082   000FCB                     PR2             equ	4043	;# 
  1083   000FCB                     MEMCON          equ	4043	;# 
  1084   000FCC                     TMR2            equ	4044	;# 
  1085   000FCD                     T1CON           equ	4045	;# 
  1086   000FCE                     TMR1            equ	4046	;# 
  1087   000FCE                     TMR1L           equ	4046	;# 
  1088   000FCF                     TMR1H           equ	4047	;# 
  1089   000FD0                     RCON            equ	4048	;# 
  1090   000FD1                     WDTCON          equ	4049	;# 
  1091   000FD2                     HLVDCON         equ	4050	;# 
  1092   000FD2                     LVDCON          equ	4050	;# 
  1093   000FD3                     OSCCON          equ	4051	;# 
  1094   000FD5                     T0CON           equ	4053	;# 
  1095   000FD6                     TMR0            equ	4054	;# 
  1096   000FD6                     TMR0L           equ	4054	;# 
  1097   000FD7                     TMR0H           equ	4055	;# 
  1098   000FD8                     STATUS          equ	4056	;# 
  1099   000FD9                     FSR2            equ	4057	;# 
  1100   000FD9                     FSR2L           equ	4057	;# 
  1101   000FDA                     FSR2H           equ	4058	;# 
  1102   000FDB                     PLUSW2          equ	4059	;# 
  1103   000FDC                     PREINC2         equ	4060	;# 
  1104   000FDD                     POSTDEC2        equ	4061	;# 
  1105   000FDE                     POSTINC2        equ	4062	;# 
  1106   000FDF                     INDF2           equ	4063	;# 
  1107   000FE0                     BSR             equ	4064	;# 
  1108   000FE1                     FSR1            equ	4065	;# 
  1109   000FE1                     FSR1L           equ	4065	;# 
  1110   000FE2                     FSR1H           equ	4066	;# 
  1111   000FE3                     PLUSW1          equ	4067	;# 
  1112   000FE4                     PREINC1         equ	4068	;# 
  1113   000FE5                     POSTDEC1        equ	4069	;# 
  1114   000FE6                     POSTINC1        equ	4070	;# 
  1115   000FE7                     INDF1           equ	4071	;# 
  1116   000FE8                     WREG            equ	4072	;# 
  1117   000FE9                     FSR0            equ	4073	;# 
  1118   000FE9                     FSR0L           equ	4073	;# 
  1119   000FEA                     FSR0H           equ	4074	;# 
  1120   000FEB                     PLUSW0          equ	4075	;# 
  1121   000FEC                     PREINC0         equ	4076	;# 
  1122   000FED                     POSTDEC0        equ	4077	;# 
  1123   000FEE                     POSTINC0        equ	4078	;# 
  1124   000FEF                     INDF0           equ	4079	;# 
  1125   000FF0                     INTCON3         equ	4080	;# 
  1126   000FF1                     INTCON2         equ	4081	;# 
  1127   000FF2                     INTCON          equ	4082	;# 
  1128   000FF3                     PROD            equ	4083	;# 
  1129   000FF3                     PRODL           equ	4083	;# 
  1130   000FF4                     PRODH           equ	4084	;# 
  1131   000FF5                     TABLAT          equ	4085	;# 
  1132   000FF6                     TBLPTR          equ	4086	;# 
  1133   000FF6                     TBLPTRL         equ	4086	;# 
  1134   000FF7                     TBLPTRH         equ	4087	;# 
  1135   000FF8                     TBLPTRU         equ	4088	;# 
  1136   000FF9                     PCLAT           equ	4089	;# 
  1137   000FF9                     PC              equ	4089	;# 
  1138   000FF9                     PCL             equ	4089	;# 
  1139   000FFA                     PCLATH          equ	4090	;# 
  1140   000FFB                     PCLATU          equ	4091	;# 
  1141   000FFC                     STKPTR          equ	4092	;# 
  1142   000FFD                     TOS             equ	4093	;# 
  1143   000FFD                     TOSL            equ	4093	;# 
  1144   000FFE                     TOSH            equ	4094	;# 
  1145   000FFF                     TOSU            equ	4095	;# 
  1146   000F80                     PORTA           equ	3968	;# 
  1147   000F81                     PORTB           equ	3969	;# 
  1148   000F82                     PORTC           equ	3970	;# 
  1149   000F83                     PORTD           equ	3971	;# 
  1150   000F84                     PORTE           equ	3972	;# 
  1151   000F89                     LATA            equ	3977	;# 
  1152   000F8A                     LATB            equ	3978	;# 
  1153   000F8B                     LATC            equ	3979	;# 
  1154   000F8C                     LATD            equ	3980	;# 
  1155   000F8D                     LATE            equ	3981	;# 
  1156   000F92                     TRISA           equ	3986	;# 
  1157   000F92                     DDRA            equ	3986	;# 
  1158   000F93                     TRISB           equ	3987	;# 
  1159   000F93                     DDRB            equ	3987	;# 
  1160   000F94                     TRISC           equ	3988	;# 
  1161   000F94                     DDRC            equ	3988	;# 
  1162   000F95                     TRISD           equ	3989	;# 
  1163   000F95                     DDRD            equ	3989	;# 
  1164   000F96                     TRISE           equ	3990	;# 
  1165   000F96                     DDRE            equ	3990	;# 
  1166   000F9B                     OSCTUNE         equ	3995	;# 
  1167   000F9D                     PIE1            equ	3997	;# 
  1168   000F9E                     PIR1            equ	3998	;# 
  1169   000F9F                     IPR1            equ	3999	;# 
  1170   000FA0                     PIE2            equ	4000	;# 
  1171   000FA1                     PIR2            equ	4001	;# 
  1172   000FA2                     IPR2            equ	4002	;# 
  1173   000FA6                     EECON1          equ	4006	;# 
  1174   000FA7                     EECON2          equ	4007	;# 
  1175   000FA8                     EEDATA          equ	4008	;# 
  1176   000FA9                     EEADR           equ	4009	;# 
  1177   000FAB                     RCSTA           equ	4011	;# 
  1178   000FAB                     RCSTA1          equ	4011	;# 
  1179   000FAC                     TXSTA           equ	4012	;# 
  1180   000FAC                     TXSTA1          equ	4012	;# 
  1181   000FAD                     TXREG           equ	4013	;# 
  1182   000FAD                     TXREG1          equ	4013	;# 
  1183   000FAE                     RCREG           equ	4014	;# 
  1184   000FAE                     RCREG1          equ	4014	;# 
  1185   000FAF                     SPBRG           equ	4015	;# 
  1186   000FAF                     SPBRG1          equ	4015	;# 
  1187   000FB0                     SPBRGH          equ	4016	;# 
  1188   000FB1                     T3CON           equ	4017	;# 
  1189   000FB2                     TMR3            equ	4018	;# 
  1190   000FB2                     TMR3L           equ	4018	;# 
  1191   000FB3                     TMR3H           equ	4019	;# 
  1192   000FB4                     CMCON           equ	4020	;# 
  1193   000FB5                     CVRCON          equ	4021	;# 
  1194   000FB6                     ECCP1AS         equ	4022	;# 
  1195   000FB7                     ECCP1DEL        equ	4023	;# 
  1196   000FB7                     PWM1CON         equ	4023	;# 
  1197   000FB8                     BAUDCON         equ	4024	;# 
  1198   000FB8                     BAUDCTL         equ	4024	;# 
  1199   000FBA                     CCP2CON         equ	4026	;# 
  1200   000FBB                     CCPR2           equ	4027	;# 
  1201   000FBB                     CCPR2L          equ	4027	;# 
  1202   000FBC                     CCPR2H          equ	4028	;# 
  1203   000FBD                     CCP1CON         equ	4029	;# 
  1204   000FBD                     ECCP1CON        equ	4029	;# 
  1205   000FBE                     CCPR1           equ	4030	;# 
  1206   000FBE                     CCPR1L          equ	4030	;# 
  1207   000FBF                     CCPR1H          equ	4031	;# 
  1208   000FC0                     ADCON2          equ	4032	;# 
  1209   000FC1                     ADCON1          equ	4033	;# 
  1210   000FC2                     ADCON0          equ	4034	;# 
  1211   000FC3                     ADRES           equ	4035	;# 
  1212   000FC3                     ADRESL          equ	4035	;# 
  1213   000FC4                     ADRESH          equ	4036	;# 
  1214   000FC5                     SSPCON2         equ	4037	;# 
  1215   000FC6                     SSPCON1         equ	4038	;# 
  1216   000FC7                     SSPSTAT         equ	4039	;# 
  1217   000FC8                     SSPADD          equ	4040	;# 
  1218   000FC9                     SSPBUF          equ	4041	;# 
  1219   000FCA                     T2CON           equ	4042	;# 
  1220   000FCB                     PR2             equ	4043	;# 
  1221   000FCB                     MEMCON          equ	4043	;# 
  1222   000FCC                     TMR2            equ	4044	;# 
  1223   000FCD                     T1CON           equ	4045	;# 
  1224   000FCE                     TMR1            equ	4046	;# 
  1225   000FCE                     TMR1L           equ	4046	;# 
  1226   000FCF                     TMR1H           equ	4047	;# 
  1227   000FD0                     RCON            equ	4048	;# 
  1228   000FD1                     WDTCON          equ	4049	;# 
  1229   000FD2                     HLVDCON         equ	4050	;# 
  1230   000FD2                     LVDCON          equ	4050	;# 
  1231   000FD3                     OSCCON          equ	4051	;# 
  1232   000FD5                     T0CON           equ	4053	;# 
  1233   000FD6                     TMR0            equ	4054	;# 
  1234   000FD6                     TMR0L           equ	4054	;# 
  1235   000FD7                     TMR0H           equ	4055	;# 
  1236   000FD8                     STATUS          equ	4056	;# 
  1237   000FD9                     FSR2            equ	4057	;# 
  1238   000FD9                     FSR2L           equ	4057	;# 
  1239   000FDA                     FSR2H           equ	4058	;# 
  1240   000FDB                     PLUSW2          equ	4059	;# 
  1241   000FDC                     PREINC2         equ	4060	;# 
  1242   000FDD                     POSTDEC2        equ	4061	;# 
  1243   000FDE                     POSTINC2        equ	4062	;# 
  1244   000FDF                     INDF2           equ	4063	;# 
  1245   000FE0                     BSR             equ	4064	;# 
  1246   000FE1                     FSR1            equ	4065	;# 
  1247   000FE1                     FSR1L           equ	4065	;# 
  1248   000FE2                     FSR1H           equ	4066	;# 
  1249   000FE3                     PLUSW1          equ	4067	;# 
  1250   000FE4                     PREINC1         equ	4068	;# 
  1251   000FE5                     POSTDEC1        equ	4069	;# 
  1252   000FE6                     POSTINC1        equ	4070	;# 
  1253   000FE7                     INDF1           equ	4071	;# 
  1254   000FE8                     WREG            equ	4072	;# 
  1255   000FE9                     FSR0            equ	4073	;# 
  1256   000FE9                     FSR0L           equ	4073	;# 
  1257   000FEA                     FSR0H           equ	4074	;# 
  1258   000FEB                     PLUSW0          equ	4075	;# 
  1259   000FEC                     PREINC0         equ	4076	;# 
  1260   000FED                     POSTDEC0        equ	4077	;# 
  1261   000FEE                     POSTINC0        equ	4078	;# 
  1262   000FEF                     INDF0           equ	4079	;# 
  1263   000FF0                     INTCON3         equ	4080	;# 
  1264   000FF1                     INTCON2         equ	4081	;# 
  1265   000FF2                     INTCON          equ	4082	;# 
  1266   000FF3                     PROD            equ	4083	;# 
  1267   000FF3                     PRODL           equ	4083	;# 
  1268   000FF4                     PRODH           equ	4084	;# 
  1269   000FF5                     TABLAT          equ	4085	;# 
  1270   000FF6                     TBLPTR          equ	4086	;# 
  1271   000FF6                     TBLPTRL         equ	4086	;# 
  1272   000FF7                     TBLPTRH         equ	4087	;# 
  1273   000FF8                     TBLPTRU         equ	4088	;# 
  1274   000FF9                     PCLAT           equ	4089	;# 
  1275   000FF9                     PC              equ	4089	;# 
  1276   000FF9                     PCL             equ	4089	;# 
  1277   000FFA                     PCLATH          equ	4090	;# 
  1278   000FFB                     PCLATU          equ	4091	;# 
  1279   000FFC                     STKPTR          equ	4092	;# 
  1280   000FFD                     TOS             equ	4093	;# 
  1281   000FFD                     TOSL            equ	4093	;# 
  1282   000FFE                     TOSH            equ	4094	;# 
  1283   000FFF                     TOSU            equ	4095	;# 
  1284   000F80                     PORTA           equ	3968	;# 
  1285   000F81                     PORTB           equ	3969	;# 
  1286   000F82                     PORTC           equ	3970	;# 
  1287   000F83                     PORTD           equ	3971	;# 
  1288   000F84                     PORTE           equ	3972	;# 
  1289   000F89                     LATA            equ	3977	;# 
  1290   000F8A                     LATB            equ	3978	;# 
  1291   000F8B                     LATC            equ	3979	;# 
  1292   000F8C                     LATD            equ	3980	;# 
  1293   000F8D                     LATE            equ	3981	;# 
  1294   000F92                     TRISA           equ	3986	;# 
  1295   000F92                     DDRA            equ	3986	;# 
  1296   000F93                     TRISB           equ	3987	;# 
  1297   000F93                     DDRB            equ	3987	;# 
  1298   000F94                     TRISC           equ	3988	;# 
  1299   000F94                     DDRC            equ	3988	;# 
  1300   000F95                     TRISD           equ	3989	;# 
  1301   000F95                     DDRD            equ	3989	;# 
  1302   000F96                     TRISE           equ	3990	;# 
  1303   000F96                     DDRE            equ	3990	;# 
  1304   000F9B                     OSCTUNE         equ	3995	;# 
  1305   000F9D                     PIE1            equ	3997	;# 
  1306   000F9E                     PIR1            equ	3998	;# 
  1307   000F9F                     IPR1            equ	3999	;# 
  1308   000FA0                     PIE2            equ	4000	;# 
  1309   000FA1                     PIR2            equ	4001	;# 
  1310   000FA2                     IPR2            equ	4002	;# 
  1311   000FA6                     EECON1          equ	4006	;# 
  1312   000FA7                     EECON2          equ	4007	;# 
  1313   000FA8                     EEDATA          equ	4008	;# 
  1314   000FA9                     EEADR           equ	4009	;# 
  1315   000FAB                     RCSTA           equ	4011	;# 
  1316   000FAB                     RCSTA1          equ	4011	;# 
  1317   000FAC                     TXSTA           equ	4012	;# 
  1318   000FAC                     TXSTA1          equ	4012	;# 
  1319   000FAD                     TXREG           equ	4013	;# 
  1320   000FAD                     TXREG1          equ	4013	;# 
  1321   000FAE                     RCREG           equ	4014	;# 
  1322   000FAE                     RCREG1          equ	4014	;# 
  1323   000FAF                     SPBRG           equ	4015	;# 
  1324   000FAF                     SPBRG1          equ	4015	;# 
  1325   000FB0                     SPBRGH          equ	4016	;# 
  1326   000FB1                     T3CON           equ	4017	;# 
  1327   000FB2                     TMR3            equ	4018	;# 
  1328   000FB2                     TMR3L           equ	4018	;# 
  1329   000FB3                     TMR3H           equ	4019	;# 
  1330   000FB4                     CMCON           equ	4020	;# 
  1331   000FB5                     CVRCON          equ	4021	;# 
  1332   000FB6                     ECCP1AS         equ	4022	;# 
  1333   000FB7                     ECCP1DEL        equ	4023	;# 
  1334   000FB7                     PWM1CON         equ	4023	;# 
  1335   000FB8                     BAUDCON         equ	4024	;# 
  1336   000FB8                     BAUDCTL         equ	4024	;# 
  1337   000FBA                     CCP2CON         equ	4026	;# 
  1338   000FBB                     CCPR2           equ	4027	;# 
  1339   000FBB                     CCPR2L          equ	4027	;# 
  1340   000FBC                     CCPR2H          equ	4028	;# 
  1341   000FBD                     CCP1CON         equ	4029	;# 
  1342   000FBD                     ECCP1CON        equ	4029	;# 
  1343   000FBE                     CCPR1           equ	4030	;# 
  1344   000FBE                     CCPR1L          equ	4030	;# 
  1345   000FBF                     CCPR1H          equ	4031	;# 
  1346   000FC0                     ADCON2          equ	4032	;# 
  1347   000FC1                     ADCON1          equ	4033	;# 
  1348   000FC2                     ADCON0          equ	4034	;# 
  1349   000FC3                     ADRES           equ	4035	;# 
  1350   000FC3                     ADRESL          equ	4035	;# 
  1351   000FC4                     ADRESH          equ	4036	;# 
  1352   000FC5                     SSPCON2         equ	4037	;# 
  1353   000FC6                     SSPCON1         equ	4038	;# 
  1354   000FC7                     SSPSTAT         equ	4039	;# 
  1355   000FC8                     SSPADD          equ	4040	;# 
  1356   000FC9                     SSPBUF          equ	4041	;# 
  1357   000FCA                     T2CON           equ	4042	;# 
  1358   000FCB                     PR2             equ	4043	;# 
  1359   000FCB                     MEMCON          equ	4043	;# 
  1360   000FCC                     TMR2            equ	4044	;# 
  1361   000FCD                     T1CON           equ	4045	;# 
  1362   000FCE                     TMR1            equ	4046	;# 
  1363   000FCE                     TMR1L           equ	4046	;# 
  1364   000FCF                     TMR1H           equ	4047	;# 
  1365   000FD0                     RCON            equ	4048	;# 
  1366   000FD1                     WDTCON          equ	4049	;# 
  1367   000FD2                     HLVDCON         equ	4050	;# 
  1368   000FD2                     LVDCON          equ	4050	;# 
  1369   000FD3                     OSCCON          equ	4051	;# 
  1370   000FD5                     T0CON           equ	4053	;# 
  1371   000FD6                     TMR0            equ	4054	;# 
  1372   000FD6                     TMR0L           equ	4054	;# 
  1373   000FD7                     TMR0H           equ	4055	;# 
  1374   000FD8                     STATUS          equ	4056	;# 
  1375   000FD9                     FSR2            equ	4057	;# 
  1376   000FD9                     FSR2L           equ	4057	;# 
  1377   000FDA                     FSR2H           equ	4058	;# 
  1378   000FDB                     PLUSW2          equ	4059	;# 
  1379   000FDC                     PREINC2         equ	4060	;# 
  1380   000FDD                     POSTDEC2        equ	4061	;# 
  1381   000FDE                     POSTINC2        equ	4062	;# 
  1382   000FDF                     INDF2           equ	4063	;# 
  1383   000FE0                     BSR             equ	4064	;# 
  1384   000FE1                     FSR1            equ	4065	;# 
  1385   000FE1                     FSR1L           equ	4065	;# 
  1386   000FE2                     FSR1H           equ	4066	;# 
  1387   000FE3                     PLUSW1          equ	4067	;# 
  1388   000FE4                     PREINC1         equ	4068	;# 
  1389   000FE5                     POSTDEC1        equ	4069	;# 
  1390   000FE6                     POSTINC1        equ	4070	;# 
  1391   000FE7                     INDF1           equ	4071	;# 
  1392   000FE8                     WREG            equ	4072	;# 
  1393   000FE9                     FSR0            equ	4073	;# 
  1394   000FE9                     FSR0L           equ	4073	;# 
  1395   000FEA                     FSR0H           equ	4074	;# 
  1396   000FEB                     PLUSW0          equ	4075	;# 
  1397   000FEC                     PREINC0         equ	4076	;# 
  1398   000FED                     POSTDEC0        equ	4077	;# 
  1399   000FEE                     POSTINC0        equ	4078	;# 
  1400   000FEF                     INDF0           equ	4079	;# 
  1401   000FF0                     INTCON3         equ	4080	;# 
  1402   000FF1                     INTCON2         equ	4081	;# 
  1403   000FF2                     INTCON          equ	4082	;# 
  1404   000FF3                     PROD            equ	4083	;# 
  1405   000FF3                     PRODL           equ	4083	;# 
  1406   000FF4                     PRODH           equ	4084	;# 
  1407   000FF5                     TABLAT          equ	4085	;# 
  1408   000FF6                     TBLPTR          equ	4086	;# 
  1409   000FF6                     TBLPTRL         equ	4086	;# 
  1410   000FF7                     TBLPTRH         equ	4087	;# 
  1411   000FF8                     TBLPTRU         equ	4088	;# 
  1412   000FF9                     PCLAT           equ	4089	;# 
  1413   000FF9                     PC              equ	4089	;# 
  1414   000FF9                     PCL             equ	4089	;# 
  1415   000FFA                     PCLATH          equ	4090	;# 
  1416   000FFB                     PCLATU          equ	4091	;# 
  1417   000FFC                     STKPTR          equ	4092	;# 
  1418   000FFD                     TOS             equ	4093	;# 
  1419   000FFD                     TOSL            equ	4093	;# 
  1420   000FFE                     TOSH            equ	4094	;# 
  1421   000FFF                     TOSU            equ	4095	;# 
  1422   000F80                     PORTA           equ	3968	;# 
  1423   000F81                     PORTB           equ	3969	;# 
  1424   000F82                     PORTC           equ	3970	;# 
  1425   000F83                     PORTD           equ	3971	;# 
  1426   000F84                     PORTE           equ	3972	;# 
  1427   000F89                     LATA            equ	3977	;# 
  1428   000F8A                     LATB            equ	3978	;# 
  1429   000F8B                     LATC            equ	3979	;# 
  1430   000F8C                     LATD            equ	3980	;# 
  1431   000F8D                     LATE            equ	3981	;# 
  1432   000F92                     TRISA           equ	3986	;# 
  1433   000F92                     DDRA            equ	3986	;# 
  1434   000F93                     TRISB           equ	3987	;# 
  1435   000F93                     DDRB            equ	3987	;# 
  1436   000F94                     TRISC           equ	3988	;# 
  1437   000F94                     DDRC            equ	3988	;# 
  1438   000F95                     TRISD           equ	3989	;# 
  1439   000F95                     DDRD            equ	3989	;# 
  1440   000F96                     TRISE           equ	3990	;# 
  1441   000F96                     DDRE            equ	3990	;# 
  1442   000F9B                     OSCTUNE         equ	3995	;# 
  1443   000F9D                     PIE1            equ	3997	;# 
  1444   000F9E                     PIR1            equ	3998	;# 
  1445   000F9F                     IPR1            equ	3999	;# 
  1446   000FA0                     PIE2            equ	4000	;# 
  1447   000FA1                     PIR2            equ	4001	;# 
  1448   000FA2                     IPR2            equ	4002	;# 
  1449   000FA6                     EECON1          equ	4006	;# 
  1450   000FA7                     EECON2          equ	4007	;# 
  1451   000FA8                     EEDATA          equ	4008	;# 
  1452   000FA9                     EEADR           equ	4009	;# 
  1453   000FAB                     RCSTA           equ	4011	;# 
  1454   000FAB                     RCSTA1          equ	4011	;# 
  1455   000FAC                     TXSTA           equ	4012	;# 
  1456   000FAC                     TXSTA1          equ	4012	;# 
  1457   000FAD                     TXREG           equ	4013	;# 
  1458   000FAD                     TXREG1          equ	4013	;# 
  1459   000FAE                     RCREG           equ	4014	;# 
  1460   000FAE                     RCREG1          equ	4014	;# 
  1461   000FAF                     SPBRG           equ	4015	;# 
  1462   000FAF                     SPBRG1          equ	4015	;# 
  1463   000FB0                     SPBRGH          equ	4016	;# 
  1464   000FB1                     T3CON           equ	4017	;# 
  1465   000FB2                     TMR3            equ	4018	;# 
  1466   000FB2                     TMR3L           equ	4018	;# 
  1467   000FB3                     TMR3H           equ	4019	;# 
  1468   000FB4                     CMCON           equ	4020	;# 
  1469   000FB5                     CVRCON          equ	4021	;# 
  1470   000FB6                     ECCP1AS         equ	4022	;# 
  1471   000FB7                     ECCP1DEL        equ	4023	;# 
  1472   000FB7                     PWM1CON         equ	4023	;# 
  1473   000FB8                     BAUDCON         equ	4024	;# 
  1474   000FB8                     BAUDCTL         equ	4024	;# 
  1475   000FBA                     CCP2CON         equ	4026	;# 
  1476   000FBB                     CCPR2           equ	4027	;# 
  1477   000FBB                     CCPR2L          equ	4027	;# 
  1478   000FBC                     CCPR2H          equ	4028	;# 
  1479   000FBD                     CCP1CON         equ	4029	;# 
  1480   000FBD                     ECCP1CON        equ	4029	;# 
  1481   000FBE                     CCPR1           equ	4030	;# 
  1482   000FBE                     CCPR1L          equ	4030	;# 
  1483   000FBF                     CCPR1H          equ	4031	;# 
  1484   000FC0                     ADCON2          equ	4032	;# 
  1485   000FC1                     ADCON1          equ	4033	;# 
  1486   000FC2                     ADCON0          equ	4034	;# 
  1487   000FC3                     ADRES           equ	4035	;# 
  1488   000FC3                     ADRESL          equ	4035	;# 
  1489   000FC4                     ADRESH          equ	4036	;# 
  1490   000FC5                     SSPCON2         equ	4037	;# 
  1491   000FC6                     SSPCON1         equ	4038	;# 
  1492   000FC7                     SSPSTAT         equ	4039	;# 
  1493   000FC8                     SSPADD          equ	4040	;# 
  1494   000FC9                     SSPBUF          equ	4041	;# 
  1495   000FCA                     T2CON           equ	4042	;# 
  1496   000FCB                     PR2             equ	4043	;# 
  1497   000FCB                     MEMCON          equ	4043	;# 
  1498   000FCC                     TMR2            equ	4044	;# 
  1499   000FCD                     T1CON           equ	4045	;# 
  1500   000FCE                     TMR1            equ	4046	;# 
  1501   000FCE                     TMR1L           equ	4046	;# 
  1502   000FCF                     TMR1H           equ	4047	;# 
  1503   000FD0                     RCON            equ	4048	;# 
  1504   000FD1                     WDTCON          equ	4049	;# 
  1505   000FD2                     HLVDCON         equ	4050	;# 
  1506   000FD2                     LVDCON          equ	4050	;# 
  1507   000FD3                     OSCCON          equ	4051	;# 
  1508   000FD5                     T0CON           equ	4053	;# 
  1509   000FD6                     TMR0            equ	4054	;# 
  1510   000FD6                     TMR0L           equ	4054	;# 
  1511   000FD7                     TMR0H           equ	4055	;# 
  1512   000FD8                     STATUS          equ	4056	;# 
  1513   000FD9                     FSR2            equ	4057	;# 
  1514   000FD9                     FSR2L           equ	4057	;# 
  1515   000FDA                     FSR2H           equ	4058	;# 
  1516   000FDB                     PLUSW2          equ	4059	;# 
  1517   000FDC                     PREINC2         equ	4060	;# 
  1518   000FDD                     POSTDEC2        equ	4061	;# 
  1519   000FDE                     POSTINC2        equ	4062	;# 
  1520   000FDF                     INDF2           equ	4063	;# 
  1521   000FE0                     BSR             equ	4064	;# 
  1522   000FE1                     FSR1            equ	4065	;# 
  1523   000FE1                     FSR1L           equ	4065	;# 
  1524   000FE2                     FSR1H           equ	4066	;# 
  1525   000FE3                     PLUSW1          equ	4067	;# 
  1526   000FE4                     PREINC1         equ	4068	;# 
  1527   000FE5                     POSTDEC1        equ	4069	;# 
  1528   000FE6                     POSTINC1        equ	4070	;# 
  1529   000FE7                     INDF1           equ	4071	;# 
  1530   000FE8                     WREG            equ	4072	;# 
  1531   000FE9                     FSR0            equ	4073	;# 
  1532   000FE9                     FSR0L           equ	4073	;# 
  1533   000FEA                     FSR0H           equ	4074	;# 
  1534   000FEB                     PLUSW0          equ	4075	;# 
  1535   000FEC                     PREINC0         equ	4076	;# 
  1536   000FED                     POSTDEC0        equ	4077	;# 
  1537   000FEE                     POSTINC0        equ	4078	;# 
  1538   000FEF                     INDF0           equ	4079	;# 
  1539   000FF0                     INTCON3         equ	4080	;# 
  1540   000FF1                     INTCON2         equ	4081	;# 
  1541   000FF2                     INTCON          equ	4082	;# 
  1542   000FF3                     PROD            equ	4083	;# 
  1543   000FF3                     PRODL           equ	4083	;# 
  1544   000FF4                     PRODH           equ	4084	;# 
  1545   000FF5                     TABLAT          equ	4085	;# 
  1546   000FF6                     TBLPTR          equ	4086	;# 
  1547   000FF6                     TBLPTRL         equ	4086	;# 
  1548   000FF7                     TBLPTRH         equ	4087	;# 
  1549   000FF8                     TBLPTRU         equ	4088	;# 
  1550   000FF9                     PCLAT           equ	4089	;# 
  1551   000FF9                     PC              equ	4089	;# 
  1552   000FF9                     PCL             equ	4089	;# 
  1553   000FFA                     PCLATH          equ	4090	;# 
  1554   000FFB                     PCLATU          equ	4091	;# 
  1555   000FFC                     STKPTR          equ	4092	;# 
  1556   000FFD                     TOS             equ	4093	;# 
  1557   000FFD                     TOSL            equ	4093	;# 
  1558   000FFE                     TOSH            equ	4094	;# 
  1559   000FFF                     TOSU            equ	4095	;# 
  1560   000F80                     PORTA           equ	3968	;# 
  1561   000F81                     PORTB           equ	3969	;# 
  1562   000F82                     PORTC           equ	3970	;# 
  1563   000F83                     PORTD           equ	3971	;# 
  1564   000F84                     PORTE           equ	3972	;# 
  1565   000F89                     LATA            equ	3977	;# 
  1566   000F8A                     LATB            equ	3978	;# 
  1567   000F8B                     LATC            equ	3979	;# 
  1568   000F8C                     LATD            equ	3980	;# 
  1569   000F8D                     LATE            equ	3981	;# 
  1570   000F92                     TRISA           equ	3986	;# 
  1571   000F92                     DDRA            equ	3986	;# 
  1572   000F93                     TRISB           equ	3987	;# 
  1573   000F93                     DDRB            equ	3987	;# 
  1574   000F94                     TRISC           equ	3988	;# 
  1575   000F94                     DDRC            equ	3988	;# 
  1576   000F95                     TRISD           equ	3989	;# 
  1577   000F95                     DDRD            equ	3989	;# 
  1578   000F96                     TRISE           equ	3990	;# 
  1579   000F96                     DDRE            equ	3990	;# 
  1580   000F9B                     OSCTUNE         equ	3995	;# 
  1581   000F9D                     PIE1            equ	3997	;# 
  1582   000F9E                     PIR1            equ	3998	;# 
  1583   000F9F                     IPR1            equ	3999	;# 
  1584   000FA0                     PIE2            equ	4000	;# 
  1585   000FA1                     PIR2            equ	4001	;# 
  1586   000FA2                     IPR2            equ	4002	;# 
  1587   000FA6                     EECON1          equ	4006	;# 
  1588   000FA7                     EECON2          equ	4007	;# 
  1589   000FA8                     EEDATA          equ	4008	;# 
  1590   000FA9                     EEADR           equ	4009	;# 
  1591   000FAB                     RCSTA           equ	4011	;# 
  1592   000FAB                     RCSTA1          equ	4011	;# 
  1593   000FAC                     TXSTA           equ	4012	;# 
  1594   000FAC                     TXSTA1          equ	4012	;# 
  1595   000FAD                     TXREG           equ	4013	;# 
  1596   000FAD                     TXREG1          equ	4013	;# 
  1597   000FAE                     RCREG           equ	4014	;# 
  1598   000FAE                     RCREG1          equ	4014	;# 
  1599   000FAF                     SPBRG           equ	4015	;# 
  1600   000FAF                     SPBRG1          equ	4015	;# 
  1601   000FB0                     SPBRGH          equ	4016	;# 
  1602   000FB1                     T3CON           equ	4017	;# 
  1603   000FB2                     TMR3            equ	4018	;# 
  1604   000FB2                     TMR3L           equ	4018	;# 
  1605   000FB3                     TMR3H           equ	4019	;# 
  1606   000FB4                     CMCON           equ	4020	;# 
  1607   000FB5                     CVRCON          equ	4021	;# 
  1608   000FB6                     ECCP1AS         equ	4022	;# 
  1609   000FB7                     ECCP1DEL        equ	4023	;# 
  1610   000FB7                     PWM1CON         equ	4023	;# 
  1611   000FB8                     BAUDCON         equ	4024	;# 
  1612   000FB8                     BAUDCTL         equ	4024	;# 
  1613   000FBA                     CCP2CON         equ	4026	;# 
  1614   000FBB                     CCPR2           equ	4027	;# 
  1615   000FBB                     CCPR2L          equ	4027	;# 
  1616   000FBC                     CCPR2H          equ	4028	;# 
  1617   000FBD                     CCP1CON         equ	4029	;# 
  1618   000FBD                     ECCP1CON        equ	4029	;# 
  1619   000FBE                     CCPR1           equ	4030	;# 
  1620   000FBE                     CCPR1L          equ	4030	;# 
  1621   000FBF                     CCPR1H          equ	4031	;# 
  1622   000FC0                     ADCON2          equ	4032	;# 
  1623   000FC1                     ADCON1          equ	4033	;# 
  1624   000FC2                     ADCON0          equ	4034	;# 
  1625   000FC3                     ADRES           equ	4035	;# 
  1626   000FC3                     ADRESL          equ	4035	;# 
  1627   000FC4                     ADRESH          equ	4036	;# 
  1628   000FC5                     SSPCON2         equ	4037	;# 
  1629   000FC6                     SSPCON1         equ	4038	;# 
  1630   000FC7                     SSPSTAT         equ	4039	;# 
  1631   000FC8                     SSPADD          equ	4040	;# 
  1632   000FC9                     SSPBUF          equ	4041	;# 
  1633   000FCA                     T2CON           equ	4042	;# 
  1634   000FCB                     PR2             equ	4043	;# 
  1635   000FCB                     MEMCON          equ	4043	;# 
  1636   000FCC                     TMR2            equ	4044	;# 
  1637   000FCD                     T1CON           equ	4045	;# 
  1638   000FCE                     TMR1            equ	4046	;# 
  1639   000FCE                     TMR1L           equ	4046	;# 
  1640   000FCF                     TMR1H           equ	4047	;# 
  1641   000FD0                     RCON            equ	4048	;# 
  1642   000FD1                     WDTCON          equ	4049	;# 
  1643   000FD2                     HLVDCON         equ	4050	;# 
  1644   000FD2                     LVDCON          equ	4050	;# 
  1645   000FD3                     OSCCON          equ	4051	;# 
  1646   000FD5                     T0CON           equ	4053	;# 
  1647   000FD6                     TMR0            equ	4054	;# 
  1648   000FD6                     TMR0L           equ	4054	;# 
  1649   000FD7                     TMR0H           equ	4055	;# 
  1650   000FD8                     STATUS          equ	4056	;# 
  1651   000FD9                     FSR2            equ	4057	;# 
  1652   000FD9                     FSR2L           equ	4057	;# 
  1653   000FDA                     FSR2H           equ	4058	;# 
  1654   000FDB                     PLUSW2          equ	4059	;# 
  1655   000FDC                     PREINC2         equ	4060	;# 
  1656   000FDD                     POSTDEC2        equ	4061	;# 
  1657   000FDE                     POSTINC2        equ	4062	;# 
  1658   000FDF                     INDF2           equ	4063	;# 
  1659   000FE0                     BSR             equ	4064	;# 
  1660   000FE1                     FSR1            equ	4065	;# 
  1661   000FE1                     FSR1L           equ	4065	;# 
  1662   000FE2                     FSR1H           equ	4066	;# 
  1663   000FE3                     PLUSW1          equ	4067	;# 
  1664   000FE4                     PREINC1         equ	4068	;# 
  1665   000FE5                     POSTDEC1        equ	4069	;# 
  1666   000FE6                     POSTINC1        equ	4070	;# 
  1667   000FE7                     INDF1           equ	4071	;# 
  1668   000FE8                     WREG            equ	4072	;# 
  1669   000FE9                     FSR0            equ	4073	;# 
  1670   000FE9                     FSR0L           equ	4073	;# 
  1671   000FEA                     FSR0H           equ	4074	;# 
  1672   000FEB                     PLUSW0          equ	4075	;# 
  1673   000FEC                     PREINC0         equ	4076	;# 
  1674   000FED                     POSTDEC0        equ	4077	;# 
  1675   000FEE                     POSTINC0        equ	4078	;# 
  1676   000FEF                     INDF0           equ	4079	;# 
  1677   000FF0                     INTCON3         equ	4080	;# 
  1678   000FF1                     INTCON2         equ	4081	;# 
  1679   000FF2                     INTCON          equ	4082	;# 
  1680   000FF3                     PROD            equ	4083	;# 
  1681   000FF3                     PRODL           equ	4083	;# 
  1682   000FF4                     PRODH           equ	4084	;# 
  1683   000FF5                     TABLAT          equ	4085	;# 
  1684   000FF6                     TBLPTR          equ	4086	;# 
  1685   000FF6                     TBLPTRL         equ	4086	;# 
  1686   000FF7                     TBLPTRH         equ	4087	;# 
  1687   000FF8                     TBLPTRU         equ	4088	;# 
  1688   000FF9                     PCLAT           equ	4089	;# 
  1689   000FF9                     PC              equ	4089	;# 
  1690   000FF9                     PCL             equ	4089	;# 
  1691   000FFA                     PCLATH          equ	4090	;# 
  1692   000FFB                     PCLATU          equ	4091	;# 
  1693   000FFC                     STKPTR          equ	4092	;# 
  1694   000FFD                     TOS             equ	4093	;# 
  1695   000FFD                     TOSL            equ	4093	;# 
  1696   000FFE                     TOSH            equ	4094	;# 
  1697   000FFF                     TOSU            equ	4095	;# 
  1698                           
  1699                           	psect	idataCOMRAM
  1700   001842                     __pidataCOMRAM:
  1701                           	callstack 0
  1702                           
  1703                           ;initializer for _previousButton
  1704   001842  01                 	db	1
  1705   007F92                     _TMR0IF         set	32658
  1706   000FD6                     _TMR0           set	4054
  1707   000FC0                     _ADCON2bits     set	4032
  1708   000F83                     _PORTD          set	3971
  1709   000F8A                     _LATBbits       set	3978
  1710   000F8C                     _LATD           set	3980
  1711   000F95                     _TRISD          set	3989
  1712   000F89                     _LATAbits       set	3977
  1713   000F92                     _TRISAbits      set	3986
  1714   000FA7                     _EECON2         set	4007
  1715   000FA6                     _EECON1bits     set	4006
  1716   000FA8                     _EEDATA         set	4008
  1717   000FA9                     _EEADR          set	4009
  1718   000FC4                     _ADRESH         set	4036
  1719   000FC2                     _ADCON0bits     set	4034
  1720   000F81                     _PORTBbits      set	3969
  1721   000FC1                     _ADCON1         set	4033
  1722   000FAE                     _RCREG          set	4014
  1723   000FAD                     _TXREG          set	4013
  1724   000FAB                     _RCSTAbits      set	4011
  1725   000FAC                     _TXSTAbits      set	4012
  1726   000FB8                     _BAUDCONbits    set	4024
  1727   000FB0                     _SPBRGH         set	4016
  1728   000FAF                     _SPBRG          set	4015
  1729   000FD5                     _T0CON          set	4053
  1730   000FC9                     _SSPBUF         set	4041
  1731   000F9D                     _PIE1bits       set	3997
  1732   000FC8                     _SSPADD         set	4040
  1733   000FC5                     _SSPCON2        set	4037
  1734   000FC6                     _SSPCON1        set	4038
  1735   000FC7                     _SSPSTAT        set	4039
  1736   000FC5                     _SSPCON2bits    set	4037
  1737   000F9E                     _PIR1bits       set	3998
  1738   000FC7                     _SSPSTATbits    set	4039
  1739   000FA1                     _PIR2bits       set	4001
  1740   000F8B                     _LATCbits       set	3979
  1741   000F94                     _TRISCbits      set	3988
  1742   000FF1                     _INTCON2bits    set	4081
  1743   000F93                     _TRISBbits      set	3987
  1744   000FD0                     _RCONbits       set	4048
  1745   000FF0                     _INTCON3bits    set	4080
  1746   000FF2                     _INTCONbits     set	4082
  1747                           
  1748                           	psect	smallconst
  1749   000200                     __psmallconst:
  1750                           	callstack 0
  1751   000200  00                 	db	0
  1752   000201                     STR_21:
  1753   000201  20                 	db	32
  1754   000202  2D                 	db	45
  1755   000203  20                 	db	32
  1756   000204  45                 	db	69	;'E'
  1757   000205  73                 	db	115	;'s'
  1758   000206  74                 	db	116	;'t'
  1759   000207  61                 	db	97	;'a'
  1760   000208  74                 	db	116	;'t'
  1761   000209  20                 	db	32
  1762   00020A  63                 	db	99	;'c'
  1763   00020B  72                 	db	114	;'r'
  1764   00020C  69                 	db	105	;'i'
  1765   00020D  74                 	db	116	;'t'
  1766   00020E  69                 	db	105	;'i'
  1767   00020F  63                 	db	99	;'c'
  1768   000210  20                 	db	32
  1769   000211  64                 	db	100	;'d'
  1770   000212  65                 	db	101	;'e'
  1771   000213  74                 	db	116	;'t'
  1772   000214  65                 	db	101	;'e'
  1773   000215  63                 	db	99	;'c'
  1774   000216  74                 	db	116	;'t'
  1775   000217  61                 	db	97	;'a'
  1776   000218  74                 	db	116	;'t'
  1777   000219  2E                 	db	46
  1778   00021A  0D                 	db	13
  1779   00021B  0A                 	db	10
  1780   00021C  00                 	db	0
  1781   00021D                     STR_2:
  1782   00021D  55                 	db	85	;'U'
  1783   00021E  50                 	db	80	;'P'
  1784   00021F  44                 	db	68	;'D'
  1785   000220  41                 	db	65	;'A'
  1786   000221  54                 	db	84	;'T'
  1787   000222  45                 	db	69	;'E'
  1788   000223  54                 	db	84	;'T'
  1789   000224  49                 	db	73	;'I'
  1790   000225  4D                 	db	77	;'M'
  1791   000226  45                 	db	69	;'E'
  1792   000227  3A                 	db	58	;':'
  1793   000228  00                 	db	0
  1794   000229                     STR_9:
  1795   000229  49                 	db	73	;'I'
  1796   00022A  4E                 	db	78	;'N'
  1797   00022B  49                 	db	73	;'I'
  1798   00022C  54                 	db	84	;'T'
  1799   00022D  49                 	db	73	;'I'
  1800   00022E  41                 	db	65	;'A'
  1801   00022F  4C                 	db	76	;'L'
  1802   000230  49                 	db	73	;'I'
  1803   000231  5A                 	db	90	;'Z'
  1804   000232  45                 	db	69	;'E'
  1805   000233  3A                 	db	58	;':'
  1806   000234  00                 	db	0
  1807   000235                     STR_23:
  1808   000235  44                 	db	68	;'D'
  1809   000236  41                 	db	65	;'A'
  1810   000237  54                 	db	84	;'T'
  1811   000238  41                 	db	65	;'A'
  1812   000239  47                 	db	71	;'G'
  1813   00023A  52                 	db	82	;'R'
  1814   00023B  41                 	db	65	;'A'
  1815   00023C  50                 	db	80	;'P'
  1816   00023D  48                 	db	72	;'H'
  1817   00023E  3A                 	db	58	;':'
  1818   00023F  00                 	db	0
  1819   000240                     STR_19:
  1820   000240  44                 	db	68	;'D'
  1821   000241  41                 	db	65	;'A'
  1822   000242  54                 	db	84	;'T'
  1823   000243  41                 	db	65	;'A'
  1824   000244  4C                 	db	76	;'L'
  1825   000245  4F                 	db	79	;'O'
  1826   000246  47                 	db	71	;'G'
  1827   000247  53                 	db	83	;'S'
  1828   000248  3A                 	db	58	;':'
  1829   000249  00                 	db	0
  1830   00024A                     STR_11:
  1831   00024A  53                 	db	83	;'S'
  1832   00024B  45                 	db	69	;'E'
  1833   00024C  54                 	db	84	;'T'
  1834   00024D  5F                 	db	95	;'_'
  1835   00024E  54                 	db	84	;'T'
  1836   00024F  49                 	db	73	;'I'
  1837   000250  4D                 	db	77	;'M'
  1838   000251  45                 	db	69	;'E'
  1839   000252  3A                 	db	58	;':'
  1840   000253  00                 	db	0
  1841   000254                     STR_15:
  1842   000254  47                 	db	71	;'G'
  1843   000255  45                 	db	69	;'E'
  1844   000256  54                 	db	84	;'T'
  1845   000257  5F                 	db	95	;'_'
  1846   000258  47                 	db	71	;'G'
  1847   000259  52                 	db	82	;'R'
  1848   00025A  41                 	db	65	;'A'
  1849   00025B  50                 	db	80	;'P'
  1850   00025C  48                 	db	72	;'H'
  1851   00025D  00                 	db	0
  1852   00025E                     STR_22:
  1853   00025E  46                 	db	70	;'F'
  1854   00025F  49                 	db	73	;'I'
  1855   000260  4E                 	db	78	;'N'
  1856   000261  49                 	db	73	;'I'
  1857   000262  53                 	db	83	;'S'
  1858   000263  48                 	db	72	;'H'
  1859   000264  0D                 	db	13
  1860   000265  0A                 	db	10
  1861   000266  00                 	db	0
  1862   000267                     STR_8:
  1863   000267  53                 	db	83	;'S'
  1864   000268  45                 	db	69	;'E'
  1865   000269  4C                 	db	76	;'L'
  1866   00026A  45                 	db	69	;'E'
  1867   00026B  43                 	db	67	;'C'
  1868   00026C  54                 	db	84	;'T'
  1869   00026D  0D                 	db	13
  1870   00026E  0A                 	db	10
  1871   00026F  00                 	db	0
  1872   000270                     STR_13:
  1873   000270  47                 	db	71	;'G'
  1874   000271  45                 	db	69	;'E'
  1875   000272  54                 	db	84	;'T'
  1876   000273  5F                 	db	95	;'_'
  1877   000274  4C                 	db	76	;'L'
  1878   000275  4F                 	db	79	;'O'
  1879   000276  47                 	db	71	;'G'
  1880   000277  53                 	db	83	;'S'
  1881   000278  00                 	db	0
  1882   000279                     STR_20:
  1883   000279  20                 	db	32
  1884   00027A  61                 	db	97	;'a'
  1885   00027B  20                 	db	32
  1886   00027C  6C                 	db	108	;'l'
  1887   00027D  65                 	db	101	;'e'
  1888   00027E  73                 	db	115	;'s'
  1889   00027F  20                 	db	32
  1890   000280  00                 	db	0
  1891   000281                     STR_7:
  1892   000281  52                 	db	82	;'R'
  1893   000282  49                 	db	73	;'I'
  1894   000283  47                 	db	71	;'G'
  1895   000284  48                 	db	72	;'H'
  1896   000285  54                 	db	84	;'T'
  1897   000286  0D                 	db	13
  1898   000287  0A                 	db	10
  1899   000288  00                 	db	0
  1900   000289                     STR_5:
  1901   000289  44                 	db	68	;'D'
  1902   00028A  4F                 	db	79	;'O'
  1903   00028B  57                 	db	87	;'W'
  1904   00028C  4E                 	db	78	;'N'
  1905   00028D  0D                 	db	13
  1906   00028E  0A                 	db	10
  1907   00028F  00                 	db	0
  1908   000290                     STR_6:
  1909   000290  4C                 	db	76	;'L'
  1910   000291  45                 	db	69	;'E'
  1911   000292  46                 	db	70	;'F'
  1912   000293  54                 	db	84	;'T'
  1913   000294  0D                 	db	13
  1914   000295  0A                 	db	10
  1915   000296  00                 	db	0
  1916   000297                     STR_17:
  1917   000297  52                 	db	82	;'R'
  1918   000298  45                 	db	69	;'E'
  1919   000299  53                 	db	83	;'S'
  1920   00029A  45                 	db	69	;'E'
  1921   00029B  54                 	db	84	;'T'
  1922   00029C  00                 	db	0
  1923   00029D                     STR_4:
  1924   00029D  55                 	db	85	;'U'
  1925   00029E  50                 	db	80	;'P'
  1926   00029F  0D                 	db	13
  1927   0002A0  0A                 	db	10
  1928   0002A1  00                 	db	0
  1929   000297                     STR_18          equ	STR_17
  1930   000270                     STR_14          equ	STR_13
  1931   000254                     STR_16          equ	STR_15
  1932   000229                     STR_10          equ	STR_9
  1933   00024A                     STR_12          equ	STR_11
  1934   00025E                     STR_25          equ	STR_22
  1935   00021A                     STR_1           equ	STR_21+25
  1936   00021A                     STR_3           equ	STR_21+25
  1937   00021A                     STR_24          equ	STR_21+25
  1938   0002A2  00                 	db	0	; dummy byte at the end
  1939   000200                     __smallconst    set	__psmallconst
  1940   000200                     __mediumconst   set	__psmallconst
  1941   000002                     __activetblptr  equ	2
  1942                           
  1943                           ; #config settings
  1944                           
  1945                           	psect	cinit
  1946   00115A                     __pcinit:
  1947                           	callstack 0
  1948   00115A                     start_initialization:
  1949                           	callstack 0
  1950   00115A                     __initialization:
  1951                           	callstack 0
  1952                           
  1953                           ; Initialize objects allocated to COMRAM (1 bytes)
  1954                           ; load TBLPTR registers with __pidataCOMRAM
  1955   00115A  0E42               	movlw	low __pidataCOMRAM
  1956   00115C  6EF6               	movwf	tblptrl,c
  1957   00115E  0E18               	movlw	high __pidataCOMRAM
  1958   001160  6EF7               	movwf	tblptrh,c
  1959   001162  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1960   001164  6EF8               	movwf	tblptru,c
  1961   001166  0009               	tblrd		*+	;fetch initializer
  1962   001168  CFF5 F073          	movff	tablat,__pdataCOMRAM
  1963                           
  1964                           ; Clear objects allocated to BANK0 (103 bytes)
  1965   00116C  EE00  F080         	lfsr	0,__pbssBANK0
  1966   001170  0E67               	movlw	103
  1967   001172                     clear_0:
  1968   001172  6AEE               	clrf	postinc0,c
  1969   001174  06E8               	decf	wreg,f,c
  1970   001176  E1FD               	bnz	clear_0
  1971                           
  1972                           ; Clear objects allocated to COMRAM (91 bytes)
  1973   001178  EE00  F001         	lfsr	0,__pbssCOMRAM
  1974   00117C  0E5B               	movlw	91
  1975   00117E                     clear_1:
  1976   00117E  6AEE               	clrf	postinc0,c
  1977   001180  06E8               	decf	wreg,f,c
  1978   001182  E1FD               	bnz	clear_1
  1979   001184                     end_of_initialization:
  1980                           	callstack 0
  1981   001184                     __end_of__initialization:
  1982                           	callstack 0
  1983   001184  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1984   001186  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1985   001188  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1986   00118A  6EF8               	movwf	tblptru,c
  1987   00118C  0100               	movlb	0
  1988   00118E  EF22  F006         	goto	_main	;jump to C main() function
  1989                           
  1990                           	psect	bssCOMRAM
  1991   000001                     __pbssCOMRAM:
  1992                           	callstack 0
  1993   000001                     _log:
  1994                           	callstack 0
  1995   000001                     	ds	15
  1996   000010                     _Tics:
  1997                           	callstack 0
  1998   000010                     	ds	4
  1999   000014                     _joystick:
  2000                           	callstack 0
  2001   000014                     	ds	2
  2002   000016                     _ramAddrBackup:
  2003                           	callstack 0
  2004   000016                     	ds	2
  2005   000018                     _ramReadIndex:
  2006                           	callstack 0
  2007   000018                     	ds	2
  2008   00001A                     _posAddrRAM:
  2009                           	callstack 0
  2010   00001A                     	ds	2
  2011   00001C                     JOY_Motor@canal:
  2012                           	callstack 0
  2013   00001C                     	ds	1
  2014   00001D                     JOY_Motor@state:
  2015                           	callstack 0
  2016   00001D                     	ds	1
  2017   00001E                     _canalActual:
  2018                           	callstack 0
  2019   00001E                     	ds	1
  2020   00001F                     _enable:
  2021                           	callstack 0
  2022   00001F                     	ds	1
  2023   000020                     _indexJoystick:
  2024                           	callstack 0
  2025   000020                     	ds	1
  2026   000021                     	ds	1
  2027   000022                     RTC_Motor@state:
  2028                           	callstack 0
  2029   000022                     	ds	1
  2030   000023                     _rtc_yy:
  2031                           	callstack 0
  2032   000023                     	ds	1
  2033   000024                     _rtc_mo:
  2034                           	callstack 0
  2035   000024                     	ds	1
  2036   000025                     _rtc_dd:
  2037                           	callstack 0
  2038   000025                     	ds	1
  2039   000026                     _rtc_ss:
  2040                           	callstack 0
  2041   000026                     	ds	1
  2042   000027                     _rtc_mm:
  2043                           	callstack 0
  2044   000027                     	ds	1
  2045   000028                     _rtc_hh:
  2046                           	callstack 0
  2047   000028                     	ds	1
  2048   000029                     _pendingRTC:
  2049                           	callstack 0
  2050   000029                     	ds	1
  2051   00002A                     _pendingReadRequest@TAD_RAM$F1961:
  2052                           	callstack 0
  2053   00002A                     	ds	1
  2054   00002B                     _ramReadState:
  2055                           	callstack 0
  2056   00002B                     	ds	1
  2057   00002C                     RGB_Motor@state:
  2058                           	callstack 0
  2059   00002C                     	ds	1
  2060   00002D                     _estatCritic:
  2061                           	callstack 0
  2062   00002D                     	ds	1
  2063   00002E                     _blue:
  2064                           	callstack 0
  2065   00002E                     	ds	1
  2066   00002F                     _green:
  2067                           	callstack 0
  2068   00002F                     	ds	1
  2069   000030                     _red:
  2070                           	callstack 0
  2071   000030                     	ds	1
  2072   000031                     FAN_Motor@state:
  2073                           	callstack 0
  2074   000031                     	ds	1
  2075   000032                     _counterFan1:
  2076                           	callstack 0
  2077   000032                     	ds	1
  2078   000033                     _counterFan0:
  2079                           	callstack 0
  2080   000033                     	ds	1
  2081   000034                     _dutyFan1:
  2082                           	callstack 0
  2083   000034                     	ds	1
  2084   000035                     _dutyFan0:
  2085                           	callstack 0
  2086   000035                     	ds	1
  2087   000036                     EEPROM_Motor@sendIndex:
  2088                           	callstack 0
  2089   000036                     	ds	1
  2090   000037                     EEPROM_Motor@baseAddr:
  2091                           	callstack 0
  2092   000037                     	ds	1
  2093   000038                     EEPROM_Motor@eepromSubState:
  2094                           	callstack 0
  2095   000038                     	ds	1
  2096   000039                     EEPROM_Motor@estatGlobal:
  2097                           	callstack 0
  2098   000039                     	ds	1
  2099   00003A                     _estatDesar:
  2100                           	callstack 0
  2101   00003A                     	ds	1
  2102   00003B                     _desantLog:
  2103                           	callstack 0
  2104   00003B                     	ds	1
  2105   00003C                     _idxChar:
  2106                           	callstack 0
  2107   00003C                     	ds	1
  2108   00003D                     _idxDesplac:
  2109                           	callstack 0
  2110   00003D                     	ds	1
  2111   00003E                     _idxLog:
  2112                           	callstack 0
  2113   00003E                     	ds	1
  2114   00003F                     _pendingReadRequest:
  2115                           	callstack 0
  2116   00003F                     	ds	1
  2117   000040                     _jLog:
  2118                           	callstack 0
  2119   000040                     	ds	1
  2120   000041                     _iLog:
  2121                           	callstack 0
  2122   000041                     	ds	1
  2123   000042                     _totalLogs:
  2124                           	callstack 0
  2125   000042                     	ds	1
  2126   000043                     SIS_ControlTemperatura@estat_anterior:
  2127                           	callstack 0
  2128   000043                     	ds	1
  2129   000044                     SIS_ControlTemperatura@temperatura:
  2130                           	callstack 0
  2131   000044                     	ds	1
  2132   000045                     SIS_ControlTemperatura@state:
  2133                           	callstack 0
  2134   000045                     	ds	1
  2135   000046                     SIS_MovementMotor@state:
  2136                           	callstack 0
  2137   000046                     	ds	1
  2138   000047                     SIS_Motor@i:
  2139                           	callstack 0
  2140   000047                     	ds	1
  2141   000048                     SIS_Motor@state:
  2142                           	callstack 0
  2143   000048                     	ds	1
  2144   000049                     _flag_rtc:
  2145                           	callstack 0
  2146   000049                     	ds	1
  2147   00004A                     _llindarCritical:
  2148                           	callstack 0
  2149   00004A                     	ds	1
  2150   00004B                     _llindarHigh:
  2151                           	callstack 0
  2152   00004B                     	ds	1
  2153   00004C                     _llindarModerate:
  2154                           	callstack 0
  2155   00004C                     	ds	1
  2156   00004D                     _llindarLow:
  2157                           	callstack 0
  2158   00004D                     	ds	1
  2159   00004E                     _tempsMostreig:
  2160                           	callstack 0
  2161   00004E                     	ds	1
  2162   00004F                     	ds	1
  2163   000050                     _systemInitialized:
  2164                           	callstack 0
  2165   000050                     	ds	1
  2166   000051                     _timerRGB:
  2167                           	callstack 0
  2168   000051                     	ds	1
  2169   000052                     _timerFan:
  2170                           	callstack 0
  2171   000052                     	ds	1
  2172   000053                     _timerTemperatura:
  2173                           	callstack 0
  2174   000053                     	ds	1
  2175   000054                     _segons:
  2176                           	callstack 0
  2177   000054                     	ds	1
  2178   000055                     _minuts:
  2179                           	callstack 0
  2180   000055                     	ds	1
  2181   000056                     _hora:
  2182                           	callstack 0
  2183   000056                     	ds	1
  2184   000057                     _dia:
  2185                           	callstack 0
  2186   000057                     	ds	1
  2187   000058                     _mes:
  2188                           	callstack 0
  2189   000058                     	ds	1
  2190   000059                     _any:
  2191                           	callstack 0
  2192   000059                     	ds	1
  2193   00005A                     _received:
  2194                           	callstack 0
  2195   00005A                     	ds	1
  2196   00005B                     _timerRebots:
  2197                           	callstack 0
  2198   00005B                     	ds	1
  2199                           
  2200                           	psect	dataCOMRAM
  2201   000073                     __pdataCOMRAM:
  2202                           	callstack 0
  2203   000073                     _previousButton:
  2204                           	callstack 0
  2205   000073                     	ds	1
  2206                           
  2207                           	psect	bssBANK0
  2208   000080                     __pbssBANK0:
  2209                           	callstack 0
  2210   000080                     _Timers:
  2211                           	callstack 0
  2212   000080                     	ds	25
  2213   000099                     _logPend:
  2214                           	callstack 0
  2215   000099                     	ds	14
  2216   0000A7                     _rxBuffer:
  2217                           	callstack 0
  2218   0000A7                     	ds	64
  2219                           
  2220                           	psect	cstackBANK0
  2221   0000E7                     __pcstackBANK0:
  2222                           	callstack 0
  2223   0000E7                     EEPROM_DemanaDesarLog@mm:
  2224                           	callstack 0
  2225   0000E7                     RTC_SetTime@mm:
  2226                           	callstack 0
  2227   0000E7                     RTC_SetDate@mo:
  2228                           	callstack 0
  2229   0000E7                     TI_GetTics@CopiaTicsActual:
  2230                           	callstack 0
  2231                           
  2232                           ; 4 bytes @ 0x0
  2233   0000E7                     	ds	1
  2234   0000E8                     EEPROM_DemanaDesarLog@ss:
  2235                           	callstack 0
  2236   0000E8                     RTC_SetTime@ss:
  2237                           	callstack 0
  2238   0000E8                     RTC_SetDate@yy:
  2239                           	callstack 0
  2240                           
  2241                           ; 1 bytes @ 0x1
  2242   0000E8                     	ds	1
  2243   0000E9                     parsejaInitialize@comanda:
  2244                           	callstack 0
  2245   0000E9                     parsejaSetTime@comanda:
  2246                           	callstack 0
  2247   0000E9                     EEPROM_DemanaDesarLog@dd:
  2248                           	callstack 0
  2249                           
  2250                           ; 1 bytes @ 0x2
  2251   0000E9                     	ds	1
  2252   0000EA                     EEPROM_DemanaDesarLog@mo:
  2253                           	callstack 0
  2254   0000EA                     ??_parsejaInitialize:
  2255   0000EA                     ??_parsejaSetTime:
  2256                           
  2257                           ; 1 bytes @ 0x3
  2258   0000EA                     	ds	1
  2259   0000EB                     TI_GetTics@TimerHandle:
  2260                           	callstack 0
  2261   0000EB                     parsejaInitialize@i:
  2262                           	callstack 0
  2263   0000EB                     parsejaSetTime@i:
  2264                           	callstack 0
  2265   0000EB                     EEPROM_DemanaDesarLog@yyyy:
  2266                           	callstack 0
  2267                           
  2268                           ; 1 bytes @ 0x4
  2269   0000EB                     	ds	1
  2270   0000EC                     processaComanda@comanda:
  2271                           	callstack 0
  2272   0000EC                     ??_SIS_ControlTemperatura:
  2273                           
  2274                           ; 1 bytes @ 0x5
  2275   0000EC                     	ds	8
  2276   0000F4                     ??_main:
  2277                           
  2278                           ; 1 bytes @ 0xD
  2279   0000F4                     	ds	1
  2280                           
  2281                           	psect	cstackCOMRAM
  2282   00005C                     __pcstackCOMRAM:
  2283                           	callstack 0
  2284   00005C                     ?i2___awmod:
  2285                           	callstack 0
  2286   00005C                     RTC_DemanaTime@hh:
  2287                           	callstack 0
  2288   00005C                     i2SIO_Send@character:
  2289                           	callstack 0
  2290   00005C                     i2SIO_SendBlocking@character:
  2291                           	callstack 0
  2292   00005C                     i2___lbdiv@divisor:
  2293                           	callstack 0
  2294   00005C                     i2___lbmod@divisor:
  2295                           	callstack 0
  2296   00005C                     i2___awmod@dividend:
  2297                           	callstack 0
  2298   00005C                     
  2299                           ; 1 bytes @ 0x0
  2300   00005C                     	ds	1
  2301   00005D                     RTC_DemanaTime@mm:
  2302                           	callstack 0
  2303   00005D                     i2SIO_SendString@str:
  2304                           	callstack 0
  2305   00005D                     i2___lbdiv@dividend:
  2306                           	callstack 0
  2307   00005D                     i2___lbmod@dividend:
  2308                           	callstack 0
  2309   00005D                     
  2310                           ; 1 bytes @ 0x1
  2311   00005D                     	ds	1
  2312   00005E                     RTC_DemanaTime@ss:
  2313                           	callstack 0
  2314   00005E                     i2___lbdiv@counter:
  2315                           	callstack 0
  2316   00005E                     i2___lbmod@counter:
  2317                           	callstack 0
  2318   00005E                     i2___awmod@divisor:
  2319                           	callstack 0
  2320   00005E                     
  2321                           ; 1 bytes @ 0x2
  2322   00005E                     	ds	1
  2323   00005F                     RTC_DemanaTime@dd:
  2324                           	callstack 0
  2325   00005F                     i2___lbdiv@quotient:
  2326                           	callstack 0
  2327   00005F                     i2___lbmod@rem:
  2328                           	callstack 0
  2329                           
  2330                           ; 1 bytes @ 0x3
  2331   00005F                     	ds	1
  2332   000060                     RTC_DemanaTime@mo:
  2333                           	callstack 0
  2334   000060                     i2___awmod@counter:
  2335                           	callstack 0
  2336   000060                     
  2337                           ; 1 bytes @ 0x4
  2338   000060                     	ds	1
  2339   000061                     RTC_DemanaTime@yy:
  2340                           	callstack 0
  2341   000061                     i2___awmod@sign:
  2342                           	callstack 0
  2343                           
  2344                           ; 1 bytes @ 0x5
  2345   000061                     	ds	1
  2346   000062                     i2SIO_SendDecimal@num:
  2347                           	callstack 0
  2348   000062                     
  2349                           ; 1 bytes @ 0x6
  2350   000062                     	ds	1
  2351   000063                     ??_RSI_High:
  2352                           
  2353                           ; 1 bytes @ 0x7
  2354   000063                     	ds	4
  2355   000067                     ?___awmod:
  2356                           	callstack 0
  2357   000067                     ?_TI_GetTics:
  2358                           	callstack 0
  2359   000067                     I2C_Write@data:
  2360                           	callstack 0
  2361   000067                     I2C_Read@flag:
  2362                           	callstack 0
  2363   000067                     TI_Init@counter:
  2364                           	callstack 0
  2365   000067                     TI_NewTimer@TimerHandle:
  2366                           	callstack 0
  2367   000067                     TI_ResetTics@TimerHandle:
  2368                           	callstack 0
  2369   000067                     SIO_Send@character:
  2370                           	callstack 0
  2371   000067                     SIO_Receive@character:
  2372                           	callstack 0
  2373   000067                     SIO_SendBuffer@buffer:
  2374                           	callstack 0
  2375   000067                     SIO_SendBlocking@character:
  2376                           	callstack 0
  2377   000067                     iniciaAmb@entrada:
  2378                           	callstack 0
  2379   000067                     obtenirNumero@buf:
  2380                           	callstack 0
  2381   000067                     readByte@addr:
  2382                           	callstack 0
  2383   000067                     FAN_SetDutyFan0@duty:
  2384                           	callstack 0
  2385   000067                     FAN_SetDutyFan1@duty:
  2386                           	callstack 0
  2387   000067                     RGB_SetColor@g:
  2388                           	callstack 0
  2389   000067                     delay_us@us:
  2390                           	callstack 0
  2391   000067                     ___lbdiv@divisor:
  2392                           	callstack 0
  2393   000067                     ___awmod@dividend:
  2394                           	callstack 0
  2395   000067                     ??_bcdToDec:
  2396                           
  2397                           ; 1 bytes @ 0xB
  2398   000067                     	ds	1
  2399   000068                     StartI2C@slave_rw_addr:
  2400                           	callstack 0
  2401   000068                     ReStartI2C_@slave_rw_addr:
  2402                           	callstack 0
  2403   000068                     I2C_Read@buffer:
  2404                           	callstack 0
  2405   000068                     SIO_SendString@str:
  2406                           	callstack 0
  2407   000068                     SIO_SendBuffer@length:
  2408                           	callstack 0
  2409   000068                     iniciaAmb@prefix:
  2410                           	callstack 0
  2411   000068                     obtenirNumero@idx:
  2412                           	callstack 0
  2413   000068                     writeByte@data:
  2414                           	callstack 0
  2415   000068                     RGB_SetColor@b:
  2416                           	callstack 0
  2417   000068                     RAM_Write@v:
  2418                           	callstack 0
  2419   000068                     RAM_Read@r:
  2420                           	callstack 0
  2421   000068                     bcdToDec@val:
  2422                           	callstack 0
  2423   000068                     ___lbdiv@dividend:
  2424                           	callstack 0
  2425   000068                     
  2426                           ; 1 bytes @ 0xC
  2427   000068                     	ds	1
  2428   000069                     TI_NewTimer@Comptador:
  2429                           	callstack 0
  2430   000069                     writeByte@addr:
  2431                           	callstack 0
  2432   000069                     RGB_SetColor@r:
  2433                           	callstack 0
  2434   000069                     RAM_DemanaDesar@temperatura:
  2435                           	callstack 0
  2436   000069                     ___lbdiv@counter:
  2437                           	callstack 0
  2438   000069                     RAM_DemanaEsborrar@i:
  2439                           	callstack 0
  2440   000069                     ___awmod@divisor:
  2441                           	callstack 0
  2442   000069                     ??_SIO_SendBuffer:
  2443   000069                     ??_iniciaAmb:
  2444   000069                     ??_obtenirNumero:
  2445                           
  2446                           ; 1 bytes @ 0xD
  2447   000069                     	ds	1
  2448   00006A                     SIO_SendBuffer@i:
  2449                           	callstack 0
  2450   00006A                     EEPROM_DemanaEsborrarLogs@addr:
  2451                           	callstack 0
  2452   00006A                     EEPROM_Motor@from:
  2453                           	callstack 0
  2454   00006A                     ___lbdiv@quotient:
  2455                           	callstack 0
  2456   00006A                     
  2457                           ; 1 bytes @ 0xE
  2458   00006A                     	ds	1
  2459   00006B                     obtenirNumero@val:
  2460                           	callstack 0
  2461   00006B                     EEPROM_Motor@to:
  2462                           	callstack 0
  2463   00006B                     ___awmod@counter:
  2464                           	callstack 0
  2465   00006B                     ___lbmod@divisor:
  2466                           	callstack 0
  2467   00006B                     iniciaAmb@i:
  2468                           	callstack 0
  2469   00006B                     ??_TI_GetTics:
  2470   00006B                     
  2471                           ; 1 bytes @ 0xF
  2472   00006B                     	ds	1
  2473   00006C                     EEPROM_Motor@addr:
  2474                           	callstack 0
  2475   00006C                     ___awmod@sign:
  2476                           	callstack 0
  2477   00006C                     ___lbmod@dividend:
  2478                           	callstack 0
  2479   00006C                     
  2480                           ; 1 bytes @ 0x10
  2481   00006C                     	ds	1
  2482   00006D                     identificaComanda@comanda:
  2483                           	callstack 0
  2484   00006D                     ___lbmod@counter:
  2485                           	callstack 0
  2486                           
  2487                           ; 1 bytes @ 0x11
  2488   00006D                     	ds	1
  2489   00006E                     ___lbmod@rem:
  2490                           	callstack 0
  2491   00006E                     
  2492                           ; 1 bytes @ 0x12
  2493   00006E                     	ds	1
  2494   00006F                     SIO_SendDecimal@num:
  2495                           	callstack 0
  2496   00006F                     EEPROM_DemanaDesarLog@hh:
  2497                           	callstack 0
  2498   00006F                     ??_decToBcd:
  2499                           
  2500                           ; 1 bytes @ 0x13
  2501   00006F                     	ds	1
  2502   000070                     RAM_Motor@v:
  2503                           	callstack 0
  2504   000070                     
  2505                           ; 1 bytes @ 0x14
  2506   000070                     	ds	1
  2507   000071                     decToBcd@val:
  2508                           	callstack 0
  2509   000071                     RAM_Motor@i:
  2510                           	callstack 0
  2511                           
  2512                           ; 2 bytes @ 0x15
  2513   000071                     	ds	1
  2514   000072                     RTC_SetTime@hh:
  2515                           	callstack 0
  2516   000072                     RTC_SetDate@dd:
  2517                           	callstack 0
  2518   000072                     
  2519                           ; 1 bytes @ 0x16
  2520   000072                     	ds	1
  2521   000073                     
  2522                           ; 1 bytes @ 0x17
  2523 ;;
  2524 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2525 ;;
  2526 ;; *************** function _main *****************
  2527 ;; Defined at:
  2528 ;;		line 90 in file "main.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1
  2542 ;;      Params:         0       0       0
  2543 ;;      Locals:         0       0       0
  2544 ;;      Temps:          0       1       0
  2545 ;;      Totals:         0       1       0
  2546 ;;Total ram usage:        1 bytes
  2547 ;; Hardware stack levels required when called: 11
  2548 ;; This function calls:
  2549 ;;		_EEPROM_Init
  2550 ;;		_EEPROM_Motor
  2551 ;;		_FAN_Init
  2552 ;;		_FAN_Motor
  2553 ;;		_INT_Init
  2554 ;;		_JOY_Init
  2555 ;;		_JOY_Motor
  2556 ;;		_RAM_Init
  2557 ;;		_RAM_Motor
  2558 ;;		_RGB_Init
  2559 ;;		_RGB_Motor
  2560 ;;		_RTC_Init
  2561 ;;		_RTC_Motor
  2562 ;;		_SIO_Init
  2563 ;;		_SIS_ControlTemperatura
  2564 ;;		_SIS_Init
  2565 ;;		_SIS_Motor
  2566 ;;		_SIS_MovementMotor
  2567 ;;		_TI_Init
  2568 ;; This function is called by:
  2569 ;;		Startup code after reset
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text0
  2574   000C44                     __ptext0:
  2575                           	callstack 0
  2576   000C44                     _main:
  2577                           	callstack 20
  2578                           
  2579                           ;main.c: 92:     INT_Init();
  2580                           
  2581                           ;incstack = 0
  2582   000C44  ECD5  F00B         	call	_INT_Init	;wreg free
  2583                           
  2584                           ;main.c: 93:     TI_Init();
  2585   000C48  ECA6  F009         	call	_TI_Init	;wreg free
  2586                           
  2587                           ;main.c: 94:     SIO_Init();
  2588   000C4C  EC19  F00B         	call	_SIO_Init	;wreg free
  2589                           
  2590                           ;main.c: 95:     SIS_Init();
  2591   000C50  EC37  F009         	call	_SIS_Init	;wreg free
  2592                           
  2593                           ;main.c: 96:     JOY_Init();
  2594   000C54  ECCF  F00A         	call	_JOY_Init	;wreg free
  2595                           
  2596                           ;main.c: 97:     EEPROM_Init();
  2597   000C58  ECBB  F00B         	call	_EEPROM_Init	;wreg free
  2598                           
  2599                           ;main.c: 98:     FAN_Init();
  2600   000C5C  EC3D  F00B         	call	_FAN_Init	;wreg free
  2601                           
  2602                           ;main.c: 99:     RGB_Init();
  2603   000C60  ECFD  F00A         	call	_RGB_Init	;wreg free
  2604                           
  2605                           ;main.c: 100:     RAM_Init();
  2606   000C64  ECBB  F009         	call	_RAM_Init	;wreg free
  2607                           
  2608                           ;main.c: 101:     RTC_Init();
  2609   000C68  EC05  F00C         	call	_RTC_Init	;wreg free
  2610                           
  2611                           ;main.c: 103:     TRISCbits.TRISC2 = 0;
  2612   000C6C  9494               	bcf	148,2,c	;volatile
  2613                           
  2614                           ;main.c: 104:     LATCbits.LATC2 = 0;
  2615   000C6E  948B               	bcf	139,2,c	;volatile
  2616   000C70                     l4756:
  2617                           
  2618                           ;main.c: 106:         LATCbits.LATC2 = !LATCbits.LATC2;
  2619   000C70  B48B               	btfsc	139,2,c	;volatile
  2620   000C72  D004               	goto	u3190
  2621   000C74  0100               	movlb	0	; () banked
  2622   000C76  6BF4               	clrf	??_main& (0+255),b
  2623   000C78  2BF4               	incf	??_main& (0+255),f,b
  2624   000C7A  D002               	goto	u3208
  2625   000C7C                     u3190:
  2626   000C7C  0100               	movlb	0	; () banked
  2627   000C7E  6BF4               	clrf	??_main& (0+255),b
  2628   000C80                     u3208:
  2629   000C80  47F4               	rlncf	??_main& (0+255),f,b
  2630   000C82  47F4               	rlncf	??_main& (0+255),f,b
  2631   000C84  508B               	movf	139,w,c	;volatile
  2632   000C86  19F4               	xorwf	??_main& (0+255),w,b
  2633   000C88  0BFB               	andlw	-5
  2634   000C8A  19F4               	xorwf	??_main& (0+255),w,b
  2635   000C8C  6E8B               	movwf	139,c	;volatile
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 108:         SIS_Motor();
  2639   000C8E  ECFB  F006         	call	_SIS_Motor	;wreg free
  2640                           
  2641                           ;main.c: 109:         SIS_MovementMotor();
  2642   000C92  EC5C  F004         	call	_SIS_MovementMotor	;wreg free
  2643                           
  2644                           ;main.c: 110:         SIS_ControlTemperatura();
  2645   000C96  ECAE  F002         	call	_SIS_ControlTemperatura	;wreg free
  2646                           
  2647                           ;main.c: 111:         JOY_Motor();
  2648   000C9A  EC4E  F008         	call	_JOY_Motor	;wreg free
  2649                           
  2650                           ;main.c: 112:         FAN_Motor();
  2651   000C9E  EC58  F007         	call	_FAN_Motor	;wreg free
  2652                           
  2653                           ;main.c: 113:         RGB_Motor();
  2654   000CA2  ECA7  F005         	call	_RGB_Motor	;wreg free
  2655                           
  2656                           ;main.c: 114:         RAM_Motor();
  2657   000CA6  EC59  F005         	call	_RAM_Motor	;wreg free
  2658                           
  2659                           ;main.c: 115:         EEPROM_Motor();
  2660   000CAA  EC52  F001         	call	_EEPROM_Motor	;wreg free
  2661                           
  2662                           ;main.c: 116:         RTC_Motor();
  2663   000CAE  ECB4  F004         	call	_RTC_Motor	;wreg free
  2664   000CB2  D7DE               	goto	l4756
  2665   000CB4                     __end_of_main:
  2666                           	callstack 0
  2667                           
  2668 ;; *************** function _TI_Init *****************
  2669 ;; Defined at:
  2670 ;;		line 24 in file "TAD_TIMER.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  counter         1   11[COMRAM] unsigned char 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1
  2684 ;;      Params:         0       0       0
  2685 ;;      Locals:         1       0       0
  2686 ;;      Temps:          0       0       0
  2687 ;;      Totals:         1       0       0
  2688 ;;Total ram usage:        1 bytes
  2689 ;; Hardware stack levels used: 1
  2690 ;; Hardware stack levels required when called: 4
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text1
  2699   00134C                     __ptext1:
  2700                           	callstack 0
  2701   00134C                     _TI_Init:
  2702                           	callstack 26
  2703                           
  2704                           ;TAD_TIMER.c: 25:  for (unsigned char counter=0; counter<5; counter++) {
  2705                           
  2706                           ;incstack = 0
  2707   00134C  6A67               	clrf	TI_Init@counter^0,c
  2708   00134E                     l3706:
  2709                           
  2710                           ;TAD_TIMER.c: 26:   Timers[counter].Busy=0;
  2711   00134E  5067               	movf	TI_Init@counter^0,w,c
  2712   001350  0D05               	mullw	5
  2713   001352  50F3               	movf	243,w,c
  2714   001354  0F84               	addlw	low (_Timers+4)
  2715   001356  6ED9               	movwf	fsr2l,c
  2716   001358  6ADA               	clrf	fsr2h,c
  2717   00135A  6ADF               	clrf	indf2,c
  2718                           
  2719                           ;TAD_TIMER.c: 27:  }
  2720   00135C  2A67               	incf	TI_Init@counter^0,f,c
  2721   00135E  0E04               	movlw	4
  2722   001360  6467               	cpfsgt	TI_Init@counter^0,c
  2723   001362  D7F5               	goto	l3706
  2724                           
  2725                           ;TAD_TIMER.c: 28:  T0CON=0x88;
  2726   001364  0E88               	movlw	136
  2727   001366  6ED5               	movwf	213,c	;volatile
  2728                           
  2729                           ;TAD_TIMER.c: 29:     TMR0=55536;
  2730   001368  0ED8               	movlw	216
  2731   00136A  6ED7               	movwf	215,c	;volatile
  2732   00136C  0EF0               	movlw	240
  2733   00136E  6ED6               	movwf	214,c	;volatile
  2734                           
  2735                           ;TAD_TIMER.c: 30:  INTCONbits.TMR0IF = 0;
  2736   001370  94F2               	bcf	242,2,c	;volatile
  2737                           
  2738                           ;TAD_TIMER.c: 31:  INTCONbits.TMR0IE = 1;
  2739   001372  8AF2               	bsf	242,5,c	;volatile
  2740   001374  0012               	return		;funcret
  2741   001376                     __end_of_TI_Init:
  2742                           	callstack 0
  2743                           
  2744 ;; *************** function _SIS_MovementMotor *****************
  2745 ;; Defined at:
  2746 ;;		line 101 in file "TAD_SISTEMA.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1
  2760 ;;      Params:         0       0       0
  2761 ;;      Locals:         0       0       0
  2762 ;;      Temps:          0       0       0
  2763 ;;      Totals:         0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used: 1
  2766 ;; Hardware stack levels required when called: 5
  2767 ;; This function calls:
  2768 ;;		_JOY_IsCenter
  2769 ;;		_JOY_IsDown
  2770 ;;		_JOY_IsLeft
  2771 ;;		_JOY_IsRight
  2772 ;;		_JOY_IsUp
  2773 ;;		_SIO_SendBuffer
  2774 ;;		_TI_GetTics
  2775 ;;		_TI_ResetTics
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text2
  2782   0008B8                     __ptext2:
  2783                           	callstack 0
  2784   0008B8                     _SIS_MovementMotor:
  2785                           	callstack 25
  2786                           
  2787                           ;TAD_SISTEMA.c: 102:     static unsigned char state = 0;;TAD_SISTEMA.c: 104:     switch 
      +                          (state) {
  2788                           
  2789                           ;incstack = 0
  2790   0008B8  D04F               	goto	l4542
  2791   0008BA                     l4508:
  2792                           
  2793                           ;TAD_SISTEMA.c: 106:             if (TI_GetTics(timerRebots) >= 20) {
  2794   0008BA  505B               	movf	_timerRebots^0,w,c
  2795   0008BC  ECFE  F007         	call	_TI_GetTics
  2796   0008C0  506A               	movf	(?_TI_GetTics+3)^0,w,c
  2797   0008C2  1069               	iorwf	(?_TI_GetTics+2)^0,w,c
  2798   0008C4  1068               	iorwf	(?_TI_GetTics+1)^0,w,c
  2799   0008C6  E104               	bnz	u2890
  2800   0008C8  0E14               	movlw	20
  2801   0008CA  5C67               	subwf	?_TI_GetTics^0,w,c
  2802   0008CC  A0D8               	btfss	status,0,c
  2803   0008CE  0012               	return	
  2804   0008D0                     u2890:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;TAD_SISTEMA.c: 107:                 TI_ResetTics(timerRebots);
  2808   0008D0  505B               	movf	_timerRebots^0,w,c
  2809   0008D2  EC57  F00A         	call	_TI_ResetTics
  2810                           
  2811                           ;TAD_SISTEMA.c: 108:                 state++;
  2812   0008D6  2A46               	incf	SIS_MovementMotor@state^0,f,c
  2813   0008D8  0012               	return	
  2814   0008DA                     l4514:
  2815                           
  2816                           ;TAD_SISTEMA.c: 113:             JOY_IsCenter();
  2817   0008DA  ECDF  F00A         	call	_JOY_IsCenter	;wreg free
  2818                           
  2819                           ;TAD_SISTEMA.c: 114:             if (JOY_IsUp()) SIO_SendBuffer("UP\r\n", 4);
  2820   0008DE  EC69  F00A         	call	_JOY_IsUp	;wreg free
  2821   0008E2  0900               	iorlw	0
  2822   0008E4  B4D8               	btfsc	status,2,c
  2823   0008E6  D006               	goto	l4518
  2824   0008E8  0E9D               	movlw	low STR_4
  2825   0008EA  6E67               	movwf	SIO_SendBuffer@buffer^0,c
  2826   0008EC  0E04               	movlw	4
  2827   0008EE  6E68               	movwf	SIO_SendBuffer@length^0,c
  2828   0008F0  ECD0  F009         	call	_SIO_SendBuffer	;wreg free
  2829   0008F4                     l4518:
  2830                           
  2831                           ;TAD_SISTEMA.c: 115:             if (JOY_IsDown()) SIO_SendBuffer("DOWN\r\n", 6);
  2832   0008F4  EC9C  F00A         	call	_JOY_IsDown	;wreg free
  2833   0008F8  0900               	iorlw	0
  2834   0008FA  B4D8               	btfsc	status,2,c
  2835   0008FC  D006               	goto	l4522
  2836   0008FE  0E89               	movlw	low STR_5
  2837   000900  6E67               	movwf	SIO_SendBuffer@buffer^0,c
  2838   000902  0E06               	movlw	6
  2839   000904  6E68               	movwf	SIO_SendBuffer@length^0,c
  2840   000906  ECD0  F009         	call	_SIO_SendBuffer	;wreg free
  2841   00090A                     l4522:
  2842                           
  2843                           ;TAD_SISTEMA.c: 116:             if (JOY_IsLeft()) SIO_SendBuffer("LEFT\r\n", 6);
  2844   00090A  EC8B  F00A         	call	_JOY_IsLeft	;wreg free
  2845   00090E  0900               	iorlw	0
  2846   000910  B4D8               	btfsc	status,2,c
  2847   000912  D006               	goto	l4526
  2848   000914  0E90               	movlw	low STR_6
  2849   000916  6E67               	movwf	SIO_SendBuffer@buffer^0,c
  2850   000918  0E06               	movlw	6
  2851   00091A  6E68               	movwf	SIO_SendBuffer@length^0,c
  2852   00091C  ECD0  F009         	call	_SIO_SendBuffer	;wreg free
  2853   000920                     l4526:
  2854                           
  2855                           ;TAD_SISTEMA.c: 117:             if (JOY_IsRight()) SIO_SendBuffer("RIGHT\r\n", 7);
  2856   000920  EC7A  F00A         	call	_JOY_IsRight	;wreg free
  2857   000924  0900               	iorlw	0
  2858   000926  B4D8               	btfsc	status,2,c
  2859   000928  D006               	goto	l4530
  2860   00092A  0E81               	movlw	low STR_7
  2861   00092C  6E67               	movwf	SIO_SendBuffer@buffer^0,c
  2862   00092E  0E07               	movlw	7
  2863   000930  6E68               	movwf	SIO_SendBuffer@length^0,c
  2864   000932  ECD0  F009         	call	_SIO_SendBuffer	;wreg free
  2865   000936                     l4530:
  2866                           
  2867                           ;TAD_SISTEMA.c: 118:             if (PORTBbits.RB0 == 0 &&
  2868   000936  B081               	btfsc	129,0,c	;volatile
  2869   000938  D009               	goto	l4536
  2870   00093A  0473               	decf	_previousButton^0,w,c
  2871   00093C  A4D8               	btfss	status,2,c
  2872   00093E  D006               	goto	l4536
  2873                           
  2874                           ;TAD_SISTEMA.c: 119:                 previousButton == 1) SIO_SendBuffer("SELECT\r\n", 8
      +                          );
  2875   000940  0E67               	movlw	low STR_8
  2876   000942  6E67               	movwf	SIO_SendBuffer@buffer^0,c
  2877   000944  0E08               	movlw	8
  2878   000946  6E68               	movwf	SIO_SendBuffer@length^0,c
  2879   000948  ECD0  F009         	call	_SIO_SendBuffer	;wreg free
  2880   00094C                     l4536:
  2881                           
  2882                           ;TAD_SISTEMA.c: 120:             previousButton = PORTBbits.RB0;
  2883   00094C  0E00               	movlw	0
  2884   00094E  B081               	btfsc	129,0,c	;volatile
  2885   000950  0E01               	movlw	1
  2886   000952  6E73               	movwf	_previousButton^0,c
  2887                           
  2888                           ;TAD_SISTEMA.c: 121:             state--;
  2889   000954  0646               	decf	SIS_MovementMotor@state^0,f,c
  2890                           
  2891                           ;TAD_SISTEMA.c: 122:             break;
  2892   000956  0012               	return	
  2893   000958                     l4542:
  2894   000958  5046               	movf	SIS_MovementMotor@state^0,w,c
  2895                           
  2896                           ; Switch size 1, requested type "simple"
  2897                           ; Number of cases is 2, Range of values is 0 to 1
  2898                           ; switch strategies available:
  2899                           ; Name         Instructions Cycles
  2900                           ; simple_byte            7     4 (average)
  2901                           ;	Chosen strategy is simple_byte
  2902   00095A  0A00               	xorlw	0	; case 0
  2903   00095C  B4D8               	btfsc	status,2,c
  2904   00095E  D7AD               	goto	l4508
  2905   000960  0A01               	xorlw	1	; case 1
  2906   000962  A4D8               	btfss	status,2,c
  2907   000964  0012               	return	
  2908   000966  D7B9               	goto	l4514
  2909   000968                     __end_of_SIS_MovementMotor:
  2910                           	callstack 0
  2911                           
  2912 ;; *************** function _SIO_SendBuffer *****************
  2913 ;; Defined at:
  2914 ;;		line 46 in file "TAD_SIO.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  buffer          1   11[COMRAM] PTR const unsigned char 
  2917 ;;		 -> STR_8(9), STR_7(8), STR_6(7), STR_5(7), 
  2918 ;;		 -> STR_4(5), 
  2919 ;;  length          1   12[COMRAM] unsigned char 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  i               1   14[COMRAM] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1
  2931 ;;      Params:         2       0       0
  2932 ;;      Locals:         1       0       0
  2933 ;;      Temps:          1       0       0
  2934 ;;      Totals:         4       0       0
  2935 ;;Total ram usage:        4 bytes
  2936 ;; Hardware stack levels used: 1
  2937 ;; Hardware stack levels required when called: 4
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_SIS_MovementMotor
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text3
  2946   0013A0                     __ptext3:
  2947                           	callstack 0
  2948   0013A0                     _SIO_SendBuffer:
  2949                           	callstack 25
  2950                           
  2951                           ;TAD_SIO.c: 47:     for (char i = 0; i < length; i++) {
  2952                           
  2953                           ;incstack = 0
  2954   0013A0  6A6A               	clrf	SIO_SendBuffer@i^0,c
  2955   0013A2  D00D               	goto	l3580
  2956   0013A4                     l228:
  2957   0013A4  A2AC               	btfss	172,1,c	;volatile
  2958   0013A6  D7FE               	goto	l228
  2959                           
  2960                           ;TAD_SIO.c: 49:         TXREG = buffer[i];
  2961   0013A8  5067               	movf	SIO_SendBuffer@buffer^0,w,c
  2962   0013AA  246A               	addwf	SIO_SendBuffer@i^0,w,c
  2963   0013AC  6E69               	movwf	??_SIO_SendBuffer^0,c
  2964   0013AE  C069  FFF6         	movff	??_SIO_SendBuffer,tblptrl
  2965   0013B2                     	if	1	;There is more than 1 active tblptr byte
  2966   0013B2  0E02               	movlw	high __psmallconst
  2967   0013B4  6EF7               	movwf	tblptrh,c
  2968   0013B6                     	endif
  2969   0013B6                     	if	0	;tblptru may be non-zero
  2970   0013B6                     	endif
  2971   0013B6                     	if	0	;tblptru may be non-zero
  2972   0013B6                     	endif
  2973   0013B6  0008               	tblrd		*
  2974   0013B8  CFF5 FFAD          	movff	tablat,4013	;volatile
  2975                           
  2976                           ;TAD_SIO.c: 50:     }
  2977   0013BC  2A6A               	incf	SIO_SendBuffer@i^0,f,c
  2978   0013BE                     l3580:
  2979   0013BE  5068               	movf	SIO_SendBuffer@length^0,w,c
  2980   0013C0  5C6A               	subwf	SIO_SendBuffer@i^0,w,c
  2981   0013C2  B0D8               	btfsc	status,0,c
  2982   0013C4  0012               	return	
  2983   0013C6  D7EE               	goto	l228
  2984   0013C8                     __end_of_SIO_SendBuffer:
  2985                           	callstack 0
  2986                           
  2987 ;; *************** function _JOY_IsUp *****************
  2988 ;; Defined at:
  2989 ;;		line 62 in file "TAD_JOYSTICK.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      unsigned char 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1
  3003 ;;      Params:         0       0       0
  3004 ;;      Locals:         0       0       0
  3005 ;;      Temps:          0       0       0
  3006 ;;      Totals:         0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used: 1
  3009 ;; Hardware stack levels required when called: 4
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_SIS_MovementMotor
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text4
  3018   0014D2                     __ptext4:
  3019                           	callstack 0
  3020   0014D2                     _JOY_IsUp:
  3021                           	callstack 25
  3022                           
  3023                           ;TAD_JOYSTICK.c: 63:     if ((50 < joystick[0]) && (joystick[0] < 200)) {
  3024                           
  3025                           ;incstack = 0
  3026   0014D2  0E32               	movlw	50
  3027   0014D4  6414               	cpfsgt	_joystick^0,c
  3028   0014D6  D00C               	goto	l2232
  3029   0014D8  0EC8               	movlw	200
  3030   0014DA  6014               	cpfslt	_joystick^0,c
  3031   0014DC  D009               	goto	l2232
  3032                           
  3033                           ;TAD_JOYSTICK.c: 64:         if ((joystick[1] < 50) && enable) {
  3034   0014DE  0E32               	movlw	50
  3035   0014E0  6015               	cpfslt	(_joystick+1)^0,c
  3036   0014E2  D006               	goto	l2232
  3037   0014E4  501F               	movf	_enable^0,w,c
  3038   0014E6  B4D8               	btfsc	status,2,c
  3039   0014E8  D003               	goto	l2232
  3040                           
  3041                           ;TAD_JOYSTICK.c: 65:             enable = 0;
  3042   0014EA  6A1F               	clrf	_enable^0,c
  3043                           
  3044                           ;TAD_JOYSTICK.c: 66:             return 1;
  3045   0014EC  0E01               	movlw	1
  3046   0014EE  0012               	return	
  3047   0014F0                     l2232:
  3048                           
  3049                           ;TAD_JOYSTICK.c: 69:     return 0;
  3050   0014F0  0E00               	movlw	0
  3051   0014F2  0012               	return		;funcret
  3052   0014F4                     __end_of_JOY_IsUp:
  3053                           	callstack 0
  3054                           
  3055 ;; *************** function _JOY_IsRight *****************
  3056 ;; Defined at:
  3057 ;;		line 92 in file "TAD_JOYSTICK.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      unsigned char 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1
  3071 ;;      Params:         0       0       0
  3072 ;;      Locals:         0       0       0
  3073 ;;      Temps:          0       0       0
  3074 ;;      Totals:         0       0       0
  3075 ;;Total ram usage:        0 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; Hardware stack levels required when called: 4
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_SIS_MovementMotor
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text5
  3086   0014F4                     __ptext5:
  3087                           	callstack 0
  3088   0014F4                     _JOY_IsRight:
  3089                           	callstack 25
  3090                           
  3091                           ;TAD_JOYSTICK.c: 93:     if ((joystick[1] > 50) && (joystick[1] < 200)) {
  3092                           
  3093                           ;incstack = 0
  3094   0014F4  0E32               	movlw	50
  3095   0014F6  6415               	cpfsgt	(_joystick+1)^0,c
  3096   0014F8  D00C               	goto	l2286
  3097   0014FA  0EC8               	movlw	200
  3098   0014FC  6015               	cpfslt	(_joystick+1)^0,c
  3099   0014FE  D009               	goto	l2286
  3100                           
  3101                           ;TAD_JOYSTICK.c: 94:         if ((joystick[0] > 200) && enable) {
  3102   001500  0EC8               	movlw	200
  3103   001502  6414               	cpfsgt	_joystick^0,c
  3104   001504  D006               	goto	l2286
  3105   001506  501F               	movf	_enable^0,w,c
  3106   001508  B4D8               	btfsc	status,2,c
  3107   00150A  D003               	goto	l2286
  3108                           
  3109                           ;TAD_JOYSTICK.c: 95:             enable = 0;
  3110   00150C  6A1F               	clrf	_enable^0,c
  3111                           
  3112                           ;TAD_JOYSTICK.c: 96:             return 1;
  3113   00150E  0E01               	movlw	1
  3114   001510  0012               	return	
  3115   001512                     l2286:
  3116                           
  3117                           ;TAD_JOYSTICK.c: 99:     return 0;
  3118   001512  0E00               	movlw	0
  3119   001514  0012               	return		;funcret
  3120   001516                     __end_of_JOY_IsRight:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _JOY_IsLeft *****************
  3124 ;; Defined at:
  3125 ;;		line 82 in file "TAD_JOYSTICK.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1
  3139 ;;      Params:         0       0       0
  3140 ;;      Locals:         0       0       0
  3141 ;;      Temps:          0       0       0
  3142 ;;      Totals:         0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 4
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_SIS_MovementMotor
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text6
  3154   001516                     __ptext6:
  3155                           	callstack 0
  3156   001516                     _JOY_IsLeft:
  3157                           	callstack 25
  3158                           
  3159                           ;TAD_JOYSTICK.c: 83:     if ((joystick[1] > 50) && (joystick[1] < 200)) {
  3160                           
  3161                           ;incstack = 0
  3162   001516  0E32               	movlw	50
  3163   001518  6415               	cpfsgt	(_joystick+1)^0,c
  3164   00151A  D00C               	goto	l2268
  3165   00151C  0EC8               	movlw	200
  3166   00151E  6015               	cpfslt	(_joystick+1)^0,c
  3167   001520  D009               	goto	l2268
  3168                           
  3169                           ;TAD_JOYSTICK.c: 84:         if ((joystick[0] < 50) && enable) {
  3170   001522  0E32               	movlw	50
  3171   001524  6014               	cpfslt	_joystick^0,c
  3172   001526  D006               	goto	l2268
  3173   001528  501F               	movf	_enable^0,w,c
  3174   00152A  B4D8               	btfsc	status,2,c
  3175   00152C  D003               	goto	l2268
  3176                           
  3177                           ;TAD_JOYSTICK.c: 85:             enable = 0;
  3178   00152E  6A1F               	clrf	_enable^0,c
  3179                           
  3180                           ;TAD_JOYSTICK.c: 86:             return 1;
  3181   001530  0E01               	movlw	1
  3182   001532  0012               	return	
  3183   001534                     l2268:
  3184                           
  3185                           ;TAD_JOYSTICK.c: 89:     return 0;
  3186   001534  0E00               	movlw	0
  3187   001536  0012               	return		;funcret
  3188   001538                     __end_of_JOY_IsLeft:
  3189                           	callstack 0
  3190                           
  3191 ;; *************** function _JOY_IsDown *****************
  3192 ;; Defined at:
  3193 ;;		line 72 in file "TAD_JOYSTICK.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      unsigned char 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1
  3207 ;;      Params:         0       0       0
  3208 ;;      Locals:         0       0       0
  3209 ;;      Temps:          0       0       0
  3210 ;;      Totals:         0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used: 1
  3213 ;; Hardware stack levels required when called: 4
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_SIS_MovementMotor
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text7
  3222   001538                     __ptext7:
  3223                           	callstack 0
  3224   001538                     _JOY_IsDown:
  3225                           	callstack 25
  3226                           
  3227                           ;TAD_JOYSTICK.c: 73:     if ((50 < joystick[0]) && (joystick[0] < 200)) {
  3228                           
  3229                           ;incstack = 0
  3230   001538  0E32               	movlw	50
  3231   00153A  6414               	cpfsgt	_joystick^0,c
  3232   00153C  D00C               	goto	l2250
  3233   00153E  0EC8               	movlw	200
  3234   001540  6014               	cpfslt	_joystick^0,c
  3235   001542  D009               	goto	l2250
  3236                           
  3237                           ;TAD_JOYSTICK.c: 74:         if ((joystick[1] > 200) && enable) {
  3238   001544  0EC8               	movlw	200
  3239   001546  6415               	cpfsgt	(_joystick+1)^0,c
  3240   001548  D006               	goto	l2250
  3241   00154A  501F               	movf	_enable^0,w,c
  3242   00154C  B4D8               	btfsc	status,2,c
  3243   00154E  D003               	goto	l2250
  3244                           
  3245                           ;TAD_JOYSTICK.c: 75:             enable = 0;
  3246   001550  6A1F               	clrf	_enable^0,c
  3247                           
  3248                           ;TAD_JOYSTICK.c: 76:             return 1;
  3249   001552  0E01               	movlw	1
  3250   001554  0012               	return	
  3251   001556                     l2250:
  3252                           
  3253                           ;TAD_JOYSTICK.c: 79:     return 0;
  3254   001556  0E00               	movlw	0
  3255   001558  0012               	return		;funcret
  3256   00155A                     __end_of_JOY_IsDown:
  3257                           	callstack 0
  3258                           
  3259 ;; *************** function _JOY_IsCenter *****************
  3260 ;; Defined at:
  3261 ;;		line 54 in file "TAD_JOYSTICK.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1
  3275 ;;      Params:         0       0       0
  3276 ;;      Locals:         0       0       0
  3277 ;;      Temps:          0       0       0
  3278 ;;      Totals:         0       0       0
  3279 ;;Total ram usage:        0 bytes
  3280 ;; Hardware stack levels used: 1
  3281 ;; Hardware stack levels required when called: 4
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_SIS_MovementMotor
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text8
  3290   0015BE                     __ptext8:
  3291                           	callstack 0
  3292   0015BE                     _JOY_IsCenter:
  3293                           	callstack 25
  3294                           
  3295                           ;TAD_JOYSTICK.c: 55:     if ((50 < joystick[0]) && (joystick[0] < 200)) {
  3296                           
  3297                           ;incstack = 0
  3298   0015BE  0E32               	movlw	50
  3299   0015C0  6414               	cpfsgt	_joystick^0,c
  3300   0015C2  0012               	return	
  3301   0015C4  0EC8               	movlw	200
  3302   0015C6  6014               	cpfslt	_joystick^0,c
  3303   0015C8  0012               	return	
  3304                           
  3305                           ;TAD_JOYSTICK.c: 56:         if ((50 < joystick[1]) && (joystick[1] < 200)) {
  3306   0015CA  0E32               	movlw	50
  3307   0015CC  6415               	cpfsgt	(_joystick+1)^0,c
  3308   0015CE  0012               	return	
  3309   0015D0  0EC8               	movlw	200
  3310   0015D2  6015               	cpfslt	(_joystick+1)^0,c
  3311   0015D4  0012               	return	
  3312                           
  3313                           ;TAD_JOYSTICK.c: 57:             enable = 1;
  3314   0015D6  0E01               	movlw	1
  3315   0015D8  6E1F               	movwf	_enable^0,c
  3316   0015DA  0012               	return		;funcret
  3317   0015DC                     __end_of_JOY_IsCenter:
  3318                           	callstack 0
  3319                           
  3320 ;; *************** function _SIS_Motor *****************
  3321 ;; Defined at:
  3322 ;;		line 73 in file "TAD_SISTEMA.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 3F/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1
  3336 ;;      Params:         0       0       0
  3337 ;;      Locals:         0       0       0
  3338 ;;      Temps:          0       0       0
  3339 ;;      Totals:         0       0       0
  3340 ;;Total ram usage:        0 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 10
  3343 ;; This function calls:
  3344 ;;		_SIO_Receive
  3345 ;;		_processaComanda
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text9
  3352   000DF6                     __ptext9:
  3353                           	callstack 0
  3354   000DF6                     _SIS_Motor:
  3355                           	callstack 20
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;TAD_SISTEMA.c: 74:     static char state = 0;;TAD_SISTEMA.c: 75:     static char i = 0;
      +                          ;TAD_SISTEMA.c: 77:     switch (state) {
  3359                           
  3360                           ;incstack = 0
  3361   000DF6  D026               	goto	l4504
  3362   000DF8                     l4482:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;TAD_SISTEMA.c: 79:             if (SIO_Receive(&received)) {
  3366   000DF8  0E5A               	movlw	low _received
  3367   000DFA  6E67               	movwf	SIO_Receive@character^0,c
  3368   000DFC  EC55  F00B         	call	_SIO_Receive	;wreg free
  3369   000E00  0900               	iorlw	0
  3370   000E02  B4D8               	btfsc	status,2,c
  3371   000E04  0012               	return	
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;TAD_SISTEMA.c: 80:                 if (i < 64 - 1) {
  3375   000E06  0E3F               	movlw	63
  3376   000E08  6047               	cpfslt	SIS_Motor@i^0,c
  3377   000E0A  D013               	goto	l374
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;TAD_SISTEMA.c: 81:                     rxBuffer[i++] = received;
  3381   000E0C  5047               	movf	SIS_Motor@i^0,w,c
  3382   000E0E  0FA7               	addlw	low _rxBuffer
  3383   000E10  6ED9               	movwf	fsr2l,c
  3384   000E12  6ADA               	clrf	fsr2h,c
  3385   000E14  C05A  FFDF         	movff	_received,indf2
  3386                           
  3387                           ; BSR set to: 0
  3388   000E18  2A47               	incf	SIS_Motor@i^0,f,c
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;TAD_SISTEMA.c: 83:                     if (received == '\n') {
  3392   000E1A  0E0A               	movlw	10
  3393   000E1C  185A               	xorwf	_received^0,w,c
  3394   000E1E  A4D8               	btfss	status,2,c
  3395   000E20  0012               	return	
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;TAD_SISTEMA.c: 84:                         rxBuffer[i] = '\0';
  3399   000E22  5047               	movf	SIS_Motor@i^0,w,c
  3400   000E24  0FA7               	addlw	low _rxBuffer
  3401   000E26  6ED9               	movwf	fsr2l,c
  3402   000E28  6ADA               	clrf	fsr2h,c
  3403   000E2A  6ADF               	clrf	indf2,c
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;TAD_SISTEMA.c: 85:                         state = 1;
  3407   000E2C  0E01               	movlw	1
  3408   000E2E  6E48               	movwf	SIS_Motor@state^0,c
  3409   000E30  0012               	return	
  3410   000E32                     l374:
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;TAD_SISTEMA.c: 88:                     i = 0;
  3414   000E32  6A47               	clrf	SIS_Motor@i^0,c
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;TAD_SISTEMA.c: 91:             break;
  3418                           
  3419                           ;TAD_SISTEMA.c: 90:             }
  3420   000E34  0012               	return	
  3421   000E36                     l4496:
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;TAD_SISTEMA.c: 94:             processaComanda(rxBuffer);
  3425   000E36  0EA7               	movlw	low _rxBuffer
  3426   000E38  6FEC               	movwf	processaComanda@comanda& (0+255),b
  3427   000E3A  EC83  F007         	call	_processaComanda	;wreg free
  3428                           
  3429                           ;TAD_SISTEMA.c: 95:             i = 0;
  3430   000E3E  6A47               	clrf	SIS_Motor@i^0,c
  3431                           
  3432                           ;TAD_SISTEMA.c: 96:             state--;
  3433   000E40  0648               	decf	SIS_Motor@state^0,f,c
  3434                           
  3435                           ;TAD_SISTEMA.c: 97:             break;
  3436   000E42  0012               	return	
  3437   000E44                     l4504:
  3438                           
  3439                           ; BSR set to: 0
  3440   000E44  5048               	movf	SIS_Motor@state^0,w,c
  3441                           
  3442                           ; Switch size 1, requested type "simple"
  3443                           ; Number of cases is 2, Range of values is 0 to 1
  3444                           ; switch strategies available:
  3445                           ; Name         Instructions Cycles
  3446                           ; simple_byte            7     4 (average)
  3447                           ;	Chosen strategy is simple_byte
  3448   000E46  0A00               	xorlw	0	; case 0
  3449   000E48  B4D8               	btfsc	status,2,c
  3450   000E4A  D7D6               	goto	l4482
  3451   000E4C  0A01               	xorlw	1	; case 1
  3452   000E4E  A4D8               	btfss	status,2,c
  3453   000E50  0012               	return	
  3454   000E52  D7F1               	goto	l4496
  3455   000E54                     __end_of_SIS_Motor:
  3456                           	callstack 0
  3457                           
  3458 ;; *************** function _processaComanda *****************
  3459 ;; Defined at:
  3460 ;;		line 194 in file "TAD_SISTEMA.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  comanda         1    5[BANK0 ] PTR unsigned char 
  3463 ;;		 -> rxBuffer(64), 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;		None
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 3F/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1
  3475 ;;      Params:         0       1       0
  3476 ;;      Locals:         0       0       0
  3477 ;;      Temps:          0       0       0
  3478 ;;      Totals:         0       1       0
  3479 ;;Total ram usage:        1 bytes
  3480 ;; Hardware stack levels used: 1
  3481 ;; Hardware stack levels required when called: 9
  3482 ;; This function calls:
  3483 ;;		_EEPROM_DemanaLlegirLogs
  3484 ;;		_RAM_DemanaLlegir
  3485 ;;		_identificaComanda
  3486 ;;		_parsejaInitialize
  3487 ;;		_parsejaSetTime
  3488 ;;		_resetCommand
  3489 ;; This function is called by:
  3490 ;;		_SIS_Motor
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text10
  3495   000F06                     __ptext10:
  3496                           	callstack 0
  3497   000F06                     _processaComanda:
  3498                           	callstack 20
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;TAD_SISTEMA.c: 195:     switch (identificaComanda(comanda)) {
  3502                           
  3503                           ;incstack = 0
  3504   000F06  D015               	goto	l4452
  3505   000F08                     l4438:
  3506                           
  3507                           ;TAD_SISTEMA.c: 197:             parsejaInitialize(comanda);
  3508   000F08  C0EC  F0E9         	movff	processaComanda@comanda,parsejaInitialize@comanda
  3509   000F0C  EC53  F003         	call	_parsejaInitialize	;wreg free
  3510                           
  3511                           ;TAD_SISTEMA.c: 198:             systemInitialized = 1;
  3512   000F10  0E01               	movlw	1
  3513   000F12  6E50               	movwf	_systemInitialized^0,c
  3514                           
  3515                           ;TAD_SISTEMA.c: 199:             break;
  3516   000F14  0012               	return	
  3517   000F16                     l4442:
  3518                           
  3519                           ;TAD_SISTEMA.c: 202:             parsejaSetTime(comanda);
  3520   000F16  C0EC  F0E9         	movff	processaComanda@comanda,parsejaSetTime@comanda
  3521   000F1A  ECC8  F006         	call	_parsejaSetTime	;wreg free
  3522                           
  3523                           ;TAD_SISTEMA.c: 203:             break;
  3524   000F1E  0012               	return	
  3525   000F20                     l4444:
  3526                           
  3527                           ;TAD_SISTEMA.c: 206:             EEPROM_DemanaLlegirLogs();
  3528   000F20  ECF9  F00B         	call	_EEPROM_DemanaLlegirLogs	;wreg free
  3529                           
  3530                           ;TAD_SISTEMA.c: 207:             break;
  3531   000F24  0012               	return	
  3532   000F26                     l4446:
  3533                           
  3534                           ;TAD_SISTEMA.c: 210:             RAM_DemanaLlegir();
  3535   000F26  ECF3  F00B         	call	_RAM_DemanaLlegir	;wreg free
  3536                           
  3537                           ;TAD_SISTEMA.c: 211:             break;
  3538   000F2A  0012               	return	
  3539   000F2C                     l4448:
  3540                           
  3541                           ;TAD_SISTEMA.c: 214:             resetCommand();
  3542   000F2C  EC71  F008         	call	_resetCommand	;wreg free
  3543                           
  3544                           ;TAD_SISTEMA.c: 215:             break;
  3545   000F30  0012               	return	
  3546   000F32                     l4452:
  3547                           
  3548                           ; BSR set to: 0
  3549   000F32  C0EC  F06D         	movff	processaComanda@comanda,identificaComanda@comanda
  3550   000F36  ECE9  F005         	call	_identificaComanda	;wreg free
  3551                           
  3552                           ; Switch size 1, requested type "simple"
  3553                           ; Number of cases is 5, Range of values is 1 to 5
  3554                           ; switch strategies available:
  3555                           ; Name         Instructions Cycles
  3556                           ; simple_byte           16     9 (average)
  3557                           ;	Chosen strategy is simple_byte
  3558   000F3A  0A01               	xorlw	1	; case 1
  3559   000F3C  B4D8               	btfsc	status,2,c
  3560   000F3E  D7E4               	goto	l4438
  3561   000F40  0A03               	xorlw	3	; case 2
  3562   000F42  B4D8               	btfsc	status,2,c
  3563   000F44  D7E8               	goto	l4442
  3564   000F46  0A01               	xorlw	1	; case 3
  3565   000F48  B4D8               	btfsc	status,2,c
  3566   000F4A  D7EA               	goto	l4444
  3567   000F4C  0A07               	xorlw	7	; case 4
  3568   000F4E  B4D8               	btfsc	status,2,c
  3569   000F50  D7EA               	goto	l4446
  3570   000F52  0A01               	xorlw	1	; case 5
  3571   000F54  A4D8               	btfss	status,2,c
  3572   000F56  0012               	return	
  3573   000F58  D7E9               	goto	l4448
  3574   000F5A                     __end_of_processaComanda:
  3575                           	callstack 0
  3576                           
  3577 ;; *************** function _resetCommand *****************
  3578 ;; Defined at:
  3579 ;;		line 219 in file "TAD_SISTEMA.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1
  3593 ;;      Params:         0       0       0
  3594 ;;      Locals:         0       0       0
  3595 ;;      Temps:          0       0       0
  3596 ;;      Totals:         0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used: 1
  3599 ;; Hardware stack levels required when called: 8
  3600 ;; This function calls:
  3601 ;;		_EEPROM_DemanaEsborrarLogs
  3602 ;;		_FAN_SetDutyFan0
  3603 ;;		_FAN_SetDutyFan1
  3604 ;;		_RAM_DemanaEsborrar
  3605 ;;		_RGB_SetColor
  3606 ;; This function is called by:
  3607 ;;		_processaComanda
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text11
  3612   0010E2                     __ptext11:
  3613                           	callstack 0
  3614   0010E2                     _resetCommand:
  3615                           	callstack 20
  3616                           
  3617                           ;TAD_SISTEMA.c: 220:     systemInitialized = 0;
  3618                           
  3619                           ;incstack = 0
  3620   0010E2  6A50               	clrf	_systemInitialized^0,c
  3621                           
  3622                           ;TAD_SISTEMA.c: 222:     FAN_SetDutyFan0(0);
  3623   0010E4  0E00               	movlw	0
  3624   0010E6  ECA9  F00B         	call	_FAN_SetDutyFan0
  3625                           
  3626                           ;TAD_SISTEMA.c: 223:     FAN_SetDutyFan1(0);
  3627   0010EA  0E00               	movlw	0
  3628   0010EC  ECA0  F00B         	call	_FAN_SetDutyFan1
  3629                           
  3630                           ;TAD_SISTEMA.c: 224:     RGB_SetColor(0, 0, 0);
  3631   0010F0  0E00               	movlw	0
  3632   0010F2  6E67               	movwf	RGB_SetColor@g^0,c
  3633   0010F4  0E00               	movlw	0
  3634   0010F6  6E68               	movwf	RGB_SetColor@b^0,c
  3635   0010F8  0E00               	movlw	0
  3636   0010FA  EC97  F00B         	call	_RGB_SetColor
  3637                           
  3638                           ;TAD_SISTEMA.c: 225:     EEPROM_DemanaEsborrarLogs();
  3639   0010FE  ECAD  F00A         	call	_EEPROM_DemanaEsborrarLogs	;wreg free
  3640                           
  3641                           ;TAD_SISTEMA.c: 226:     RAM_DemanaEsborrar();
  3642   001102  EC4E  F009         	call	_RAM_DemanaEsborrar	;wreg free
  3643                           
  3644                           ;TAD_SISTEMA.c: 229:     any = 0;
  3645   001106  6A59               	clrf	_any^0,c
  3646                           
  3647                           ;TAD_SISTEMA.c: 230:     mes = 0;
  3648   001108  6A58               	clrf	_mes^0,c
  3649                           
  3650                           ;TAD_SISTEMA.c: 231:     dia = 0;
  3651   00110A  6A57               	clrf	_dia^0,c
  3652                           
  3653                           ;TAD_SISTEMA.c: 232:     hora = 0;
  3654   00110C  6A56               	clrf	_hora^0,c
  3655                           
  3656                           ;TAD_SISTEMA.c: 233:     minuts = 0;
  3657   00110E  6A55               	clrf	_minuts^0,c
  3658                           
  3659                           ;TAD_SISTEMA.c: 234:     segons = 0;
  3660   001110  6A54               	clrf	_segons^0,c
  3661                           
  3662                           ;TAD_SISTEMA.c: 235:     tempsMostreig = 0;
  3663   001112  6A4E               	clrf	_tempsMostreig^0,c
  3664                           
  3665                           ;TAD_SISTEMA.c: 236:     llindarLow = 0;
  3666   001114  6A4D               	clrf	_llindarLow^0,c
  3667                           
  3668                           ;TAD_SISTEMA.c: 237:     llindarModerate = 0;
  3669   001116  6A4C               	clrf	_llindarModerate^0,c
  3670                           
  3671                           ;TAD_SISTEMA.c: 238:     llindarHigh = 0;
  3672   001118  6A4B               	clrf	_llindarHigh^0,c
  3673                           
  3674                           ;TAD_SISTEMA.c: 239:     llindarCritical = 0;
  3675   00111A  6A4A               	clrf	_llindarCritical^0,c
  3676   00111C  0012               	return		;funcret
  3677   00111E                     __end_of_resetCommand:
  3678                           	callstack 0
  3679                           
  3680 ;; *************** function _EEPROM_DemanaEsborrarLogs *****************
  3681 ;; Defined at:
  3682 ;;		line 40 in file "TAD_EEPROM.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  addr            1   14[COMRAM] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1
  3696 ;;      Params:         0       0       0
  3697 ;;      Locals:         1       0       0
  3698 ;;      Temps:          0       0       0
  3699 ;;      Totals:         1       0       0
  3700 ;;Total ram usage:        1 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 5
  3703 ;; This function calls:
  3704 ;;		_writeByte
  3705 ;; This function is called by:
  3706 ;;		_resetCommand
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text12
  3711   00155A                     __ptext12:
  3712                           	callstack 0
  3713   00155A                     _EEPROM_DemanaEsborrarLogs:
  3714                           	callstack 22
  3715                           
  3716                           ;TAD_EEPROM.c: 41:     for (unsigned char addr = 0; addr < (14 * 15); addr++) {
  3717                           
  3718                           ;incstack = 0
  3719   00155A  6A6A               	clrf	EEPROM_DemanaEsborrarLogs@addr^0,c
  3720   00155C                     l3156:
  3721                           
  3722                           ;TAD_EEPROM.c: 42:         writeByte(addr, 0xFF);
  3723   00155C  0EFF               	movlw	255
  3724   00155E  6E68               	movwf	writeByte@data^0,c
  3725   001560  506A               	movf	EEPROM_DemanaEsborrarLogs@addr^0,w,c
  3726   001562  EC20  F00A         	call	_writeByte
  3727                           
  3728                           ;TAD_EEPROM.c: 43:     }
  3729   001566  2A6A               	incf	EEPROM_DemanaEsborrarLogs@addr^0,f,c
  3730   001568  0ED1               	movlw	209
  3731   00156A  646A               	cpfsgt	EEPROM_DemanaEsborrarLogs@addr^0,c
  3732   00156C  D7F7               	goto	l3156
  3733                           
  3734                           ;TAD_EEPROM.c: 44:     totalLogs = 0;
  3735   00156E  6A42               	clrf	_totalLogs^0,c
  3736                           
  3737                           ;TAD_EEPROM.c: 45:     writeByte(0xFF, 0);
  3738   001570  0E00               	movlw	0
  3739   001572  6E68               	movwf	writeByte@data^0,c
  3740   001574  0EFF               	movlw	255
  3741   001576  EC20  F00A         	call	_writeByte
  3742   00157A  0012               	return		;funcret
  3743   00157C                     __end_of_EEPROM_DemanaEsborrarLogs:
  3744                           	callstack 0
  3745                           
  3746 ;; *************** function _parsejaSetTime *****************
  3747 ;; Defined at:
  3748 ;;		line 291 in file "TAD_SISTEMA.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  comanda         1    2[BANK0 ] PTR unsigned char 
  3751 ;;		 -> rxBuffer(64), 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  i               1    4[BANK0 ] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1
  3763 ;;      Params:         0       1       0
  3764 ;;      Locals:         0       1       0
  3765 ;;      Temps:          0       1       0
  3766 ;;      Totals:         0       3       0
  3767 ;;Total ram usage:        3 bytes
  3768 ;; Hardware stack levels used: 1
  3769 ;; Hardware stack levels required when called: 8
  3770 ;; This function calls:
  3771 ;;		_RTC_SetTime
  3772 ;; This function is called by:
  3773 ;;		_processaComanda
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text13
  3778   000D90                     __ptext13:
  3779                           	callstack 0
  3780   000D90                     _parsejaSetTime:
  3781                           	callstack 20
  3782                           
  3783                           ;TAD_SISTEMA.c: 292:     char i = 9;
  3784                           
  3785                           ;incstack = 0
  3786   000D90  0E09               	movlw	9
  3787   000D92  0100               	movlb	0	; () banked
  3788   000D94  6FEB               	movwf	parsejaSetTime@i& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;TAD_SISTEMA.c: 294:     hora = (comanda[i] - '0') * 10 + (comanda[i + 1] - '0'); i += 3
      +                          ;
  3792   000D96  51E9               	movf	parsejaSetTime@comanda& (0+255),w,b
  3793   000D98  6ED9               	movwf	fsr2l,c
  3794   000D9A  6ADA               	clrf	fsr2h,c
  3795   000D9C  0E0A               	movlw	10
  3796   000D9E  26D9               	addwf	fsr2l,f,c
  3797   000DA0  50DF               	movf	indf2,w,c
  3798   000DA2  6FEA               	movwf	??_parsejaSetTime& (0+255),b
  3799   000DA4  51E9               	movf	parsejaSetTime@comanda& (0+255),w,b
  3800   000DA6  6ED9               	movwf	fsr2l,c
  3801   000DA8  6ADA               	clrf	fsr2h,c
  3802   000DAA  0E09               	movlw	9
  3803   000DAC  26D9               	addwf	fsr2l,f,c
  3804   000DAE  50DF               	movf	indf2,w,c
  3805   000DB0  0D0A               	mullw	10
  3806   000DB2  50F3               	movf	243,w,c
  3807   000DB4  25EA               	addwf	??_parsejaSetTime& (0+255),w,b
  3808   000DB6  0FF0               	addlw	240
  3809   000DB8  6E56               	movwf	_hora^0,c
  3810                           
  3811                           ; BSR set to: 0
  3812   000DBA  0E03               	movlw	3
  3813   000DBC  27EB               	addwf	parsejaSetTime@i& (0+255),f,b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;TAD_SISTEMA.c: 295:     minuts = (comanda[i] - '0') * 10 + (comanda[i + 1] - '0'); i +=
      +                           2;
  3817   000DBE  51E9               	movf	parsejaSetTime@comanda& (0+255),w,b
  3818   000DC0  25EB               	addwf	parsejaSetTime@i& (0+255),w,b
  3819   000DC2  6ED9               	movwf	fsr2l,c
  3820   000DC4  6ADA               	clrf	fsr2h,c
  3821   000DC6  0E01               	movlw	1
  3822   000DC8  26D9               	addwf	fsr2l,f,c
  3823   000DCA  50DF               	movf	indf2,w,c
  3824   000DCC  6FEA               	movwf	??_parsejaSetTime& (0+255),b
  3825   000DCE  51E9               	movf	parsejaSetTime@comanda& (0+255),w,b
  3826   000DD0  25EB               	addwf	parsejaSetTime@i& (0+255),w,b
  3827   000DD2  6ED9               	movwf	fsr2l,c
  3828   000DD4  6ADA               	clrf	fsr2h,c
  3829   000DD6  50DF               	movf	indf2,w,c
  3830   000DD8  0D0A               	mullw	10
  3831   000DDA  50F3               	movf	243,w,c
  3832   000DDC  25EA               	addwf	??_parsejaSetTime& (0+255),w,b
  3833   000DDE  0FF0               	addlw	240
  3834   000DE0  6E55               	movwf	_minuts^0,c
  3835                           
  3836                           ; BSR set to: 0
  3837   000DE2  0E02               	movlw	2
  3838   000DE4  27EB               	addwf	parsejaSetTime@i& (0+255),f,b
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;TAD_SISTEMA.c: 297:     RTC_SetTime(hora, minuts, segons);
  3842   000DE6  C055  F0E7         	movff	_minuts,RTC_SetTime@mm
  3843   000DEA  C054  F0E8         	movff	_segons,RTC_SetTime@ss
  3844   000DEE  5056               	movf	_hora^0,w,c
  3845   000DF0  EC01  F009         	call	_RTC_SetTime
  3846   000DF4  0012               	return		;funcret
  3847   000DF6                     __end_of_parsejaSetTime:
  3848                           	callstack 0
  3849                           
  3850 ;; *************** function _parsejaInitialize *****************
  3851 ;; Defined at:
  3852 ;;		line 270 in file "TAD_SISTEMA.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  comanda         1    2[BANK0 ] PTR unsigned char 
  3855 ;;		 -> rxBuffer(64), 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  i               1    4[BANK0 ] unsigned char 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1
  3867 ;;      Params:         0       1       0
  3868 ;;      Locals:         0       1       0
  3869 ;;      Temps:          0       1       0
  3870 ;;      Totals:         0       3       0
  3871 ;;Total ram usage:        3 bytes
  3872 ;; Hardware stack levels used: 1
  3873 ;; Hardware stack levels required when called: 8
  3874 ;; This function calls:
  3875 ;;		_RTC_SetDate
  3876 ;;		_RTC_SetTime
  3877 ;;		_obtenirNumero
  3878 ;; This function is called by:
  3879 ;;		_processaComanda
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text14
  3884   0006A6                     __ptext14:
  3885                           	callstack 0
  3886   0006A6                     _parsejaInitialize:
  3887                           	callstack 20
  3888                           
  3889                           ;TAD_SISTEMA.c: 272:     char i = 13;
  3890                           
  3891                           ;incstack = 0
  3892   0006A6  0E0D               	movlw	13
  3893   0006A8  0100               	movlb	0	; () banked
  3894   0006AA  6FEB               	movwf	parsejaInitialize@i& (0+255),b
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;TAD_SISTEMA.c: 274:     any = (comanda[i] - '0') * 10 + (comanda[i+1] - '0'); i += 3;
  3898   0006AC  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3899   0006AE  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3900   0006B0  6ED9               	movwf	fsr2l,c
  3901   0006B2  6ADA               	clrf	fsr2h,c
  3902   0006B4  0E01               	movlw	1
  3903   0006B6  26D9               	addwf	fsr2l,f,c
  3904   0006B8  50DF               	movf	indf2,w,c
  3905   0006BA  6FEA               	movwf	??_parsejaInitialize& (0+255),b
  3906   0006BC  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3907   0006BE  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3908   0006C0  6ED9               	movwf	fsr2l,c
  3909   0006C2  6ADA               	clrf	fsr2h,c
  3910   0006C4  50DF               	movf	indf2,w,c
  3911   0006C6  0D0A               	mullw	10
  3912   0006C8  50F3               	movf	243,w,c
  3913   0006CA  25EA               	addwf	??_parsejaInitialize& (0+255),w,b
  3914   0006CC  0FF0               	addlw	240
  3915   0006CE  6E59               	movwf	_any^0,c
  3916                           
  3917                           ; BSR set to: 0
  3918   0006D0  0E03               	movlw	3
  3919   0006D2  27EB               	addwf	parsejaInitialize@i& (0+255),f,b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;TAD_SISTEMA.c: 275:     mes = (comanda[i] - '0') * 10 + (comanda[i+1] - '0'); i += 3;
  3923   0006D4  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3924   0006D6  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3925   0006D8  6ED9               	movwf	fsr2l,c
  3926   0006DA  6ADA               	clrf	fsr2h,c
  3927   0006DC  0E01               	movlw	1
  3928   0006DE  26D9               	addwf	fsr2l,f,c
  3929   0006E0  50DF               	movf	indf2,w,c
  3930   0006E2  6FEA               	movwf	??_parsejaInitialize& (0+255),b
  3931   0006E4  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3932   0006E6  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3933   0006E8  6ED9               	movwf	fsr2l,c
  3934   0006EA  6ADA               	clrf	fsr2h,c
  3935   0006EC  50DF               	movf	indf2,w,c
  3936   0006EE  0D0A               	mullw	10
  3937   0006F0  50F3               	movf	243,w,c
  3938   0006F2  25EA               	addwf	??_parsejaInitialize& (0+255),w,b
  3939   0006F4  0FF0               	addlw	240
  3940   0006F6  6E58               	movwf	_mes^0,c
  3941                           
  3942                           ; BSR set to: 0
  3943   0006F8  0E03               	movlw	3
  3944   0006FA  27EB               	addwf	parsejaInitialize@i& (0+255),f,b
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;TAD_SISTEMA.c: 276:     dia = (comanda[i] - '0') * 10 + (comanda[i+1] - '0'); i += 3;
  3948   0006FC  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3949   0006FE  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3950   000700  6ED9               	movwf	fsr2l,c
  3951   000702  6ADA               	clrf	fsr2h,c
  3952   000704  0E01               	movlw	1
  3953   000706  26D9               	addwf	fsr2l,f,c
  3954   000708  50DF               	movf	indf2,w,c
  3955   00070A  6FEA               	movwf	??_parsejaInitialize& (0+255),b
  3956   00070C  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3957   00070E  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3958   000710  6ED9               	movwf	fsr2l,c
  3959   000712  6ADA               	clrf	fsr2h,c
  3960   000714  50DF               	movf	indf2,w,c
  3961   000716  0D0A               	mullw	10
  3962   000718  50F3               	movf	243,w,c
  3963   00071A  25EA               	addwf	??_parsejaInitialize& (0+255),w,b
  3964   00071C  0FF0               	addlw	240
  3965   00071E  6E57               	movwf	_dia^0,c
  3966                           
  3967                           ; BSR set to: 0
  3968   000720  0E03               	movlw	3
  3969   000722  27EB               	addwf	parsejaInitialize@i& (0+255),f,b
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;TAD_SISTEMA.c: 277:     hora = (comanda[i] - '0') * 10 + (comanda[i+1] - '0'); i += 3;
  3973   000724  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3974   000726  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3975   000728  6ED9               	movwf	fsr2l,c
  3976   00072A  6ADA               	clrf	fsr2h,c
  3977   00072C  0E01               	movlw	1
  3978   00072E  26D9               	addwf	fsr2l,f,c
  3979   000730  50DF               	movf	indf2,w,c
  3980   000732  6FEA               	movwf	??_parsejaInitialize& (0+255),b
  3981   000734  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3982   000736  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  3983   000738  6ED9               	movwf	fsr2l,c
  3984   00073A  6ADA               	clrf	fsr2h,c
  3985   00073C  50DF               	movf	indf2,w,c
  3986   00073E  0D0A               	mullw	10
  3987   000740  50F3               	movf	243,w,c
  3988   000742  25EA               	addwf	??_parsejaInitialize& (0+255),w,b
  3989   000744  0FF0               	addlw	240
  3990   000746  6E56               	movwf	_hora^0,c
  3991                           
  3992                           ; BSR set to: 0
  3993   000748  0E03               	movlw	3
  3994   00074A  27EB               	addwf	parsejaInitialize@i& (0+255),f,b
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;TAD_SISTEMA.c: 278:     minuts = (comanda[i] - '0') * 10 + (comanda[i+1] - '0'); i += 2
      +                          ;
  3998   00074C  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  3999   00074E  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  4000   000750  6ED9               	movwf	fsr2l,c
  4001   000752  6ADA               	clrf	fsr2h,c
  4002   000754  0E01               	movlw	1
  4003   000756  26D9               	addwf	fsr2l,f,c
  4004   000758  50DF               	movf	indf2,w,c
  4005   00075A  6FEA               	movwf	??_parsejaInitialize& (0+255),b
  4006   00075C  51E9               	movf	parsejaInitialize@comanda& (0+255),w,b
  4007   00075E  25EB               	addwf	parsejaInitialize@i& (0+255),w,b
  4008   000760  6ED9               	movwf	fsr2l,c
  4009   000762  6ADA               	clrf	fsr2h,c
  4010   000764  50DF               	movf	indf2,w,c
  4011   000766  0D0A               	mullw	10
  4012   000768  50F3               	movf	243,w,c
  4013   00076A  25EA               	addwf	??_parsejaInitialize& (0+255),w,b
  4014   00076C  0FF0               	addlw	240
  4015   00076E  6E55               	movwf	_minuts^0,c
  4016                           
  4017                           ; BSR set to: 0
  4018   000770  0E02               	movlw	2
  4019   000772  27EB               	addwf	parsejaInitialize@i& (0+255),f,b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;TAD_SISTEMA.c: 281:     tempsMostreig = obtenirNumero(comanda, &i);
  4023   000774  C0E9  F067         	movff	parsejaInitialize@comanda,obtenirNumero@buf
  4024   000778  0EEB               	movlw	low parsejaInitialize@i
  4025   00077A  6E68               	movwf	obtenirNumero@idx^0,c
  4026   00077C  EC09  F005         	call	_obtenirNumero	;wreg free
  4027   000780  6E4E               	movwf	_tempsMostreig^0,c
  4028                           
  4029                           ;TAD_SISTEMA.c: 282:     llindarLow = obtenirNumero(comanda, &i);
  4030   000782  C0E9  F067         	movff	parsejaInitialize@comanda,obtenirNumero@buf
  4031   000786  0EEB               	movlw	low parsejaInitialize@i
  4032   000788  6E68               	movwf	obtenirNumero@idx^0,c
  4033   00078A  EC09  F005         	call	_obtenirNumero	;wreg free
  4034   00078E  6E4D               	movwf	_llindarLow^0,c
  4035                           
  4036                           ;TAD_SISTEMA.c: 283:     llindarModerate = obtenirNumero(comanda, &i);
  4037   000790  C0E9  F067         	movff	parsejaInitialize@comanda,obtenirNumero@buf
  4038   000794  0EEB               	movlw	low parsejaInitialize@i
  4039   000796  6E68               	movwf	obtenirNumero@idx^0,c
  4040   000798  EC09  F005         	call	_obtenirNumero	;wreg free
  4041   00079C  6E4C               	movwf	_llindarModerate^0,c
  4042                           
  4043                           ;TAD_SISTEMA.c: 284:     llindarHigh = obtenirNumero(comanda, &i);
  4044   00079E  C0E9  F067         	movff	parsejaInitialize@comanda,obtenirNumero@buf
  4045   0007A2  0EEB               	movlw	low parsejaInitialize@i
  4046   0007A4  6E68               	movwf	obtenirNumero@idx^0,c
  4047   0007A6  EC09  F005         	call	_obtenirNumero	;wreg free
  4048   0007AA  6E4B               	movwf	_llindarHigh^0,c
  4049                           
  4050                           ;TAD_SISTEMA.c: 285:     llindarCritical = obtenirNumero(comanda, &i);
  4051   0007AC  C0E9  F067         	movff	parsejaInitialize@comanda,obtenirNumero@buf
  4052   0007B0  0EEB               	movlw	low parsejaInitialize@i
  4053   0007B2  6E68               	movwf	obtenirNumero@idx^0,c
  4054   0007B4  EC09  F005         	call	_obtenirNumero	;wreg free
  4055   0007B8  6E4A               	movwf	_llindarCritical^0,c
  4056                           
  4057                           ;TAD_SISTEMA.c: 287:     RTC_SetDate(dia, mes, any);
  4058   0007BA  C058  F0E7         	movff	_mes,RTC_SetDate@mo
  4059   0007BE  C059  F0E8         	movff	_any,RTC_SetDate@yy
  4060   0007C2  5057               	movf	_dia^0,w,c
  4061   0007C4  EC1C  F009         	call	_RTC_SetDate
  4062                           
  4063                           ;TAD_SISTEMA.c: 288:     RTC_SetTime(hora, minuts, segons);
  4064   0007C8  C055  F0E7         	movff	_minuts,RTC_SetTime@mm
  4065   0007CC  C054  F0E8         	movff	_segons,RTC_SetTime@ss
  4066   0007D0  5056               	movf	_hora^0,w,c
  4067   0007D2  EC01  F009         	call	_RTC_SetTime
  4068   0007D6  0012               	return		;funcret
  4069   0007D8                     __end_of_parsejaInitialize:
  4070                           	callstack 0
  4071                           
  4072 ;; *************** function _obtenirNumero *****************
  4073 ;; Defined at:
  4074 ;;		line 252 in file "TAD_SISTEMA.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  buf             1   11[COMRAM] PTR unsigned char 
  4077 ;;		 -> rxBuffer(64), 
  4078 ;;  idx             1   12[COMRAM] PTR unsigned char 
  4079 ;;		 -> parsejaInitialize@i(1), 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  val             1   15[COMRAM] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      unsigned char 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1
  4091 ;;      Params:         2       0       0
  4092 ;;      Locals:         1       0       0
  4093 ;;      Temps:          2       0       0
  4094 ;;      Totals:         5       0       0
  4095 ;;Total ram usage:        5 bytes
  4096 ;; Hardware stack levels used: 1
  4097 ;; Hardware stack levels required when called: 4
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_parsejaInitialize
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text15
  4106   000A12                     __ptext15:
  4107                           	callstack 0
  4108   000A12                     _obtenirNumero:
  4109                           	callstack 23
  4110                           
  4111                           ;TAD_SISTEMA.c: 253:     char val = 0;
  4112                           
  4113                           ;incstack = 0
  4114   000A12  6A6B               	clrf	obtenirNumero@val^0,c
  4115                           
  4116                           ;TAD_SISTEMA.c: 256:     if (buf[*idx] == '$') (*idx)++;
  4117   000A14  5068               	movf	obtenirNumero@idx^0,w,c
  4118   000A16  6ED9               	movwf	fsr2l,c
  4119   000A18  6ADA               	clrf	fsr2h,c
  4120   000A1A  50DF               	movf	indf2,w,c
  4121   000A1C  6E69               	movwf	??_obtenirNumero^0,c
  4122   000A1E  5067               	movf	obtenirNumero@buf^0,w,c
  4123   000A20  2469               	addwf	??_obtenirNumero^0,w,c
  4124   000A22  6ED9               	movwf	fsr2l,c
  4125   000A24  6ADA               	clrf	fsr2h,c
  4126   000A26  0E24               	movlw	36
  4127   000A28  18DE               	xorwf	postinc2,w,c
  4128   000A2A  A4D8               	btfss	status,2,c
  4129   000A2C  D017               	goto	l4322
  4130   000A2E                     u2760:
  4131   000A2E  5068               	movf	obtenirNumero@idx^0,w,c
  4132   000A30  6ED9               	movwf	fsr2l,c
  4133   000A32  6ADA               	clrf	fsr2h,c
  4134   000A34  2ADF               	incf	indf2,f,c
  4135   000A36  D012               	goto	l4322
  4136   000A38                     l4318:
  4137                           
  4138                           ;TAD_SISTEMA.c: 260:         val = val * 10 + (buf[*idx] - '0');
  4139   000A38  5068               	movf	obtenirNumero@idx^0,w,c
  4140   000A3A  6ED9               	movwf	fsr2l,c
  4141   000A3C  6ADA               	clrf	fsr2h,c
  4142   000A3E  50DF               	movf	indf2,w,c
  4143   000A40  6E69               	movwf	??_obtenirNumero^0,c
  4144   000A42  5067               	movf	obtenirNumero@buf^0,w,c
  4145   000A44  2469               	addwf	??_obtenirNumero^0,w,c
  4146   000A46  6ED9               	movwf	fsr2l,c
  4147   000A48  6ADA               	clrf	fsr2h,c
  4148   000A4A  50DF               	movf	indf2,w,c
  4149   000A4C  6E6A               	movwf	(??_obtenirNumero+1)^0,c
  4150   000A4E  506B               	movf	obtenirNumero@val^0,w,c
  4151   000A50  0D0A               	mullw	10
  4152   000A52  50F3               	movf	243,w,c
  4153   000A54  246A               	addwf	(??_obtenirNumero+1)^0,w,c
  4154   000A56  0FD0               	addlw	208
  4155   000A58  6E6B               	movwf	obtenirNumero@val^0,c
  4156   000A5A  D7E9               	goto	u2760
  4157   000A5C                     l4322:
  4158                           
  4159                           ;TAD_SISTEMA.c: 259:     while (buf[*idx] >= '0' && buf[*idx] <= '9') {
  4160   000A5C  5068               	movf	obtenirNumero@idx^0,w,c
  4161   000A5E  6ED9               	movwf	fsr2l,c
  4162   000A60  6ADA               	clrf	fsr2h,c
  4163   000A62  50DF               	movf	indf2,w,c
  4164   000A64  6E69               	movwf	??_obtenirNumero^0,c
  4165   000A66  5067               	movf	obtenirNumero@buf^0,w,c
  4166   000A68  2469               	addwf	??_obtenirNumero^0,w,c
  4167   000A6A  6ED9               	movwf	fsr2l,c
  4168   000A6C  6ADA               	clrf	fsr2h,c
  4169   000A6E  0E2F               	movlw	47
  4170   000A70  64DF               	cpfsgt	indf2,c
  4171   000A72  D00C               	goto	u2780
  4172   000A74  5068               	movf	obtenirNumero@idx^0,w,c
  4173   000A76  6ED9               	movwf	fsr2l,c
  4174   000A78  6ADA               	clrf	fsr2h,c
  4175   000A7A  50DF               	movf	indf2,w,c
  4176   000A7C  6E69               	movwf	??_obtenirNumero^0,c
  4177   000A7E  5067               	movf	obtenirNumero@buf^0,w,c
  4178   000A80  2469               	addwf	??_obtenirNumero^0,w,c
  4179   000A82  6ED9               	movwf	fsr2l,c
  4180   000A84  6ADA               	clrf	fsr2h,c
  4181   000A86  0E39               	movlw	57
  4182   000A88  64DF               	cpfsgt	indf2,c
  4183   000A8A  D7D6               	goto	l4318
  4184   000A8C                     u2780:
  4185                           
  4186                           ;TAD_SISTEMA.c: 265:     if (buf[*idx] == '$') (*idx)++;
  4187   000A8C  5068               	movf	obtenirNumero@idx^0,w,c
  4188   000A8E  6ED9               	movwf	fsr2l,c
  4189   000A90  6ADA               	clrf	fsr2h,c
  4190   000A92  50DF               	movf	indf2,w,c
  4191   000A94  6E69               	movwf	??_obtenirNumero^0,c
  4192   000A96  5067               	movf	obtenirNumero@buf^0,w,c
  4193   000A98  2469               	addwf	??_obtenirNumero^0,w,c
  4194   000A9A  6ED9               	movwf	fsr2l,c
  4195   000A9C  6ADA               	clrf	fsr2h,c
  4196   000A9E  0E24               	movlw	36
  4197   000AA0  18DE               	xorwf	postinc2,w,c
  4198   000AA2  A4D8               	btfss	status,2,c
  4199   000AA4  D004               	goto	l4330
  4200   000AA6  5068               	movf	obtenirNumero@idx^0,w,c
  4201   000AA8  6ED9               	movwf	fsr2l,c
  4202   000AAA  6ADA               	clrf	fsr2h,c
  4203   000AAC  2ADF               	incf	indf2,f,c
  4204   000AAE                     l4330:
  4205                           
  4206                           ;TAD_SISTEMA.c: 267:     return val;
  4207   000AAE  506B               	movf	obtenirNumero@val^0,w,c
  4208   000AB0  0012               	return		;funcret
  4209   000AB2                     __end_of_obtenirNumero:
  4210                           	callstack 0
  4211                           
  4212 ;; *************** function _RTC_SetTime *****************
  4213 ;; Defined at:
  4214 ;;		line 47 in file "TAD_RTC.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  hh              1    wreg     unsigned char 
  4217 ;;  mm              1    0[BANK0 ] unsigned char 
  4218 ;;  ss              1    1[BANK0 ] unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  hh              1   22[COMRAM] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1
  4230 ;;      Params:         0       2       0
  4231 ;;      Locals:         1       0       0
  4232 ;;      Temps:          0       0       0
  4233 ;;      Totals:         1       2       0
  4234 ;;Total ram usage:        3 bytes
  4235 ;; Hardware stack levels used: 1
  4236 ;; Hardware stack levels required when called: 7
  4237 ;; This function calls:
  4238 ;;		_I2C_Stop_
  4239 ;;		_I2C_Write
  4240 ;;		_StartI2C
  4241 ;;		_decToBcd
  4242 ;; This function is called by:
  4243 ;;		_parsejaInitialize
  4244 ;;		_parsejaSetTime
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text16
  4249   001202                     __ptext16:
  4250                           	callstack 0
  4251   001202                     _RTC_SetTime:
  4252                           	callstack 20
  4253                           
  4254                           ;incstack = 0
  4255                           ;RTC_SetTime@hh stored from wreg
  4256   001202  6E72               	movwf	RTC_SetTime@hh^0,c
  4257                           
  4258                           ;TAD_RTC.c: 48:     StartI2C(0xD0);
  4259   001204  0ED0               	movlw	208
  4260   001206  EC76  F00B         	call	_StartI2C
  4261                           
  4262                           ;TAD_RTC.c: 49:     I2C_Write(0x00);
  4263   00120A  0E00               	movlw	0
  4264   00120C  EC81  F00B         	call	_I2C_Write
  4265                           
  4266                           ;TAD_RTC.c: 50:     I2C_Write(decToBcd(ss));
  4267   001210  0100               	movlb	0	; () banked
  4268   001212  51E8               	movf	RTC_SetTime@ss& (0+255),w,b
  4269   001214  ECBE  F00A         	call	_decToBcd
  4270   001218  EC81  F00B         	call	_I2C_Write
  4271                           
  4272                           ;TAD_RTC.c: 51:     I2C_Write(decToBcd(mm));
  4273   00121C  0100               	movlb	0	; () banked
  4274   00121E  51E7               	movf	RTC_SetTime@mm& (0+255),w,b
  4275   001220  ECBE  F00A         	call	_decToBcd
  4276   001224  EC81  F00B         	call	_I2C_Write
  4277                           
  4278                           ;TAD_RTC.c: 52:     I2C_Write(decToBcd(hh));
  4279   001228  5072               	movf	RTC_SetTime@hh^0,w,c
  4280   00122A  ECBE  F00A         	call	_decToBcd
  4281   00122E  EC81  F00B         	call	_I2C_Write
  4282                           
  4283                           ;TAD_RTC.c: 53:     I2C_Stop_();
  4284   001232  ECCD  F00B         	call	_I2C_Stop_	;wreg free
  4285   001236  0012               	return		;funcret
  4286   001238                     __end_of_RTC_SetTime:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function _RTC_SetDate *****************
  4290 ;; Defined at:
  4291 ;;		line 56 in file "TAD_RTC.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  dd              1    wreg     unsigned char 
  4294 ;;  mo              1    0[BANK0 ] unsigned char 
  4295 ;;  yy              1    1[BANK0 ] unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  dd              1   22[COMRAM] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1
  4307 ;;      Params:         0       2       0
  4308 ;;      Locals:         1       0       0
  4309 ;;      Temps:          0       0       0
  4310 ;;      Totals:         1       2       0
  4311 ;;Total ram usage:        3 bytes
  4312 ;; Hardware stack levels used: 1
  4313 ;; Hardware stack levels required when called: 7
  4314 ;; This function calls:
  4315 ;;		_I2C_Stop_
  4316 ;;		_I2C_Write
  4317 ;;		_StartI2C
  4318 ;;		_decToBcd
  4319 ;; This function is called by:
  4320 ;;		_parsejaInitialize
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text17
  4325   001238                     __ptext17:
  4326                           	callstack 0
  4327   001238                     _RTC_SetDate:
  4328                           	callstack 20
  4329                           
  4330                           ;incstack = 0
  4331                           ;RTC_SetDate@dd stored from wreg
  4332   001238  6E72               	movwf	RTC_SetDate@dd^0,c
  4333                           
  4334                           ;TAD_RTC.c: 57:     StartI2C(0xD0);
  4335   00123A  0ED0               	movlw	208
  4336   00123C  EC76  F00B         	call	_StartI2C
  4337                           
  4338                           ;TAD_RTC.c: 58:     I2C_Write(0x04);
  4339   001240  0E04               	movlw	4
  4340   001242  EC81  F00B         	call	_I2C_Write
  4341                           
  4342                           ;TAD_RTC.c: 59:     I2C_Write(decToBcd(dd));
  4343   001246  5072               	movf	RTC_SetDate@dd^0,w,c
  4344   001248  ECBE  F00A         	call	_decToBcd
  4345   00124C  EC81  F00B         	call	_I2C_Write
  4346                           
  4347                           ;TAD_RTC.c: 60:     I2C_Write(decToBcd(mo));
  4348   001250  0100               	movlb	0	; () banked
  4349   001252  51E7               	movf	RTC_SetDate@mo& (0+255),w,b
  4350   001254  ECBE  F00A         	call	_decToBcd
  4351   001258  EC81  F00B         	call	_I2C_Write
  4352                           
  4353                           ;TAD_RTC.c: 61:     I2C_Write(decToBcd(yy));
  4354   00125C  0100               	movlb	0	; () banked
  4355   00125E  51E8               	movf	RTC_SetDate@yy& (0+255),w,b
  4356   001260  ECBE  F00A         	call	_decToBcd
  4357   001264  EC81  F00B         	call	_I2C_Write
  4358                           
  4359                           ;TAD_RTC.c: 62:     I2C_Stop_();
  4360   001268  ECCD  F00B         	call	_I2C_Stop_	;wreg free
  4361   00126C  0012               	return		;funcret
  4362   00126E                     __end_of_RTC_SetDate:
  4363                           	callstack 0
  4364                           
  4365 ;; *************** function _decToBcd *****************
  4366 ;; Defined at:
  4367 ;;		line 13 in file "TAD_RTC.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  val             1    wreg     unsigned char 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  val             1   21[COMRAM] unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  1    wreg      unsigned char 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0, cstack
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1
  4381 ;;      Params:         0       0       0
  4382 ;;      Locals:         1       0       0
  4383 ;;      Temps:          2       0       0
  4384 ;;      Totals:         3       0       0
  4385 ;;Total ram usage:        3 bytes
  4386 ;; Hardware stack levels used: 1
  4387 ;; Hardware stack levels required when called: 5
  4388 ;; This function calls:
  4389 ;;		___lbdiv
  4390 ;;		___lbmod
  4391 ;; This function is called by:
  4392 ;;		_RTC_SetTime
  4393 ;;		_RTC_SetDate
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text18
  4398   00157C                     __ptext18:
  4399                           	callstack 0
  4400   00157C                     _decToBcd:
  4401                           	callstack 21
  4402                           
  4403                           ;incstack = 0
  4404                           ;decToBcd@val stored from wreg
  4405   00157C  6E71               	movwf	decToBcd@val^0,c
  4406                           
  4407                           ;TAD_RTC.c: 14:     return (unsigned char)(((val / 10) << 4) | (val % 10));
  4408   00157E  0E0A               	movlw	10
  4409   001580  6E6B               	movwf	___lbmod@divisor^0,c
  4410   001582  5071               	movf	decToBcd@val^0,w,c
  4411   001584  ECE4  F009         	call	___lbmod
  4412   001588  6E6F               	movwf	??_decToBcd^0,c
  4413   00158A  0E0A               	movlw	10
  4414   00158C  6E67               	movwf	___lbdiv@divisor^0,c
  4415   00158E  5071               	movf	decToBcd@val^0,w,c
  4416   001590  ECC9  F008         	call	___lbdiv
  4417   001594  6E70               	movwf	(??_decToBcd+1)^0,c
  4418   001596  3870               	swapf	(??_decToBcd+1)^0,w,c
  4419   001598  0BF0               	andlw	240
  4420   00159A  106F               	iorwf	??_decToBcd^0,w,c
  4421   00159C  0012               	return		;funcret
  4422   00159E                     __end_of_decToBcd:
  4423                           	callstack 0
  4424                           
  4425 ;; *************** function _identificaComanda *****************
  4426 ;; Defined at:
  4427 ;;		line 300 in file "TAD_SISTEMA.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  comanda         1   17[COMRAM] PTR unsigned char 
  4430 ;;		 -> rxBuffer(64), 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      unsigned char 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 3F/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1
  4442 ;;      Params:         1       0       0
  4443 ;;      Locals:         0       0       0
  4444 ;;      Temps:          0       0       0
  4445 ;;      Totals:         1       0       0
  4446 ;;Total ram usage:        1 bytes
  4447 ;; Hardware stack levels used: 1
  4448 ;; Hardware stack levels required when called: 5
  4449 ;; This function calls:
  4450 ;;		_iniciaAmb
  4451 ;; This function is called by:
  4452 ;;		_processaComanda
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           	psect	text19
  4457   000BD2                     __ptext19:
  4458                           	callstack 0
  4459   000BD2                     _identificaComanda:
  4460                           	callstack 23
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;TAD_SISTEMA.c: 301:     if (iniciaAmb(comanda, "INITIALIZE:")) return CMD_ID_INITIALIZE
      +                          ;
  4464                           
  4465                           ;incstack = 0
  4466   000BD2  C06D  F067         	movff	identificaComanda@comanda,iniciaAmb@entrada
  4467   000BD6  0E29               	movlw	low STR_9
  4468   000BD8  6E68               	movwf	iniciaAmb@prefix^0,c
  4469   000BDA  ECAD  F007         	call	_iniciaAmb	;wreg free
  4470   000BDE  0900               	iorlw	0
  4471   000BE0  B4D8               	btfsc	status,2,c
  4472   000BE2  D002               	goto	l3356
  4473   000BE4  0E01               	movlw	1
  4474   000BE6  0012               	return	
  4475   000BE8                     l3356:
  4476                           
  4477                           ;TAD_SISTEMA.c: 302:     if (iniciaAmb(comanda, "SET_TIME:")) return CMD_ID_SET_TIME;
  4478   000BE8  C06D  F067         	movff	identificaComanda@comanda,iniciaAmb@entrada
  4479   000BEC  0E4A               	movlw	low STR_11
  4480   000BEE  6E68               	movwf	iniciaAmb@prefix^0,c
  4481   000BF0  ECAD  F007         	call	_iniciaAmb	;wreg free
  4482   000BF4  0900               	iorlw	0
  4483   000BF6  B4D8               	btfsc	status,2,c
  4484   000BF8  D002               	goto	l3362
  4485   000BFA  0E02               	movlw	2
  4486   000BFC  0012               	return	
  4487   000BFE                     l3362:
  4488                           
  4489                           ;TAD_SISTEMA.c: 303:     if (iniciaAmb(comanda, "GET_LOGS")) return CMD_ID_GET_LOGS;
  4490   000BFE  C06D  F067         	movff	identificaComanda@comanda,iniciaAmb@entrada
  4491   000C02  0E70               	movlw	low STR_13
  4492   000C04  6E68               	movwf	iniciaAmb@prefix^0,c
  4493   000C06  ECAD  F007         	call	_iniciaAmb	;wreg free
  4494   000C0A  0900               	iorlw	0
  4495   000C0C  B4D8               	btfsc	status,2,c
  4496   000C0E  D002               	goto	l3368
  4497   000C10  0E03               	movlw	3
  4498   000C12  0012               	return	
  4499   000C14                     l3368:
  4500                           
  4501                           ;TAD_SISTEMA.c: 304:     if (iniciaAmb(comanda, "GET_GRAPH")) return CMD_ID_GET_GRAPH;
  4502   000C14  C06D  F067         	movff	identificaComanda@comanda,iniciaAmb@entrada
  4503   000C18  0E54               	movlw	low STR_15
  4504   000C1A  6E68               	movwf	iniciaAmb@prefix^0,c
  4505   000C1C  ECAD  F007         	call	_iniciaAmb	;wreg free
  4506   000C20  0900               	iorlw	0
  4507   000C22  B4D8               	btfsc	status,2,c
  4508   000C24  D002               	goto	l3374
  4509   000C26  0E04               	movlw	4
  4510   000C28  0012               	return	
  4511   000C2A                     l3374:
  4512                           
  4513                           ;TAD_SISTEMA.c: 305:     if (iniciaAmb(comanda, "RESET")) return CMD_ID_RESET;
  4514   000C2A  C06D  F067         	movff	identificaComanda@comanda,iniciaAmb@entrada
  4515   000C2E  0E97               	movlw	low STR_17
  4516   000C30  6E68               	movwf	iniciaAmb@prefix^0,c
  4517   000C32  ECAD  F007         	call	_iniciaAmb	;wreg free
  4518   000C36  0900               	iorlw	0
  4519   000C38  B4D8               	btfsc	status,2,c
  4520   000C3A  D002               	goto	l3380
  4521   000C3C  0E05               	movlw	5
  4522   000C3E  0012               	return	
  4523   000C40                     l3380:
  4524                           
  4525                           ;TAD_SISTEMA.c: 306:     return CMD_ID_INVALID;
  4526   000C40  0E00               	movlw	0
  4527   000C42  0012               	return		;funcret
  4528   000C44                     __end_of_identificaComanda:
  4529                           	callstack 0
  4530                           
  4531 ;; *************** function _iniciaAmb *****************
  4532 ;; Defined at:
  4533 ;;		line 243 in file "TAD_SISTEMA.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  entrada         1   11[COMRAM] PTR const unsigned char 
  4536 ;;		 -> rxBuffer(64), 
  4537 ;;  prefix          1   12[COMRAM] PTR const unsigned char 
  4538 ;;		 -> STR_18(6), STR_16(10), STR_14(9), STR_12(10), 
  4539 ;;		 -> STR_10(12), 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               2   15[COMRAM] int 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      unsigned char 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1
  4551 ;;      Params:         2       0       0
  4552 ;;      Locals:         2       0       0
  4553 ;;      Temps:          2       0       0
  4554 ;;      Totals:         6       0       0
  4555 ;;Total ram usage:        6 bytes
  4556 ;; Hardware stack levels used: 1
  4557 ;; Hardware stack levels required when called: 4
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_identificaComanda
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text20
  4566   000F5A                     __ptext20:
  4567                           	callstack 0
  4568   000F5A                     _iniciaAmb:
  4569                           	callstack 23
  4570                           
  4571                           ;TAD_SISTEMA.c: 244:     int i = 0;
  4572                           
  4573                           ;incstack = 0
  4574   000F5A  0E00               	movlw	0
  4575   000F5C  6E6C               	movwf	(iniciaAmb@i+1)^0,c
  4576   000F5E  0E00               	movlw	0
  4577   000F60  6E6B               	movwf	iniciaAmb@i^0,c
  4578                           
  4579                           ;TAD_SISTEMA.c: 245:     while (prefix[i] != '\0') {
  4580   000F62  D016               	goto	l3190
  4581   000F64                     l3182:
  4582                           
  4583                           ;TAD_SISTEMA.c: 246:         if (entrada[i] != prefix[i]) return 0;
  4584   000F64  5067               	movf	iniciaAmb@entrada^0,w,c
  4585   000F66  246B               	addwf	iniciaAmb@i^0,w,c
  4586   000F68  6ED9               	movwf	fsr2l,c
  4587   000F6A  6ADA               	clrf	fsr2h,c
  4588   000F6C  50DF               	movf	indf2,w,c
  4589   000F6E  6E69               	movwf	??_iniciaAmb^0,c
  4590   000F70  5068               	movf	iniciaAmb@prefix^0,w,c
  4591   000F72  246B               	addwf	iniciaAmb@i^0,w,c
  4592   000F74  6E6A               	movwf	(??_iniciaAmb+1)^0,c
  4593   000F76  C06A  FFF6         	movff	??_iniciaAmb+1,tblptrl
  4594   000F7A                     	if	1	;There is more than 1 active tblptr byte
  4595   000F7A  0E02               	movlw	high __psmallconst
  4596   000F7C  6EF7               	movwf	tblptrh,c
  4597   000F7E                     	endif
  4598   000F7E                     	if	0	;tblptru may be non-zero
  4599   000F7E                     	endif
  4600   000F7E                     	if	0	;tblptru may be non-zero
  4601   000F7E                     	endif
  4602   000F7E  0008               	tblrd		*
  4603   000F80  50F5               	movf	tablat,w,c
  4604   000F82  1869               	xorwf	??_iniciaAmb^0,w,c
  4605   000F84  B4D8               	btfsc	status,2,c
  4606   000F86  D002               	goto	l3188
  4607   000F88  0E00               	movlw	0
  4608   000F8A  0012               	return	
  4609   000F8C                     l3188:
  4610                           
  4611                           ;TAD_SISTEMA.c: 247:         i++;
  4612   000F8C  4A6B               	infsnz	iniciaAmb@i^0,f,c
  4613   000F8E  2A6C               	incf	(iniciaAmb@i+1)^0,f,c
  4614   000F90                     l3190:
  4615                           
  4616                           ;TAD_SISTEMA.c: 245:     while (prefix[i] != '\0') {
  4617   000F90  5068               	movf	iniciaAmb@prefix^0,w,c
  4618   000F92  246B               	addwf	iniciaAmb@i^0,w,c
  4619   000F94  6E69               	movwf	??_iniciaAmb^0,c
  4620   000F96  C069  FFF6         	movff	??_iniciaAmb,tblptrl
  4621   000F9A                     	if	1	;There is more than 1 active tblptr byte
  4622   000F9A  0E02               	movlw	high __psmallconst
  4623   000F9C  6EF7               	movwf	tblptrh,c
  4624   000F9E                     	endif
  4625   000F9E                     	if	0	;tblptru may be non-zero
  4626   000F9E                     	endif
  4627   000F9E                     	if	0	;tblptru may be non-zero
  4628   000F9E                     	endif
  4629   000F9E  0008               	tblrd		*
  4630   000FA0  50F5               	movf	tablat,w,c
  4631   000FA2  0900               	iorlw	0
  4632   000FA4  A4D8               	btfss	status,2,c
  4633   000FA6  D7DE               	goto	l3182
  4634                           
  4635                           ;TAD_SISTEMA.c: 249:     return 1;
  4636   000FA8  0E01               	movlw	1
  4637   000FAA  0012               	return		;funcret
  4638   000FAC                     __end_of_iniciaAmb:
  4639                           	callstack 0
  4640                           
  4641 ;; *************** function _RAM_DemanaLlegir *****************
  4642 ;; Defined at:
  4643 ;;		line 127 in file "TAD_RAM.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1
  4657 ;;      Params:         0       0       0
  4658 ;;      Locals:         0       0       0
  4659 ;;      Temps:          0       0       0
  4660 ;;      Totals:         0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used: 1
  4663 ;; Hardware stack levels required when called: 4
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_processaComanda
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text21
  4672   0017E6                     __ptext21:
  4673                           	callstack 0
  4674   0017E6                     _RAM_DemanaLlegir:
  4675                           	callstack 24
  4676                           
  4677                           ;TAD_RAM.c: 128:     if (pendingReadRequest == 0) {
  4678                           
  4679                           ;incstack = 0
  4680   0017E6  502A               	movf	_pendingReadRequest@TAD_RAM$F1961^0,w,c
  4681   0017E8  A4D8               	btfss	status,2,c
  4682   0017EA  0012               	return	
  4683                           
  4684                           ;TAD_RAM.c: 129:         pendingReadRequest = 1;
  4685   0017EC  0E01               	movlw	1
  4686   0017EE  6E2A               	movwf	_pendingReadRequest@TAD_RAM$F1961^0,c
  4687   0017F0  0012               	return		;funcret
  4688   0017F2                     __end_of_RAM_DemanaLlegir:
  4689                           	callstack 0
  4690                           
  4691 ;; *************** function _EEPROM_DemanaLlegirLogs *****************
  4692 ;; Defined at:
  4693 ;;		line 73 in file "TAD_EEPROM.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;		None
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;		None
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      void 
  4700 ;; Registers used:
  4701 ;;		wreg, status,2
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1
  4707 ;;      Params:         0       0       0
  4708 ;;      Locals:         0       0       0
  4709 ;;      Temps:          0       0       0
  4710 ;;      Totals:         0       0       0
  4711 ;;Total ram usage:        0 bytes
  4712 ;; Hardware stack levels used: 1
  4713 ;; Hardware stack levels required when called: 4
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_processaComanda
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text22
  4722   0017F2                     __ptext22:
  4723                           	callstack 0
  4724   0017F2                     _EEPROM_DemanaLlegirLogs:
  4725                           	callstack 24
  4726                           
  4727                           ;TAD_EEPROM.c: 74:     if (pendingReadRequest == 0) {
  4728                           
  4729                           ;incstack = 0
  4730   0017F2  503F               	movf	_pendingReadRequest^0,w,c
  4731   0017F4  A4D8               	btfss	status,2,c
  4732   0017F6  0012               	return	
  4733                           
  4734                           ;TAD_EEPROM.c: 75:         pendingReadRequest = 1;
  4735   0017F8  0E01               	movlw	1
  4736   0017FA  6E3F               	movwf	_pendingReadRequest^0,c
  4737   0017FC  0012               	return		;funcret
  4738   0017FE                     __end_of_EEPROM_DemanaLlegirLogs:
  4739                           	callstack 0
  4740                           
  4741 ;; *************** function _SIO_Receive *****************
  4742 ;; Defined at:
  4743 ;;		line 29 in file "TAD_SIO.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  character       1   11[COMRAM] PTR unsigned char 
  4746 ;;		 -> received(1), 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      unsigned char 
  4751 ;; Registers used:
  4752 ;;		wreg, fsr2l, fsr2h, status,2
  4753 ;; Tracked objects:
  4754 ;;		On entry : 3F/0
  4755 ;;		On exit  : 3F/0
  4756 ;;		Unchanged: 3F/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1
  4758 ;;      Params:         1       0       0
  4759 ;;      Locals:         0       0       0
  4760 ;;      Temps:          0       0       0
  4761 ;;      Totals:         1       0       0
  4762 ;;Total ram usage:        1 bytes
  4763 ;; Hardware stack levels used: 1
  4764 ;; Hardware stack levels required when called: 4
  4765 ;; This function calls:
  4766 ;;		Nothing
  4767 ;; This function is called by:
  4768 ;;		_SIS_Motor
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           	psect	text23
  4773   0016AA                     __ptext23:
  4774                           	callstack 0
  4775   0016AA                     _SIO_Receive:
  4776                           	callstack 25
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;TAD_SIO.c: 30:     if (PIR1bits.RCIF) {
  4780                           
  4781                           ;incstack = 0
  4782   0016AA  AA9E               	btfss	158,5,c	;volatile
  4783   0016AC  D007               	goto	l3562
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;TAD_SIO.c: 31:         *character = RCREG;
  4787   0016AE  5067               	movf	SIO_Receive@character^0,w,c
  4788   0016B0  6ED9               	movwf	fsr2l,c
  4789   0016B2  6ADA               	clrf	fsr2h,c
  4790   0016B4  CFAE FFDF          	movff	4014,indf2	;volatile
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;TAD_SIO.c: 32:         return 1;
  4794   0016B8  0E01               	movlw	1
  4795   0016BA  0012               	return	
  4796   0016BC                     l3562:
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;TAD_SIO.c: 34:     return 0;
  4800   0016BC  0E00               	movlw	0
  4801                           
  4802                           ; BSR set to: 0
  4803   0016BE  0012               	return		;funcret
  4804   0016C0                     __end_of_SIO_Receive:
  4805                           	callstack 0
  4806                           
  4807 ;; *************** function _SIS_Init *****************
  4808 ;; Defined at:
  4809 ;;		line 40 in file "TAD_SISTEMA.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1
  4823 ;;      Params:         0       0       0
  4824 ;;      Locals:         0       0       0
  4825 ;;      Temps:          0       0       0
  4826 ;;      Totals:         0       0       0
  4827 ;;Total ram usage:        0 bytes
  4828 ;; Hardware stack levels used: 1
  4829 ;; Hardware stack levels required when called: 5
  4830 ;; This function calls:
  4831 ;;		_TI_NewTimer
  4832 ;;		_TI_ResetTics
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text24
  4839   00126E                     __ptext24:
  4840                           	callstack 0
  4841   00126E                     _SIS_Init:
  4842                           	callstack 25
  4843                           
  4844                           ;TAD_SISTEMA.c: 41:     TI_NewTimer(&timerRebots);
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;incstack = 0
  4848   00126E  0E5B               	movlw	low _timerRebots
  4849   001270  6E67               	movwf	TI_NewTimer@TimerHandle^0,c
  4850   001272  EC8F  F008         	call	_TI_NewTimer	;wreg free
  4851                           
  4852                           ;TAD_SISTEMA.c: 42:     TI_NewTimer(&timerTemperatura);
  4853   001276  0E53               	movlw	low _timerTemperatura
  4854   001278  6E67               	movwf	TI_NewTimer@TimerHandle^0,c
  4855   00127A  EC8F  F008         	call	_TI_NewTimer	;wreg free
  4856                           
  4857                           ;TAD_SISTEMA.c: 43:     TI_ResetTics(timerRebots);
  4858   00127E  505B               	movf	_timerRebots^0,w,c
  4859   001280  EC57  F00A         	call	_TI_ResetTics
  4860                           
  4861                           ;TAD_SISTEMA.c: 44:     TI_ResetTics(timerTemperatura);
  4862   001284  5053               	movf	_timerTemperatura^0,w,c
  4863   001286  EC57  F00A         	call	_TI_ResetTics
  4864                           
  4865                           ;TAD_SISTEMA.c: 46:     TRISBbits.TRISB0 = 1;
  4866   00128A  8093               	bsf	147,0,c	;volatile
  4867                           
  4868                           ;TAD_SISTEMA.c: 47:     INTCON2bits.RBPU = 0;
  4869   00128C  9EF1               	bcf	241,7,c	;volatile
  4870                           
  4871                           ;TAD_SISTEMA.c: 48:     previousButton = 1;
  4872   00128E  0E01               	movlw	1
  4873   001290  6E73               	movwf	_previousButton^0,c
  4874                           
  4875                           ;TAD_SISTEMA.c: 49:     systemInitialized = 0;
  4876   001292  6A50               	clrf	_systemInitialized^0,c
  4877                           
  4878                           ;TAD_SISTEMA.c: 50:     flag_rtc = 0;
  4879   001294  6A49               	clrf	_flag_rtc^0,c
  4880                           
  4881                           ;TAD_SISTEMA.c: 52:     ADCON1 = 0x0B;
  4882   001296  0E0B               	movlw	11
  4883   001298  6EC1               	movwf	193,c	;volatile
  4884   00129A  0012               	return		;funcret
  4885   00129C                     __end_of_SIS_Init:
  4886                           	callstack 0
  4887                           
  4888 ;; *************** function _SIS_ControlTemperatura *****************
  4889 ;; Defined at:
  4890 ;;		line 126 in file "TAD_SISTEMA.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1
  4904 ;;      Params:         0       0       0
  4905 ;;      Locals:         0       0       0
  4906 ;;      Temps:          0       8       0
  4907 ;;      Totals:         0       8       0
  4908 ;;Total ram usage:        8 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; Hardware stack levels required when called: 8
  4911 ;; This function calls:
  4912 ;;		_EEPROM_DemanaDesarLog
  4913 ;;		_FAN_SetDutyFan0
  4914 ;;		_FAN_SetDutyFan1
  4915 ;;		_RAM_DemanaDesar
  4916 ;;		_RGB_SetColor
  4917 ;;		_RGB_SetColorAlternatCritic
  4918 ;;		_TI_GetTics
  4919 ;;		_TI_ResetTics
  4920 ;; This function is called by:
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text25
  4926   00055C                     __ptext25:
  4927                           	callstack 0
  4928   00055C                     _SIS_ControlTemperatura:
  4929                           	callstack 22
  4930                           
  4931                           ;TAD_SISTEMA.c: 127:     static char state = 0;;TAD_SISTEMA.c: 128:     static char temp
      +                          eratura = 0;;TAD_SISTEMA.c: 129:     static unsigned char estat_anterior = 0;;TAD_SISTEM
      +                          A.c: 132:     if (!systemInitialized) return;
  4932                           
  4933                           ;incstack = 0
  4934   00055C  5050               	movf	_systemInitialized^0,w,c
  4935   00055E  B4D8               	btfsc	status,2,c
  4936   000560  0012               	return	
  4937   000562  D096               	goto	l4606
  4938   000564                     l4548:
  4939                           
  4940                           ;TAD_SISTEMA.c: 136:             TI_ResetTics(timerTemperatura);
  4941   000564  5053               	movf	_timerTemperatura^0,w,c
  4942   000566  EC57  F00A         	call	_TI_ResetTics
  4943                           
  4944                           ;TAD_SISTEMA.c: 137:             state = 1;
  4945   00056A  0E01               	movlw	1
  4946   00056C  6E45               	movwf	SIS_ControlTemperatura@state^0,c
  4947                           
  4948                           ;TAD_SISTEMA.c: 138:             break;
  4949   00056E  0012               	return	
  4950   000570                     l4552:
  4951                           
  4952                           ;TAD_SISTEMA.c: 141:             if (TI_GetTics(timerTemperatura) >= 1000 * tempsMostrei
      +                          g) {
  4953   000570  504E               	movf	_tempsMostreig^0,w,c
  4954   000572  0100               	movlb	0	; () banked
  4955   000574  6FEC               	movwf	??_SIS_ControlTemperatura& (0+255),b
  4956   000576  6BED               	clrf	(??_SIS_ControlTemperatura+1)& (0+255),b
  4957   000578  0EE8               	movlw	232
  4958   00057A  03EC               	mulwf	??_SIS_ControlTemperatura& (0+255),b
  4959   00057C  CFF3 F0EE          	movff	prodl,??_SIS_ControlTemperatura+2
  4960   000580  CFF4 F0EF          	movff	prodh,??_SIS_ControlTemperatura+3
  4961   000584  03ED               	mulwf	(??_SIS_ControlTemperatura+1)& (0+255),b
  4962   000586  50F3               	movf	prodl,w,c
  4963   000588  27EF               	addwf	(??_SIS_ControlTemperatura+3)& (0+255),f,b
  4964   00058A  0E03               	movlw	3
  4965   00058C  03EC               	mulwf	??_SIS_ControlTemperatura& (0+255),b
  4966   00058E  50F3               	movf	prodl,w,c
  4967   000590  27EF               	addwf	(??_SIS_ControlTemperatura+3)& (0+255),f,b
  4968   000592  C0EE  F0F0         	movff	??_SIS_ControlTemperatura+2,??_SIS_ControlTemperatura+4
  4969   000596  C0EF  F0F1         	movff	??_SIS_ControlTemperatura+3,??_SIS_ControlTemperatura+5
  4970   00059A  0E00               	movlw	0
  4971   00059C  BFF1               	btfsc	(??_SIS_ControlTemperatura+5)& (0+255),7,b
  4972   00059E  0EFF               	movlw	255
  4973   0005A0  6FF2               	movwf	(??_SIS_ControlTemperatura+6)& (0+255),b
  4974   0005A2  6FF3               	movwf	(??_SIS_ControlTemperatura+7)& (0+255),b
  4975   0005A4  5053               	movf	_timerTemperatura^0,w,c
  4976   0005A6  ECFE  F007         	call	_TI_GetTics
  4977   0005AA  51F0               	movf	(??_SIS_ControlTemperatura+4)& (0+255),w,b
  4978   0005AC  5C67               	subwf	?_TI_GetTics^0,w,c
  4979   0005AE  51F1               	movf	(??_SIS_ControlTemperatura+5)& (0+255),w,b
  4980   0005B0  5868               	subwfb	(?_TI_GetTics+1)^0,w,c
  4981   0005B2  51F2               	movf	(??_SIS_ControlTemperatura+6)& (0+255),w,b
  4982   0005B4  5869               	subwfb	(?_TI_GetTics+2)^0,w,c
  4983   0005B6  51F3               	movf	(??_SIS_ControlTemperatura+7)& (0+255),w,b
  4984   0005B8  586A               	subwfb	(?_TI_GetTics+3)^0,w,c
  4985   0005BA  A0D8               	btfss	status,0,c
  4986   0005BC  0012               	return	
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;TAD_SISTEMA.c: 142:                 ADCON0bits.CHS = 2;
  4990   0005BE  50C2               	movf	194,w,c	;volatile
  4991   0005C0  0BC3               	andlw	-61
  4992   0005C2  0908               	iorlw	8
  4993   0005C4  6EC2               	movwf	194,c	;volatile
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;TAD_SISTEMA.c: 143:                 ADCON0bits.GO = 1;
  4997   0005C6  82C2               	bsf	194,1,c	;volatile
  4998                           
  4999                           ;TAD_SISTEMA.c: 144:                 state = 2;
  5000   0005C8  0E02               	movlw	2
  5001   0005CA  6E45               	movwf	SIS_ControlTemperatura@state^0,c
  5002   0005CC  0012               	return	
  5003   0005CE                     l410:
  5004                           
  5005                           ;TAD_SISTEMA.c: 149:             if (!ADCON0bits.GO) {
  5006   0005CE  B2C2               	btfsc	194,1,c	;volatile
  5007   0005D0  0012               	return	
  5008                           
  5009                           ;TAD_SISTEMA.c: 150:                 temperatura = ADRESH - 50;
  5010   0005D2  50C4               	movf	196,w,c	;volatile
  5011   0005D4  0FCE               	addlw	206
  5012   0005D6  6E44               	movwf	SIS_ControlTemperatura@temperatura^0,c
  5013                           
  5014                           ;TAD_SISTEMA.c: 153:                 if (temperatura > 50) {
  5015   0005D8  0E32               	movlw	50
  5016   0005DA  6444               	cpfsgt	SIS_ControlTemperatura@temperatura^0,c
  5017   0005DC  D004               	goto	l4564
  5018   0005DE                     u2990:
  5019                           
  5020                           ;TAD_SISTEMA.c: 154:                     ADCON0bits.CHS = 0;
  5021   0005DE  0EC3               	movlw	-61
  5022   0005E0  16C2               	andwf	194,f,c	;volatile
  5023                           
  5024                           ;TAD_SISTEMA.c: 155:                     state = 0;
  5025   0005E2  6A45               	clrf	SIS_ControlTemperatura@state^0,c
  5026                           
  5027                           ;TAD_SISTEMA.c: 156:                     break;
  5028   0005E4  0012               	return	
  5029   0005E6                     l4564:
  5030                           
  5031                           ;TAD_SISTEMA.c: 159:                 RAM_DemanaDesar(temperatura);
  5032   0005E6  5044               	movf	SIS_ControlTemperatura@temperatura^0,w,c
  5033   0005E8  ECE5  F00B         	call	_RAM_DemanaDesar
  5034                           
  5035                           ;TAD_SISTEMA.c: 161:                 if (temperatura < llindarLow) {
  5036   0005EC  504D               	movf	_llindarLow^0,w,c
  5037   0005EE  5C44               	subwf	SIS_ControlTemperatura@temperatura^0,w,c
  5038   0005F0  B0D8               	btfsc	status,0,c
  5039   0005F2  D00F               	goto	l4574
  5040                           
  5041                           ;TAD_SISTEMA.c: 162:                     FAN_SetDutyFan0(50);
  5042   0005F4  0E32               	movlw	50
  5043   0005F6  ECA9  F00B         	call	_FAN_SetDutyFan0
  5044                           
  5045                           ;TAD_SISTEMA.c: 163:                     FAN_SetDutyFan1(0);
  5046   0005FA  0E00               	movlw	0
  5047   0005FC  ECA0  F00B         	call	_FAN_SetDutyFan1
  5048                           
  5049                           ;TAD_SISTEMA.c: 164:                     RGB_SetColor(0, 1, 0);
  5050   000600  0E01               	movlw	1
  5051   000602  6E67               	movwf	RGB_SetColor@g^0,c
  5052   000604  0E00               	movlw	0
  5053   000606  6E68               	movwf	RGB_SetColor@b^0,c
  5054   000608  0E00               	movlw	0
  5055   00060A  EC97  F00B         	call	_RGB_SetColor
  5056   00060E                     l4572:
  5057                           
  5058                           ;TAD_SISTEMA.c: 165:                     estat_anterior = 0;
  5059   00060E  6A43               	clrf	SIS_ControlTemperatura@estat_anterior^0,c
  5060                           
  5061                           ;TAD_SISTEMA.c: 166:                 } else if (temperatura < llindarModerate) {
  5062   000610  D7E6               	goto	u2990
  5063   000612                     l4574:
  5064   000612  504C               	movf	_llindarModerate^0,w,c
  5065   000614  5C44               	subwf	SIS_ControlTemperatura@temperatura^0,w,c
  5066   000616  B0D8               	btfsc	status,0,c
  5067   000618  D00E               	goto	l4582
  5068                           
  5069                           ;TAD_SISTEMA.c: 167:                     FAN_SetDutyFan0(50);
  5070   00061A  0E32               	movlw	50
  5071   00061C  ECA9  F00B         	call	_FAN_SetDutyFan0
  5072                           
  5073                           ;TAD_SISTEMA.c: 168:                     FAN_SetDutyFan1(50);
  5074   000620  0E32               	movlw	50
  5075   000622  ECA0  F00B         	call	_FAN_SetDutyFan1
  5076                           
  5077                           ;TAD_SISTEMA.c: 169:                     RGB_SetColor(0, 0, 1);
  5078   000626  0E00               	movlw	0
  5079   000628  6E67               	movwf	RGB_SetColor@g^0,c
  5080   00062A  0E01               	movlw	1
  5081   00062C  6E68               	movwf	RGB_SetColor@b^0,c
  5082   00062E  0E00               	movlw	0
  5083   000630  EC97  F00B         	call	_RGB_SetColor
  5084   000634  D7EC               	goto	l4572
  5085   000636                     l4582:
  5086   000636  504B               	movf	_llindarHigh^0,w,c
  5087   000638  5C44               	subwf	SIS_ControlTemperatura@temperatura^0,w,c
  5088   00063A  B0D8               	btfsc	status,0,c
  5089   00063C  D00E               	goto	l4590
  5090                           
  5091                           ;TAD_SISTEMA.c: 172:                     FAN_SetDutyFan0(100);
  5092   00063E  0E64               	movlw	100
  5093   000640  ECA9  F00B         	call	_FAN_SetDutyFan0
  5094                           
  5095                           ;TAD_SISTEMA.c: 173:                     FAN_SetDutyFan1(100);
  5096   000644  0E64               	movlw	100
  5097   000646  ECA0  F00B         	call	_FAN_SetDutyFan1
  5098                           
  5099                           ;TAD_SISTEMA.c: 174:                     RGB_SetColor(1, 0, 0);
  5100   00064A  0E00               	movlw	0
  5101   00064C  6E67               	movwf	RGB_SetColor@g^0,c
  5102   00064E  0E00               	movlw	0
  5103   000650  6E68               	movwf	RGB_SetColor@b^0,c
  5104   000652  0E01               	movlw	1
  5105   000654  EC97  F00B         	call	_RGB_SetColor
  5106   000658  D7DA               	goto	l4572
  5107   00065A                     l4590:
  5108                           
  5109                           ;TAD_SISTEMA.c: 177:                     FAN_SetDutyFan0(0);
  5110   00065A  0E00               	movlw	0
  5111   00065C  ECA9  F00B         	call	_FAN_SetDutyFan0
  5112                           
  5113                           ;TAD_SISTEMA.c: 178:                     FAN_SetDutyFan1(0);
  5114   000660  0E00               	movlw	0
  5115   000662  ECA0  F00B         	call	_FAN_SetDutyFan1
  5116                           
  5117                           ;TAD_SISTEMA.c: 179:                     RGB_SetColorAlternatCritic();
  5118   000666  ECFF  F00B         	call	_RGB_SetColorAlternatCritic	;wreg free
  5119                           
  5120                           ;TAD_SISTEMA.c: 180:                     if (estat_anterior == 0) {
  5121   00066A  5043               	movf	SIS_ControlTemperatura@estat_anterior^0,w,c
  5122   00066C  A4D8               	btfss	status,2,c
  5123   00066E  D7B7               	goto	u2990
  5124                           
  5125                           ;TAD_SISTEMA.c: 181:                         EEPROM_DemanaDesarLog(hora, minuts, segons,
      +                           dia, mes, any);
  5126   000670  C055  F0E7         	movff	_minuts,EEPROM_DemanaDesarLog@mm
  5127   000674  C054  F0E8         	movff	_segons,EEPROM_DemanaDesarLog@ss
  5128   000678  C057  F0E9         	movff	_dia,EEPROM_DemanaDesarLog@dd
  5129   00067C  C058  F0EA         	movff	_mes,EEPROM_DemanaDesarLog@mo
  5130   000680  C059  F0EB         	movff	_any,EEPROM_DemanaDesarLog@yyyy
  5131   000684  5056               	movf	_hora^0,w,c
  5132   000686  ECEC  F003         	call	_EEPROM_DemanaDesarLog
  5133                           
  5134                           ;TAD_SISTEMA.c: 182:                         estat_anterior = 1;
  5135   00068A  0E01               	movlw	1
  5136   00068C  6E43               	movwf	SIS_ControlTemperatura@estat_anterior^0,c
  5137   00068E  D7A7               	goto	u2990
  5138   000690                     l4606:
  5139   000690  5045               	movf	SIS_ControlTemperatura@state^0,w,c
  5140                           
  5141                           ; Switch size 1, requested type "simple"
  5142                           ; Number of cases is 3, Range of values is 0 to 2
  5143                           ; switch strategies available:
  5144                           ; Name         Instructions Cycles
  5145                           ; simple_byte           10     6 (average)
  5146                           ;	Chosen strategy is simple_byte
  5147   000692  0A00               	xorlw	0	; case 0
  5148   000694  B4D8               	btfsc	status,2,c
  5149   000696  D766               	goto	l4548
  5150   000698  0A01               	xorlw	1	; case 1
  5151   00069A  B4D8               	btfsc	status,2,c
  5152   00069C  D769               	goto	l4552
  5153   00069E  0A03               	xorlw	3	; case 2
  5154   0006A0  A4D8               	btfss	status,2,c
  5155   0006A2  0012               	return	
  5156   0006A4  D794               	goto	l410
  5157   0006A6                     __end_of_SIS_ControlTemperatura:
  5158                           	callstack 0
  5159                           
  5160 ;; *************** function _RGB_SetColorAlternatCritic *****************
  5161 ;; Defined at:
  5162 ;;		line 27 in file "TAD_RGB.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;		None
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1
  5176 ;;      Params:         0       0       0
  5177 ;;      Locals:         0       0       0
  5178 ;;      Temps:          0       0       0
  5179 ;;      Totals:         0       0       0
  5180 ;;Total ram usage:        0 bytes
  5181 ;; Hardware stack levels used: 1
  5182 ;; Hardware stack levels required when called: 5
  5183 ;; This function calls:
  5184 ;;		_TI_ResetTics
  5185 ;; This function is called by:
  5186 ;;		_SIS_ControlTemperatura
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text26
  5191   0017FE                     __ptext26:
  5192                           	callstack 0
  5193   0017FE                     _RGB_SetColorAlternatCritic:
  5194                           	callstack 24
  5195                           
  5196                           ;TAD_RGB.c: 28:     estatCritic = 1;
  5197                           
  5198                           ;incstack = 0
  5199   0017FE  0E01               	movlw	1
  5200   001800  6E2D               	movwf	_estatCritic^0,c
  5201                           
  5202                           ;TAD_RGB.c: 29:     TI_ResetTics(timerRGB);
  5203   001802  5051               	movf	_timerRGB^0,w,c
  5204   001804  EC57  F00A         	call	_TI_ResetTics
  5205   001808  0012               	return		;funcret
  5206   00180A                     __end_of_RGB_SetColorAlternatCritic:
  5207                           	callstack 0
  5208                           
  5209 ;; *************** function _RGB_SetColor *****************
  5210 ;; Defined at:
  5211 ;;		line 20 in file "TAD_RGB.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  r               1    wreg     unsigned char 
  5214 ;;  g               1   11[COMRAM] unsigned char 
  5215 ;;  b               1   12[COMRAM] unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  r               1   13[COMRAM] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1
  5227 ;;      Params:         2       0       0
  5228 ;;      Locals:         1       0       0
  5229 ;;      Temps:          0       0       0
  5230 ;;      Totals:         3       0       0
  5231 ;;Total ram usage:        3 bytes
  5232 ;; Hardware stack levels used: 1
  5233 ;; Hardware stack levels required when called: 4
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_SIS_ControlTemperatura
  5238 ;;		_resetCommand
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text27
  5243   00172E                     __ptext27:
  5244                           	callstack 0
  5245   00172E                     _RGB_SetColor:
  5246                           	callstack 23
  5247                           
  5248                           ;incstack = 0
  5249                           ;RGB_SetColor@r stored from wreg
  5250   00172E  6E69               	movwf	RGB_SetColor@r^0,c
  5251                           
  5252                           ;TAD_RGB.c: 21:     red = r;
  5253   001730  C069  F030         	movff	RGB_SetColor@r,_red
  5254                           
  5255                           ;TAD_RGB.c: 22:     green = g;
  5256   001734  C067  F02F         	movff	RGB_SetColor@g,_green
  5257                           
  5258                           ;TAD_RGB.c: 23:     blue = b;
  5259   001738  C068  F02E         	movff	RGB_SetColor@b,_blue
  5260                           
  5261                           ;TAD_RGB.c: 24:     estatCritic = 0;
  5262   00173C  6A2D               	clrf	_estatCritic^0,c
  5263   00173E  0012               	return		;funcret
  5264   001740                     __end_of_RGB_SetColor:
  5265                           	callstack 0
  5266                           
  5267 ;; *************** function _RAM_DemanaDesar *****************
  5268 ;; Defined at:
  5269 ;;		line 110 in file "TAD_RAM.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  temperatura     1    wreg     unsigned char 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  temperatura     1   13[COMRAM] unsigned char 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1
  5283 ;;      Params:         0       0       0
  5284 ;;      Locals:         1       0       0
  5285 ;;      Temps:          0       0       0
  5286 ;;      Totals:         1       0       0
  5287 ;;Total ram usage:        1 bytes
  5288 ;; Hardware stack levels used: 1
  5289 ;; Hardware stack levels required when called: 7
  5290 ;; This function calls:
  5291 ;;		_RAM_IncAddr
  5292 ;;		_RAM_Write
  5293 ;; This function is called by:
  5294 ;;		_SIS_ControlTemperatura
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text28
  5299   0017CA                     __ptext28:
  5300                           	callstack 0
  5301   0017CA                     _RAM_DemanaDesar:
  5302                           	callstack 22
  5303                           
  5304                           ;incstack = 0
  5305                           ;RAM_DemanaDesar@temperatura stored from wreg
  5306   0017CA  6E69               	movwf	RAM_DemanaDesar@temperatura^0,c
  5307                           
  5308                           ;TAD_RAM.c: 111:     RAM_Write(temperatura);
  5309   0017CC  5069               	movf	RAM_DemanaDesar@temperatura^0,w,c
  5310   0017CE  EC45  F00A         	call	_RAM_Write
  5311                           
  5312                           ;TAD_RAM.c: 112:     RAM_IncAddr();
  5313   0017D2  ECF8  F009         	call	_RAM_IncAddr	;wreg free
  5314   0017D6  0012               	return		;funcret
  5315   0017D8                     __end_of_RAM_DemanaDesar:
  5316                           	callstack 0
  5317                           
  5318 ;; *************** function _FAN_SetDutyFan1 *****************
  5319 ;; Defined at:
  5320 ;;		line 59 in file "TAD_FAN.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  duty            1    wreg     unsigned char 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  duty            1   11[COMRAM] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1
  5334 ;;      Params:         0       0       0
  5335 ;;      Locals:         1       0       0
  5336 ;;      Temps:          0       0       0
  5337 ;;      Totals:         1       0       0
  5338 ;;Total ram usage:        1 bytes
  5339 ;; Hardware stack levels used: 1
  5340 ;; Hardware stack levels required when called: 4
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_SIS_ControlTemperatura
  5345 ;;		_resetCommand
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text29
  5350   001740                     __ptext29:
  5351                           	callstack 0
  5352   001740                     _FAN_SetDutyFan1:
  5353                           	callstack 23
  5354                           
  5355                           ;incstack = 0
  5356                           ;FAN_SetDutyFan1@duty stored from wreg
  5357   001740  6E67               	movwf	FAN_SetDutyFan1@duty^0,c
  5358                           
  5359                           ;TAD_FAN.c: 60:     if (duty > 100) duty = 100;
  5360   001742  0E64               	movlw	100
  5361   001744  6467               	cpfsgt	FAN_SetDutyFan1@duty^0,c
  5362   001746  D002               	goto	l3140
  5363   001748  0E64               	movlw	100
  5364   00174A  6E67               	movwf	FAN_SetDutyFan1@duty^0,c
  5365   00174C                     l3140:
  5366                           
  5367                           ;TAD_FAN.c: 61:     dutyFan1 = duty;
  5368   00174C  C067  F034         	movff	FAN_SetDutyFan1@duty,_dutyFan1
  5369   001750  0012               	return		;funcret
  5370   001752                     __end_of_FAN_SetDutyFan1:
  5371                           	callstack 0
  5372                           
  5373 ;; *************** function _FAN_SetDutyFan0 *****************
  5374 ;; Defined at:
  5375 ;;		line 54 in file "TAD_FAN.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  duty            1    wreg     unsigned char 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  duty            1   11[COMRAM] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      void 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1
  5389 ;;      Params:         0       0       0
  5390 ;;      Locals:         1       0       0
  5391 ;;      Temps:          0       0       0
  5392 ;;      Totals:         1       0       0
  5393 ;;Total ram usage:        1 bytes
  5394 ;; Hardware stack levels used: 1
  5395 ;; Hardware stack levels required when called: 4
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_SIS_ControlTemperatura
  5400 ;;		_resetCommand
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text30
  5405   001752                     __ptext30:
  5406                           	callstack 0
  5407   001752                     _FAN_SetDutyFan0:
  5408                           	callstack 23
  5409                           
  5410                           ;incstack = 0
  5411                           ;FAN_SetDutyFan0@duty stored from wreg
  5412   001752  6E67               	movwf	FAN_SetDutyFan0@duty^0,c
  5413                           
  5414                           ;TAD_FAN.c: 55:     if (duty > 100) duty = 100;
  5415   001754  0E64               	movlw	100
  5416   001756  6467               	cpfsgt	FAN_SetDutyFan0@duty^0,c
  5417   001758  D002               	goto	l3134
  5418   00175A  0E64               	movlw	100
  5419   00175C  6E67               	movwf	FAN_SetDutyFan0@duty^0,c
  5420   00175E                     l3134:
  5421                           
  5422                           ;TAD_FAN.c: 56:     dutyFan0 = duty;
  5423   00175E  C067  F035         	movff	FAN_SetDutyFan0@duty,_dutyFan0
  5424   001762  0012               	return		;funcret
  5425   001764                     __end_of_FAN_SetDutyFan0:
  5426                           	callstack 0
  5427                           
  5428 ;; *************** function _EEPROM_DemanaDesarLog *****************
  5429 ;; Defined at:
  5430 ;;		line 23 in file "TAD_EEPROM.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  hh              1    wreg     unsigned char 
  5433 ;;  mm              1    0[BANK0 ] unsigned char 
  5434 ;;  ss              1    1[BANK0 ] unsigned char 
  5435 ;;  dd              1    2[BANK0 ] unsigned char 
  5436 ;;  mo              1    3[BANK0 ] unsigned char 
  5437 ;;  yyyy            1    4[BANK0 ] unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  hh              1   19[COMRAM] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1
  5449 ;;      Params:         0       5       0
  5450 ;;      Locals:         1       0       0
  5451 ;;      Temps:          0       0       0
  5452 ;;      Totals:         1       5       0
  5453 ;;Total ram usage:        6 bytes
  5454 ;; Hardware stack levels used: 1
  5455 ;; Hardware stack levels required when called: 5
  5456 ;; This function calls:
  5457 ;;		___lbdiv
  5458 ;;		___lbmod
  5459 ;; This function is called by:
  5460 ;;		_SIS_ControlTemperatura
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text31
  5465   0007D8                     __ptext31:
  5466                           	callstack 0
  5467   0007D8                     _EEPROM_DemanaDesarLog:
  5468                           	callstack 24
  5469                           
  5470                           ;incstack = 0
  5471                           ;EEPROM_DemanaDesarLog@hh stored from wreg
  5472   0007D8  6E6F               	movwf	EEPROM_DemanaDesarLog@hh^0,c
  5473                           
  5474                           ;TAD_EEPROM.c: 24:     if (desantLog) return;
  5475   0007DA  503B               	movf	_desantLog^0,w,c
  5476   0007DC  A4D8               	btfss	status,2,c
  5477   0007DE  0012               	return	
  5478                           
  5479                           ;TAD_EEPROM.c: 26:     logPend[0] = (hh / 10) + '0'; logPend[1] = (hh % 10) + '0';
  5480   0007E0  0E0A               	movlw	10
  5481   0007E2  6E67               	movwf	___lbdiv@divisor^0,c
  5482   0007E4  506F               	movf	EEPROM_DemanaDesarLog@hh^0,w,c
  5483   0007E6  ECC9  F008         	call	___lbdiv
  5484   0007EA  0F30               	addlw	48
  5485   0007EC  0100               	movlb	0	; () banked
  5486   0007EE  6F99               	movwf	_logPend& (0+255),b
  5487   0007F0  0E0A               	movlw	10
  5488   0007F2  6E6B               	movwf	___lbmod@divisor^0,c
  5489   0007F4  506F               	movf	EEPROM_DemanaDesarLog@hh^0,w,c
  5490   0007F6  ECE4  F009         	call	___lbmod
  5491   0007FA  0F30               	addlw	48
  5492   0007FC  0100               	movlb	0	; () banked
  5493   0007FE  6F9A               	movwf	(_logPend+1)& (0+255),b
  5494                           
  5495                           ;TAD_EEPROM.c: 27:     logPend[2] = (mm / 10) + '0'; logPend[3] = (mm % 10) + '0';
  5496   000800  0E0A               	movlw	10
  5497   000802  6E67               	movwf	___lbdiv@divisor^0,c
  5498   000804  51E7               	movf	EEPROM_DemanaDesarLog@mm& (0+255),w,b
  5499   000806  ECC9  F008         	call	___lbdiv
  5500   00080A  0F30               	addlw	48
  5501   00080C  0100               	movlb	0	; () banked
  5502   00080E  6F9B               	movwf	(_logPend+2)& (0+255),b
  5503   000810  0E0A               	movlw	10
  5504   000812  6E6B               	movwf	___lbmod@divisor^0,c
  5505   000814  51E7               	movf	EEPROM_DemanaDesarLog@mm& (0+255),w,b
  5506   000816  ECE4  F009         	call	___lbmod
  5507   00081A  0F30               	addlw	48
  5508   00081C  0100               	movlb	0	; () banked
  5509   00081E  6F9C               	movwf	(_logPend+3)& (0+255),b
  5510                           
  5511                           ;TAD_EEPROM.c: 28:     logPend[4] = (ss / 10) + '0'; logPend[5] = (ss % 10) + '0';
  5512   000820  0E0A               	movlw	10
  5513   000822  6E67               	movwf	___lbdiv@divisor^0,c
  5514   000824  51E8               	movf	EEPROM_DemanaDesarLog@ss& (0+255),w,b
  5515   000826  ECC9  F008         	call	___lbdiv
  5516   00082A  0F30               	addlw	48
  5517   00082C  0100               	movlb	0	; () banked
  5518   00082E  6F9D               	movwf	(_logPend+4)& (0+255),b
  5519   000830  0E0A               	movlw	10
  5520   000832  6E6B               	movwf	___lbmod@divisor^0,c
  5521   000834  51E8               	movf	EEPROM_DemanaDesarLog@ss& (0+255),w,b
  5522   000836  ECE4  F009         	call	___lbmod
  5523   00083A  0F30               	addlw	48
  5524   00083C  0100               	movlb	0	; () banked
  5525   00083E  6F9E               	movwf	(_logPend+5)& (0+255),b
  5526                           
  5527                           ;TAD_EEPROM.c: 29:     logPend[6] = (dd / 10) + '0'; logPend[7] = (dd % 10) + '0';
  5528   000840  0E0A               	movlw	10
  5529   000842  6E67               	movwf	___lbdiv@divisor^0,c
  5530   000844  51E9               	movf	EEPROM_DemanaDesarLog@dd& (0+255),w,b
  5531   000846  ECC9  F008         	call	___lbdiv
  5532   00084A  0F30               	addlw	48
  5533   00084C  0100               	movlb	0	; () banked
  5534   00084E  6F9F               	movwf	(_logPend+6)& (0+255),b
  5535   000850  0E0A               	movlw	10
  5536   000852  6E6B               	movwf	___lbmod@divisor^0,c
  5537   000854  51E9               	movf	EEPROM_DemanaDesarLog@dd& (0+255),w,b
  5538   000856  ECE4  F009         	call	___lbmod
  5539   00085A  0F30               	addlw	48
  5540   00085C  0100               	movlb	0	; () banked
  5541   00085E  6FA0               	movwf	(_logPend+7)& (0+255),b
  5542                           
  5543                           ;TAD_EEPROM.c: 30:     logPend[8] = (mo / 10) + '0'; logPend[9] = (mo % 10) + '0';
  5544   000860  0E0A               	movlw	10
  5545   000862  6E67               	movwf	___lbdiv@divisor^0,c
  5546   000864  51EA               	movf	EEPROM_DemanaDesarLog@mo& (0+255),w,b
  5547   000866  ECC9  F008         	call	___lbdiv
  5548   00086A  0F30               	addlw	48
  5549   00086C  0100               	movlb	0	; () banked
  5550   00086E  6FA1               	movwf	(_logPend+8)& (0+255),b
  5551   000870  0E0A               	movlw	10
  5552   000872  6E6B               	movwf	___lbmod@divisor^0,c
  5553   000874  51EA               	movf	EEPROM_DemanaDesarLog@mo& (0+255),w,b
  5554   000876  ECE4  F009         	call	___lbmod
  5555   00087A  0F30               	addlw	48
  5556   00087C  0100               	movlb	0	; () banked
  5557   00087E  6FA2               	movwf	(_logPend+9)& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;TAD_EEPROM.c: 31:     logPend[10] = '2';
  5561   000880  0E32               	movlw	50
  5562   000882  6FA3               	movwf	(_logPend+10)& (0+255),b
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;TAD_EEPROM.c: 32:     logPend[11] = '0';
  5566   000884  0E30               	movlw	48
  5567   000886  6FA4               	movwf	(_logPend+11)& (0+255),b
  5568                           
  5569                           ;TAD_EEPROM.c: 33:     logPend[12] = (yyyy / 10) % 10 + '0';
  5570   000888  0E0A               	movlw	10
  5571   00088A  6E6B               	movwf	___lbmod@divisor^0,c
  5572   00088C  0E0A               	movlw	10
  5573   00088E  6E67               	movwf	___lbdiv@divisor^0,c
  5574   000890  51EB               	movf	EEPROM_DemanaDesarLog@yyyy& (0+255),w,b
  5575   000892  ECC9  F008         	call	___lbdiv
  5576   000896  ECE4  F009         	call	___lbmod
  5577   00089A  0F30               	addlw	48
  5578   00089C  0100               	movlb	0	; () banked
  5579   00089E  6FA5               	movwf	(_logPend+12)& (0+255),b
  5580                           
  5581                           ;TAD_EEPROM.c: 34:     logPend[13] = yyyy % 10 + '0';
  5582   0008A0  0E0A               	movlw	10
  5583   0008A2  6E6B               	movwf	___lbmod@divisor^0,c
  5584   0008A4  51EB               	movf	EEPROM_DemanaDesarLog@yyyy& (0+255),w,b
  5585   0008A6  ECE4  F009         	call	___lbmod
  5586   0008AA  0F30               	addlw	48
  5587   0008AC  0100               	movlb	0	; () banked
  5588   0008AE  6FA6               	movwf	(_logPend+13)& (0+255),b
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;TAD_EEPROM.c: 36:     desantLog = 1;
  5592   0008B0  0E01               	movlw	1
  5593   0008B2  6E3B               	movwf	_desantLog^0,c
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;TAD_EEPROM.c: 37:     estatDesar = 0;
  5597   0008B4  6A3A               	clrf	_estatDesar^0,c
  5598   0008B6  0012               	return		;funcret
  5599   0008B8                     __end_of_EEPROM_DemanaDesarLog:
  5600                           	callstack 0
  5601                           
  5602 ;; *************** function _SIO_Init *****************
  5603 ;; Defined at:
  5604 ;;		line 3 in file "TAD_SIO.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1
  5618 ;;      Params:         0       0       0
  5619 ;;      Locals:         0       0       0
  5620 ;;      Temps:          0       0       0
  5621 ;;      Totals:         0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used: 1
  5624 ;; Hardware stack levels required when called: 4
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_main
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text32
  5633   001632                     __ptext32:
  5634                           	callstack 0
  5635   001632                     _SIO_Init:
  5636                           	callstack 26
  5637                           
  5638                           ;TAD_SIO.c: 4:     TRISCbits.TRISC6 = 1;
  5639                           
  5640                           ;incstack = 0
  5641   001632  8C94               	bsf	148,6,c	;volatile
  5642                           
  5643                           ;TAD_SIO.c: 5:     TRISCbits.TRISC7 = 1;
  5644   001634  8E94               	bsf	148,7,c	;volatile
  5645                           
  5646                           ;TAD_SIO.c: 7:     SPBRG = 81;
  5647   001636  0E51               	movlw	81
  5648   001638  6EAF               	movwf	175,c	;volatile
  5649                           
  5650                           ;TAD_SIO.c: 8:     SPBRGH = 0;
  5651   00163A  6AB0               	clrf	176,c	;volatile
  5652                           
  5653                           ;TAD_SIO.c: 10:     BAUDCONbits.BRG16 = 1;
  5654   00163C  86B8               	bsf	184,3,c	;volatile
  5655                           
  5656                           ;TAD_SIO.c: 11:     TXSTAbits.BRGH = 1;
  5657   00163E  84AC               	bsf	172,2,c	;volatile
  5658                           
  5659                           ;TAD_SIO.c: 13:     TXSTAbits.SYNC = 0;
  5660   001640  98AC               	bcf	172,4,c	;volatile
  5661                           
  5662                           ;TAD_SIO.c: 14:     RCSTAbits.SPEN = 1;
  5663   001642  8EAB               	bsf	171,7,c	;volatile
  5664                           
  5665                           ;TAD_SIO.c: 16:     TXSTAbits.TXEN = 1;
  5666   001644  8AAC               	bsf	172,5,c	;volatile
  5667                           
  5668                           ;TAD_SIO.c: 17:     RCSTAbits.CREN = 1;
  5669   001646  88AB               	bsf	171,4,c	;volatile
  5670   001648  0012               	return		;funcret
  5671   00164A                     __end_of_SIO_Init:
  5672                           	callstack 0
  5673                           
  5674 ;; *************** function _RTC_Motor *****************
  5675 ;; Defined at:
  5676 ;;		line 76 in file "TAD_RTC.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1
  5690 ;;      Params:         0       0       0
  5691 ;;      Locals:         0       0       0
  5692 ;;      Temps:          0       0       0
  5693 ;;      Totals:         0       0       0
  5694 ;;Total ram usage:        0 bytes
  5695 ;; Hardware stack levels used: 1
  5696 ;; Hardware stack levels required when called: 7
  5697 ;; This function calls:
  5698 ;;		_I2C_Read
  5699 ;;		_I2C_Stop_
  5700 ;;		_I2C_Write
  5701 ;;		_ReStartI2C_
  5702 ;;		_StartI2C
  5703 ;;		_bcdToDec
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text33
  5710   000968                     __ptext33:
  5711                           	callstack 0
  5712   000968                     _RTC_Motor:
  5713                           	callstack 23
  5714                           
  5715                           ;TAD_RTC.c: 77:     static char state = 0;;TAD_RTC.c: 79:     if (!pendingRTC) return;
  5716                           
  5717                           ;incstack = 0
  5718   000968  5029               	movf	_pendingRTC^0,w,c
  5719   00096A  B4D8               	btfsc	status,2,c
  5720   00096C  0012               	return	
  5721   00096E  D049               	goto	l4730
  5722   000970                     l4704:
  5723                           
  5724                           ;TAD_RTC.c: 83:             StartI2C(0xD0);
  5725   000970  0ED0               	movlw	208
  5726   000972  EC76  F00B         	call	_StartI2C
  5727                           
  5728                           ;TAD_RTC.c: 84:             I2C_Write(0x00);
  5729   000976  0E00               	movlw	0
  5730   000978  EC81  F00B         	call	_I2C_Write
  5731                           
  5732                           ;TAD_RTC.c: 85:             ReStartI2C_(0xD1);
  5733   00097C  0ED1               	movlw	209
  5734   00097E  EC6B  F00B         	call	_ReStartI2C_
  5735                           
  5736                           ;TAD_RTC.c: 86:             state++;
  5737   000982  2A22               	incf	RTC_Motor@state^0,f,c
  5738                           
  5739                           ;TAD_RTC.c: 87:             break;
  5740   000984  0012               	return	
  5741   000986                     l4712:
  5742                           
  5743                           ;TAD_RTC.c: 90:             *rtc_ss = bcdToDec(I2C_Read(0));
  5744   000986  5026               	movf	_rtc_ss^0,w,c
  5745   000988  6ED9               	movwf	fsr2l,c
  5746   00098A  6ADA               	clrf	fsr2h,c
  5747   00098C  0E00               	movlw	0
  5748   00098E  EC33  F00A         	call	_I2C_Read
  5749   000992  EC60  F00B         	call	_bcdToDec
  5750   000996  6EDF               	movwf	indf2,c
  5751                           
  5752                           ;TAD_RTC.c: 91:             *rtc_mm = bcdToDec(I2C_Read(0));
  5753   000998  5027               	movf	_rtc_mm^0,w,c
  5754   00099A  6ED9               	movwf	fsr2l,c
  5755   00099C  6ADA               	clrf	fsr2h,c
  5756   00099E  0E00               	movlw	0
  5757   0009A0  EC33  F00A         	call	_I2C_Read
  5758   0009A4  EC60  F00B         	call	_bcdToDec
  5759   0009A8  6EDF               	movwf	indf2,c
  5760                           
  5761                           ;TAD_RTC.c: 92:             *rtc_hh = bcdToDec(I2C_Read(0));
  5762   0009AA  5028               	movf	_rtc_hh^0,w,c
  5763   0009AC  6ED9               	movwf	fsr2l,c
  5764   0009AE  6ADA               	clrf	fsr2h,c
  5765   0009B0  0E00               	movlw	0
  5766   0009B2  EC33  F00A         	call	_I2C_Read
  5767   0009B6  EC60  F00B         	call	_bcdToDec
  5768   0009BA  6EDF               	movwf	indf2,c
  5769                           
  5770                           ;TAD_RTC.c: 93:             I2C_Read(0);
  5771   0009BC  0E00               	movlw	0
  5772   0009BE  EC33  F00A         	call	_I2C_Read
  5773                           
  5774                           ;TAD_RTC.c: 94:             *rtc_dd = bcdToDec(I2C_Read(0));
  5775   0009C2  5025               	movf	_rtc_dd^0,w,c
  5776   0009C4  6ED9               	movwf	fsr2l,c
  5777   0009C6  6ADA               	clrf	fsr2h,c
  5778   0009C8  0E00               	movlw	0
  5779   0009CA  EC33  F00A         	call	_I2C_Read
  5780   0009CE  EC60  F00B         	call	_bcdToDec
  5781   0009D2  6EDF               	movwf	indf2,c
  5782                           
  5783                           ;TAD_RTC.c: 95:             *rtc_mo = bcdToDec(I2C_Read(0));
  5784   0009D4  5024               	movf	_rtc_mo^0,w,c
  5785   0009D6  6ED9               	movwf	fsr2l,c
  5786   0009D8  6ADA               	clrf	fsr2h,c
  5787   0009DA  0E00               	movlw	0
  5788   0009DC  EC33  F00A         	call	_I2C_Read
  5789   0009E0  EC60  F00B         	call	_bcdToDec
  5790   0009E4  6EDF               	movwf	indf2,c
  5791                           
  5792                           ;TAD_RTC.c: 96:             *rtc_yy = bcdToDec(I2C_Read(1));
  5793   0009E6  5023               	movf	_rtc_yy^0,w,c
  5794   0009E8  6ED9               	movwf	fsr2l,c
  5795   0009EA  6ADA               	clrf	fsr2h,c
  5796   0009EC  0E01               	movlw	1
  5797   0009EE  EC33  F00A         	call	_I2C_Read
  5798   0009F2  EC60  F00B         	call	_bcdToDec
  5799   0009F6  6EDF               	movwf	indf2,c
  5800                           
  5801                           ;TAD_RTC.c: 97:             I2C_Stop_();
  5802   0009F8  ECCD  F00B         	call	_I2C_Stop_	;wreg free
  5803                           
  5804                           ;TAD_RTC.c: 98:             pendingRTC = 0;
  5805   0009FC  6A29               	clrf	_pendingRTC^0,c
  5806                           
  5807                           ;TAD_RTC.c: 99:             state = 0;
  5808   0009FE  6A22               	clrf	RTC_Motor@state^0,c
  5809                           
  5810                           ;TAD_RTC.c: 100:             break;
  5811   000A00  0012               	return	
  5812   000A02                     l4730:
  5813   000A02  5022               	movf	RTC_Motor@state^0,w,c
  5814                           
  5815                           ; Switch size 1, requested type "simple"
  5816                           ; Number of cases is 2, Range of values is 0 to 1
  5817                           ; switch strategies available:
  5818                           ; Name         Instructions Cycles
  5819                           ; simple_byte            7     4 (average)
  5820                           ;	Chosen strategy is simple_byte
  5821   000A04  0A00               	xorlw	0	; case 0
  5822   000A06  B4D8               	btfsc	status,2,c
  5823   000A08  D7B3               	goto	l4704
  5824   000A0A  0A01               	xorlw	1	; case 1
  5825   000A0C  A4D8               	btfss	status,2,c
  5826   000A0E  0012               	return	
  5827   000A10  D7BA               	goto	l4712
  5828   000A12                     __end_of_RTC_Motor:
  5829                           	callstack 0
  5830                           
  5831 ;; *************** function _bcdToDec *****************
  5832 ;; Defined at:
  5833 ;;		line 17 in file "TAD_RTC.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  val             1    wreg     unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  val             1   12[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      unsigned char 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0, prodl, prodh
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1
  5847 ;;      Params:         0       0       0
  5848 ;;      Locals:         1       0       0
  5849 ;;      Temps:          1       0       0
  5850 ;;      Totals:         2       0       0
  5851 ;;Total ram usage:        2 bytes
  5852 ;; Hardware stack levels used: 1
  5853 ;; Hardware stack levels required when called: 4
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_RTC_Motor
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text34
  5862   0016C0                     __ptext34:
  5863                           	callstack 0
  5864   0016C0                     _bcdToDec:
  5865                           	callstack 25
  5866                           
  5867                           ;incstack = 0
  5868                           ;bcdToDec@val stored from wreg
  5869   0016C0  6E68               	movwf	bcdToDec@val^0,c
  5870                           
  5871                           ;TAD_RTC.c: 18:     return ((val >> 4) * 10) + (val & 0x0F);
  5872   0016C2  C068  F067         	movff	bcdToDec@val,??_bcdToDec
  5873   0016C6  0E0F               	movlw	15
  5874   0016C8  1667               	andwf	??_bcdToDec^0,f,c
  5875   0016CA  3868               	swapf	bcdToDec@val^0,w,c
  5876   0016CC  0B0F               	andlw	15
  5877   0016CE  0D0A               	mullw	10
  5878   0016D0  50F3               	movf	243,w,c
  5879   0016D2  2467               	addwf	??_bcdToDec^0,w,c
  5880   0016D4  0012               	return		;funcret
  5881   0016D6                     __end_of_bcdToDec:
  5882                           	callstack 0
  5883                           
  5884 ;; *************** function _ReStartI2C_ *****************
  5885 ;; Defined at:
  5886 ;;		line 51 in file "TAD_I2C.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  slave_rw_add    1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  slave_rw_add    1   12[COMRAM] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      unsigned char 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1
  5900 ;;      Params:         0       0       0
  5901 ;;      Locals:         1       0       0
  5902 ;;      Temps:          0       0       0
  5903 ;;      Totals:         1       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used: 1
  5906 ;; Hardware stack levels required when called: 6
  5907 ;; This function calls:
  5908 ;;		_I2C_Write
  5909 ;; This function is called by:
  5910 ;;		_RTC_Motor
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text35
  5915   0016D6                     __ptext35:
  5916                           	callstack 0
  5917   0016D6                     _ReStartI2C_:
  5918                           	callstack 23
  5919                           
  5920                           ;incstack = 0
  5921                           ;ReStartI2C_@slave_rw_addr stored from wreg
  5922   0016D6  6E68               	movwf	ReStartI2C_@slave_rw_addr^0,c
  5923                           
  5924                           ;TAD_I2C.c: 51: char ReStartI2C_( char slave_rw_addr );TAD_I2C.c: 52: {;TAD_I2C.c: 53:  
      +                           SSPCON2bits.RSEN = 1;
  5925   0016D8  82C5               	bsf	197,1,c	;volatile
  5926   0016DA                     l130:
  5927   0016DA  B2C5               	btfsc	197,1,c	;volatile
  5928   0016DC  D7FE               	goto	l130
  5929                           
  5930                           ;TAD_I2C.c: 55:   PIR1bits.SSPIF=0;
  5931   0016DE  969E               	bcf	158,3,c	;volatile
  5932                           
  5933                           ;TAD_I2C.c: 56:   if(!(SSPSTATbits.S)){return 0;}
  5934   0016E0  A6C7               	btfss	199,3,c	;volatile
  5935   0016E2  0012               	return	
  5936                           
  5937                           ;TAD_I2C.c: 57:   return (I2C_Write(slave_rw_addr));;	Return value of _ReStartI2C_ is ne
      +                          ver used
  5938   0016E4  5068               	movf	ReStartI2C_@slave_rw_addr^0,w,c
  5939   0016E6  EC81  F00B         	call	_I2C_Write
  5940   0016EA  0012               	return		;funcret
  5941   0016EC                     __end_of_ReStartI2C_:
  5942                           	callstack 0
  5943                           
  5944 ;; *************** function _I2C_Read *****************
  5945 ;; Defined at:
  5946 ;;		line 81 in file "TAD_I2C.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  flag            1    wreg     unsigned char 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  flag            1   11[COMRAM] unsigned char 
  5951 ;;  buffer          1   12[COMRAM] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      unsigned char 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1
  5961 ;;      Params:         0       0       0
  5962 ;;      Locals:         2       0       0
  5963 ;;      Temps:          0       0       0
  5964 ;;      Totals:         2       0       0
  5965 ;;Total ram usage:        2 bytes
  5966 ;; Hardware stack levels used: 1
  5967 ;; Hardware stack levels required when called: 5
  5968 ;; This function calls:
  5969 ;;		_I2C_Ack
  5970 ;;		_I2C_Nack
  5971 ;;		_I2C_Ready
  5972 ;; This function is called by:
  5973 ;;		_RTC_Motor
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text36
  5978   001466                     __ptext36:
  5979                           	callstack 0
  5980   001466                     _I2C_Read:
  5981                           	callstack 24
  5982                           
  5983                           ;incstack = 0
  5984                           ;I2C_Read@flag stored from wreg
  5985   001466  6E67               	movwf	I2C_Read@flag^0,c
  5986                           
  5987                           ;TAD_I2C.c: 84:     SSPCON2bits.RCEN=1;
  5988   001468  86C5               	bsf	197,3,c	;volatile
  5989   00146A                     l149:
  5990   00146A  A0C7               	btfss	199,0,c	;volatile
  5991   00146C  D7FE               	goto	l149
  5992                           
  5993                           ;TAD_I2C.c: 88:     buffer=SSPBUF;
  5994   00146E  CFC9 F068          	movff	4041,I2C_Read@buffer	;volatile
  5995                           
  5996                           ;TAD_I2C.c: 92:     if(flag==0)
  5997   001472  5067               	movf	I2C_Read@flag^0,w,c
  5998   001474  A4D8               	btfss	status,2,c
  5999   001476  D003               	goto	l4420
  6000                           
  6001                           ;TAD_I2C.c: 93:         I2C_Ack();
  6002   001478  EC1C  F00C         	call	_I2C_Ack	;wreg free
  6003   00147C  D002               	goto	l153
  6004   00147E                     l4420:
  6005                           
  6006                           ;TAD_I2C.c: 95:         I2C_Nack();
  6007   00147E  EC17  F00C         	call	_I2C_Nack	;wreg free
  6008   001482                     l153:
  6009                           
  6010                           ;TAD_I2C.c: 96:         I2C_Ready();
  6011   001482  ECEC  F00B         	call	_I2C_Ready	;wreg free
  6012                           
  6013                           ;TAD_I2C.c: 97:     return(buffer);
  6014   001486  5068               	movf	I2C_Read@buffer^0,w,c
  6015   001488  0012               	return		;funcret
  6016   00148A                     __end_of_I2C_Read:
  6017                           	callstack 0
  6018                           
  6019 ;; *************** function _I2C_Nack *****************
  6020 ;; Defined at:
  6021 ;;		line 20 in file "TAD_I2C.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;		None
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		None
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1
  6035 ;;      Params:         0       0       0
  6036 ;;      Locals:         0       0       0
  6037 ;;      Temps:          0       0       0
  6038 ;;      Totals:         0       0       0
  6039 ;;Total ram usage:        0 bytes
  6040 ;; Hardware stack levels used: 1
  6041 ;; Hardware stack levels required when called: 4
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_I2C_Read
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text37
  6050   00182E                     __ptext37:
  6051                           	callstack 0
  6052   00182E                     _I2C_Nack:
  6053                           	callstack 24
  6054                           
  6055                           ;TAD_I2C.c: 22:     SSPCON2bits.ACKDT=1;
  6056                           
  6057                           ;incstack = 0
  6058   00182E  8AC5               	bsf	197,5,c	;volatile
  6059                           
  6060                           ;TAD_I2C.c: 23:     SSPCON2bits.ACKEN=1;
  6061   001830  88C5               	bsf	197,4,c	;volatile
  6062   001832                     l114:
  6063   001832  A8C5               	btfss	197,4,c	;volatile
  6064   001834  0012               	return	
  6065   001836  D7FD               	goto	l114
  6066   001838                     __end_of_I2C_Nack:
  6067                           	callstack 0
  6068                           
  6069 ;; *************** function _I2C_Ack *****************
  6070 ;; Defined at:
  6071 ;;		line 13 in file "TAD_I2C.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      void 
  6078 ;; Registers used:
  6079 ;;		None
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1
  6085 ;;      Params:         0       0       0
  6086 ;;      Locals:         0       0       0
  6087 ;;      Temps:          0       0       0
  6088 ;;      Totals:         0       0       0
  6089 ;;Total ram usage:        0 bytes
  6090 ;; Hardware stack levels used: 1
  6091 ;; Hardware stack levels required when called: 4
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_I2C_Read
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text38
  6100   001838                     __ptext38:
  6101                           	callstack 0
  6102   001838                     _I2C_Ack:
  6103                           	callstack 24
  6104                           
  6105                           ;TAD_I2C.c: 15:     SSPCON2bits.ACKDT=0;
  6106                           
  6107                           ;incstack = 0
  6108   001838  9AC5               	bcf	197,5,c	;volatile
  6109                           
  6110                           ;TAD_I2C.c: 16:     SSPCON2bits.ACKEN=1;
  6111   00183A  88C5               	bsf	197,4,c	;volatile
  6112   00183C                     l108:
  6113   00183C  A8C5               	btfss	197,4,c	;volatile
  6114   00183E  0012               	return	
  6115   001840  D7FD               	goto	l108
  6116   001842                     __end_of_I2C_Ack:
  6117                           	callstack 0
  6118                           
  6119 ;; *************** function _RTC_Init *****************
  6120 ;; Defined at:
  6121 ;;		line 21 in file "TAD_RTC.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      void 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1
  6135 ;;      Params:         0       0       0
  6136 ;;      Locals:         0       0       0
  6137 ;;      Temps:          0       0       0
  6138 ;;      Totals:         0       0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used: 1
  6141 ;; Hardware stack levels required when called: 8
  6142 ;; This function calls:
  6143 ;;		_InitI2C
  6144 ;;		_RTC_Enable1HzInterrupt
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text39
  6151   00180A                     __ptext39:
  6152                           	callstack 0
  6153   00180A                     _RTC_Init:
  6154                           	callstack 22
  6155                           
  6156                           ;TAD_RTC.c: 22:     InitI2C();
  6157                           
  6158                           ;incstack = 0
  6159   00180A  EC31  F00B         	call	_InitI2C	;wreg free
  6160                           
  6161                           ;TAD_RTC.c: 23:     RTC_Enable1HzInterrupt();
  6162   00180E  EC25  F00B         	call	_RTC_Enable1HzInterrupt	;wreg free
  6163                           
  6164                           ;TAD_RTC.c: 24:     pendingRTC = 0;
  6165   001812  6A29               	clrf	_pendingRTC^0,c
  6166   001814  0012               	return		;funcret
  6167   001816                     __end_of_RTC_Init:
  6168                           	callstack 0
  6169                           
  6170 ;; *************** function _RTC_Enable1HzInterrupt *****************
  6171 ;; Defined at:
  6172 ;;		line 27 in file "TAD_RTC.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1
  6186 ;;      Params:         0       0       0
  6187 ;;      Locals:         0       0       0
  6188 ;;      Temps:          0       0       0
  6189 ;;      Totals:         0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used: 1
  6192 ;; Hardware stack levels required when called: 7
  6193 ;; This function calls:
  6194 ;;		_I2C_Stop_
  6195 ;;		_I2C_Write
  6196 ;;		_StartI2C
  6197 ;; This function is called by:
  6198 ;;		_RTC_Init
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text40
  6203   00164A                     __ptext40:
  6204                           	callstack 0
  6205   00164A                     _RTC_Enable1HzInterrupt:
  6206                           	callstack 22
  6207                           
  6208                           ;TAD_RTC.c: 28:     StartI2C(0xD0);
  6209                           
  6210                           ;incstack = 0
  6211   00164A  0ED0               	movlw	208
  6212   00164C  EC76  F00B         	call	_StartI2C
  6213                           
  6214                           ;TAD_RTC.c: 29:     I2C_Write(0x0E);
  6215   001650  0E0E               	movlw	14
  6216   001652  EC81  F00B         	call	_I2C_Write
  6217                           
  6218                           ;TAD_RTC.c: 30:     I2C_Write(0x00);
  6219   001656  0E00               	movlw	0
  6220   001658  EC81  F00B         	call	_I2C_Write
  6221                           
  6222                           ;TAD_RTC.c: 32:     I2C_Stop_();
  6223   00165C  ECCD  F00B         	call	_I2C_Stop_	;wreg free
  6224   001660  0012               	return		;funcret
  6225   001662                     __end_of_RTC_Enable1HzInterrupt:
  6226                           	callstack 0
  6227                           
  6228 ;; *************** function _StartI2C *****************
  6229 ;; Defined at:
  6230 ;;		line 42 in file "TAD_I2C.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  slave_rw_add    1    wreg     unsigned char 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  slave_rw_add    1   12[COMRAM] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      unsigned char 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1
  6244 ;;      Params:         0       0       0
  6245 ;;      Locals:         1       0       0
  6246 ;;      Temps:          0       0       0
  6247 ;;      Totals:         1       0       0
  6248 ;;Total ram usage:        1 bytes
  6249 ;; Hardware stack levels used: 1
  6250 ;; Hardware stack levels required when called: 6
  6251 ;; This function calls:
  6252 ;;		_I2C_Write
  6253 ;; This function is called by:
  6254 ;;		_RTC_Enable1HzInterrupt
  6255 ;;		_RTC_SetTime
  6256 ;;		_RTC_SetDate
  6257 ;;		_RTC_Motor
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text41
  6262   0016EC                     __ptext41:
  6263                           	callstack 0
  6264   0016EC                     _StartI2C:
  6265                           	callstack 20
  6266                           
  6267                           ;incstack = 0
  6268                           ;StartI2C@slave_rw_addr stored from wreg
  6269   0016EC  6E68               	movwf	StartI2C@slave_rw_addr^0,c
  6270                           
  6271                           ;TAD_I2C.c: 42: char StartI2C( char slave_rw_addr );TAD_I2C.c: 43: {;TAD_I2C.c: 44:   SS
      +                          PCON2bits.SEN = 1;
  6272   0016EE  80C5               	bsf	197,0,c	;volatile
  6273   0016F0                     l123:
  6274   0016F0  B0C5               	btfsc	197,0,c	;volatile
  6275   0016F2  D7FE               	goto	l123
  6276                           
  6277                           ;TAD_I2C.c: 46:   PIR1bits.SSPIF=0;
  6278   0016F4  969E               	bcf	158,3,c	;volatile
  6279                           
  6280                           ;TAD_I2C.c: 47:   if(!(SSPSTATbits.S)){return 0;}
  6281   0016F6  A6C7               	btfss	199,3,c	;volatile
  6282   0016F8  0012               	return	
  6283                           
  6284                           ;TAD_I2C.c: 48:   return (I2C_Write(slave_rw_addr));;	Return value of _StartI2C is never
      +                           used
  6285   0016FA  5068               	movf	StartI2C@slave_rw_addr^0,w,c
  6286   0016FC  EC81  F00B         	call	_I2C_Write
  6287   001700  0012               	return		;funcret
  6288   001702                     __end_of_StartI2C:
  6289                           	callstack 0
  6290                           
  6291 ;; *************** function _I2C_Write *****************
  6292 ;; Defined at:
  6293 ;;		line 60 in file "TAD_I2C.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  data            1    wreg     unsigned char 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  data            1   11[COMRAM] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      unsigned char 
  6300 ;; Registers used:
  6301 ;;		wreg, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1
  6307 ;;      Params:         0       0       0
  6308 ;;      Locals:         1       0       0
  6309 ;;      Temps:          0       0       0
  6310 ;;      Totals:         1       0       0
  6311 ;;Total ram usage:        1 bytes
  6312 ;; Hardware stack levels used: 1
  6313 ;; Hardware stack levels required when called: 5
  6314 ;; This function calls:
  6315 ;;		_I2C_Ready
  6316 ;; This function is called by:
  6317 ;;		_StartI2C
  6318 ;;		_ReStartI2C_
  6319 ;;		_RTC_Enable1HzInterrupt
  6320 ;;		_RTC_SetTime
  6321 ;;		_RTC_SetDate
  6322 ;;		_RTC_Motor
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text42
  6327   001702                     __ptext42:
  6328                           	callstack 0
  6329   001702                     _I2C_Write:
  6330                           	callstack 20
  6331                           
  6332                           ;incstack = 0
  6333                           ;I2C_Write@data stored from wreg
  6334   001702  6E67               	movwf	I2C_Write@data^0,c
  6335                           
  6336                           ;TAD_I2C.c: 60:  char I2C_Write(unsigned char data);TAD_I2C.c: 61: {;TAD_I2C.c: 62:     
      +                            SSPBUF=data;
  6337   001704  C067  FFC9         	movff	I2C_Write@data,4041	;volatile
  6338                           
  6339                           ;TAD_I2C.c: 63:       I2C_Ready();
  6340   001708  ECEC  F00B         	call	_I2C_Ready	;wreg free
  6341                           
  6342                           ;TAD_I2C.c: 64:       if (SSPCON2bits.ACKSTAT)
  6343   00170C  ACC5               	btfss	197,6,c	;volatile
  6344   00170E  D002               	goto	l4246
  6345                           
  6346                           ;TAD_I2C.c: 65:         return 1;
  6347   001710  0E01               	movlw	1
  6348   001712  0012               	return	
  6349   001714                     l4246:
  6350                           
  6351                           ;TAD_I2C.c: 67:         return 2;
  6352   001714  0E02               	movlw	2
  6353   001716  0012               	return		;funcret
  6354   001718                     __end_of_I2C_Write:
  6355                           	callstack 0
  6356                           
  6357 ;; *************** function _I2C_Stop_ *****************
  6358 ;; Defined at:
  6359 ;;		line 70 in file "TAD_I2C.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;		None
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;		None
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  1    wreg      unsigned char 
  6366 ;; Registers used:
  6367 ;;		wreg, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMRAM   BANK0   BANK1
  6373 ;;      Params:         0       0       0
  6374 ;;      Locals:         0       0       0
  6375 ;;      Temps:          0       0       0
  6376 ;;      Totals:         0       0       0
  6377 ;;Total ram usage:        0 bytes
  6378 ;; Hardware stack levels used: 1
  6379 ;; Hardware stack levels required when called: 5
  6380 ;; This function calls:
  6381 ;;		_I2C_Ready
  6382 ;; This function is called by:
  6383 ;;		_RTC_Enable1HzInterrupt
  6384 ;;		_RTC_SetTime
  6385 ;;		_RTC_SetDate
  6386 ;;		_RTC_Motor
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text43
  6391   00179A                     __ptext43:
  6392                           	callstack 0
  6393   00179A                     _I2C_Stop_:
  6394                           	callstack 21
  6395                           
  6396                           ;TAD_I2C.c: 72:     I2C_Ready();
  6397                           
  6398                           ;incstack = 0
  6399   00179A  ECEC  F00B         	call	_I2C_Ready	;wreg free
  6400                           
  6401                           ;TAD_I2C.c: 73:     SSPCON2bits.PEN=1;
  6402   00179E  84C5               	bsf	197,2,c	;volatile
  6403   0017A0                     l142:
  6404   0017A0  B4C5               	btfsc	197,2,c	;volatile
  6405   0017A2  D7FE               	goto	l142
  6406                           
  6407                           ;TAD_I2C.c: 75:     PIR1bits.SSPIF = 0;
  6408   0017A4  969E               	bcf	158,3,c	;volatile
  6409                           
  6410                           ;TAD_I2C.c: 76:     if (!SSPSTATbits.P)
  6411   0017A6  50C7               	movf	199,w,c	;volatile
  6412   0017A8  0012               	return		;funcret
  6413   0017AA                     __end_of_I2C_Stop_:
  6414                           	callstack 0
  6415                           
  6416 ;; *************** function _I2C_Ready *****************
  6417 ;; Defined at:
  6418 ;;		line 6 in file "TAD_I2C.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		None
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMRAM   BANK0   BANK1
  6432 ;;      Params:         0       0       0
  6433 ;;      Locals:         0       0       0
  6434 ;;      Temps:          0       0       0
  6435 ;;      Totals:         0       0       0
  6436 ;;Total ram usage:        0 bytes
  6437 ;; Hardware stack levels used: 1
  6438 ;; Hardware stack levels required when called: 4
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_I2C_Write
  6443 ;;		_I2C_Stop_
  6444 ;;		_I2C_Read
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text44
  6449   0017D8                     __ptext44:
  6450                           	callstack 0
  6451   0017D8                     _I2C_Ready:
  6452                           	callstack 20
  6453                           
  6454                           ;TAD_I2C.c: 8:    while(PIR2bits.BCLIF);
  6455                           
  6456                           ;incstack = 0
  6457   0017D8  B6A1               	btfsc	161,3,c	;volatile
  6458   0017DA  D7FE               	goto	__ptext44
  6459   0017DC                     u2650:
  6460   0017DC  A0C7               	btfss	199,0,c	;volatile
  6461   0017DE  B4C7               	btfsc	199,2,c	;volatile
  6462   0017E0  D7FD               	goto	u2650
  6463                           
  6464                           ;TAD_I2C.c: 10:    PIR1bits.SSPIF=0;
  6465   0017E2  969E               	bcf	158,3,c	;volatile
  6466   0017E4  0012               	return		;funcret
  6467   0017E6                     __end_of_I2C_Ready:
  6468                           	callstack 0
  6469                           
  6470 ;; *************** function _InitI2C *****************
  6471 ;; Defined at:
  6472 ;;		line 29 in file "TAD_I2C.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1
  6486 ;;      Params:         0       0       0
  6487 ;;      Locals:         0       0       0
  6488 ;;      Temps:          0       0       0
  6489 ;;      Totals:         0       0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used: 1
  6492 ;; Hardware stack levels required when called: 4
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_RTC_Init
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text45
  6501   001662                     __ptext45:
  6502                           	callstack 0
  6503   001662                     _InitI2C:
  6504                           	callstack 25
  6505                           
  6506                           ;TAD_I2C.c: 31:   TRISCbits.TRISC3 = 1;
  6507                           
  6508                           ;incstack = 0
  6509   001662  8694               	bsf	148,3,c	;volatile
  6510                           
  6511                           ;TAD_I2C.c: 32:   TRISCbits.TRISC4 = 1;
  6512   001664  8894               	bsf	148,4,c	;volatile
  6513                           
  6514                           ;TAD_I2C.c: 33:   SSPSTAT =0x80;
  6515   001666  0E80               	movlw	128
  6516   001668  6EC7               	movwf	199,c	;volatile
  6517                           
  6518                           ;TAD_I2C.c: 34:   SSPCON1 = 0x28;
  6519   00166A  0E28               	movlw	40
  6520   00166C  6EC6               	movwf	198,c	;volatile
  6521                           
  6522                           ;TAD_I2C.c: 35:   SSPCON2 = 0x0;
  6523   00166E  6AC5               	clrf	197,c	;volatile
  6524                           
  6525                           ;TAD_I2C.c: 36:   SSPADD = 99;
  6526   001670  0E63               	movlw	99
  6527   001672  6EC8               	movwf	200,c	;volatile
  6528                           
  6529                           ;TAD_I2C.c: 37:   PIE1bits.SSPIE=0;
  6530   001674  969D               	bcf	157,3,c	;volatile
  6531                           
  6532                           ;TAD_I2C.c: 38:   PIR1bits.SSPIF=0;
  6533   001676  969E               	bcf	158,3,c	;volatile
  6534   001678  0012               	return		;funcret
  6535   00167A                     __end_of_InitI2C:
  6536                           	callstack 0
  6537                           
  6538 ;; *************** function _RGB_Motor *****************
  6539 ;; Defined at:
  6540 ;;		line 32 in file "TAD_RGB.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1
  6554 ;;      Params:         0       0       0
  6555 ;;      Locals:         0       0       0
  6556 ;;      Temps:          0       0       0
  6557 ;;      Totals:         0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used: 1
  6560 ;; Hardware stack levels required when called: 5
  6561 ;; This function calls:
  6562 ;;		_TI_GetTics
  6563 ;;		_TI_ResetTics
  6564 ;; This function is called by:
  6565 ;;		_main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text46
  6570   000B4E                     __ptext46:
  6571                           	callstack 0
  6572   000B4E                     _RGB_Motor:
  6573                           	callstack 25
  6574                           
  6575                           ;TAD_RGB.c: 33:     static char state = 0;;TAD_RGB.c: 35:     if (estatCritic == 0) {
  6576                           
  6577                           ;incstack = 0
  6578   000B4E  502D               	movf	_estatCritic^0,w,c
  6579   000B50  A4D8               	btfss	status,2,c
  6580   000B52  D010               	goto	l681
  6581                           
  6582                           ;TAD_RGB.c: 37:         LATAbits.LATA3 = red;
  6583   000B54  B030               	btfsc	_red^0,0,c
  6584   000B56  D002               	bra	u3105
  6585   000B58  9689               	bcf	137,3,c	;volatile
  6586   000B5A  D001               	bra	u3106
  6587   000B5C                     u3105:
  6588   000B5C  8689               	bsf	137,3,c	;volatile
  6589   000B5E                     u3106:
  6590                           
  6591                           ;TAD_RGB.c: 38:         LATAbits.LATA4 = green;
  6592   000B5E  B02F               	btfsc	_green^0,0,c
  6593   000B60  D002               	bra	u3115
  6594   000B62  9889               	bcf	137,4,c	;volatile
  6595   000B64  D001               	bra	u3116
  6596   000B66                     u3115:
  6597   000B66  8889               	bsf	137,4,c	;volatile
  6598   000B68                     u3116:
  6599                           
  6600                           ;TAD_RGB.c: 39:         LATAbits.LATA5 = blue;
  6601   000B68  B02E               	btfsc	_blue^0,0,c
  6602   000B6A  D002               	bra	u3125
  6603   000B6C  9A89               	bcf	137,5,c	;volatile
  6604   000B6E  D001               	bra	u3126
  6605   000B70                     u3125:
  6606   000B70  8A89               	bsf	137,5,c	;volatile
  6607   000B72                     u3126:
  6608                           
  6609                           ;TAD_RGB.c: 40:     } else {
  6610   000B72  0012               	return	
  6611   000B74                     l681:
  6612                           
  6613                           ;TAD_RGB.c: 42:         LATAbits.LATA3 = 1;
  6614   000B74  8689               	bsf	137,3,c	;volatile
  6615                           
  6616                           ;TAD_RGB.c: 43:         LATAbits.LATA4 = 0;
  6617   000B76  9889               	bcf	137,4,c	;volatile
  6618                           
  6619                           ;TAD_RGB.c: 44:         switch (state) {
  6620   000B78  D024               	goto	l4654
  6621   000B7A                     l684:
  6622                           
  6623                           ;TAD_RGB.c: 46:                 LATAbits.LATA5 = 0;
  6624   000B7A  9A89               	bcf	137,5,c	;volatile
  6625                           
  6626                           ;TAD_RGB.c: 47:                 if (TI_GetTics(timerRGB) > 500) {
  6627   000B7C  5051               	movf	_timerRGB^0,w,c
  6628   000B7E  ECFE  F007         	call	_TI_GetTics
  6629   000B82  506A               	movf	(?_TI_GetTics+3)^0,w,c
  6630   000B84  1069               	iorwf	(?_TI_GetTics+2)^0,w,c
  6631   000B86  E106               	bnz	u3130
  6632   000B88  0EF5               	movlw	245
  6633   000B8A  5C67               	subwf	?_TI_GetTics^0,w,c
  6634   000B8C  0E01               	movlw	1
  6635   000B8E  5868               	subwfb	(?_TI_GetTics+1)^0,w,c
  6636   000B90  A0D8               	btfss	status,0,c
  6637   000B92  0012               	return	
  6638   000B94                     u3130:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;TAD_RGB.c: 48:                     TI_ResetTics(timerRGB);
  6642   000B94  5051               	movf	_timerRGB^0,w,c
  6643   000B96  EC57  F00A         	call	_TI_ResetTics
  6644                           
  6645                           ;TAD_RGB.c: 49:                     state++;
  6646   000B9A  2A2C               	incf	RGB_Motor@state^0,f,c
  6647   000B9C  0012               	return	
  6648   000B9E                     l687:
  6649                           
  6650                           ;TAD_RGB.c: 54:                 LATAbits.LATA5 = 1;
  6651   000B9E  8A89               	bsf	137,5,c	;volatile
  6652                           
  6653                           ;TAD_RGB.c: 55:                 if (TI_GetTics(timerRGB) > 500) {
  6654   000BA0  5051               	movf	_timerRGB^0,w,c
  6655   000BA2  ECFE  F007         	call	_TI_GetTics
  6656   000BA6  506A               	movf	(?_TI_GetTics+3)^0,w,c
  6657   000BA8  1069               	iorwf	(?_TI_GetTics+2)^0,w,c
  6658   000BAA  E106               	bnz	u3140
  6659   000BAC  0EF5               	movlw	245
  6660   000BAE  5C67               	subwf	?_TI_GetTics^0,w,c
  6661   000BB0  0E01               	movlw	1
  6662   000BB2  5868               	subwfb	(?_TI_GetTics+1)^0,w,c
  6663   000BB4  A0D8               	btfss	status,0,c
  6664   000BB6  0012               	return	
  6665   000BB8                     u3140:
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;TAD_RGB.c: 56:                     TI_ResetTics(timerRGB);
  6669   000BB8  5051               	movf	_timerRGB^0,w,c
  6670   000BBA  EC57  F00A         	call	_TI_ResetTics
  6671                           
  6672                           ;TAD_RGB.c: 57:                     state--;
  6673   000BBE  062C               	decf	RGB_Motor@state^0,f,c
  6674   000BC0  0012               	return	
  6675   000BC2                     l4654:
  6676   000BC2  502C               	movf	RGB_Motor@state^0,w,c
  6677                           
  6678                           ; Switch size 1, requested type "simple"
  6679                           ; Number of cases is 2, Range of values is 0 to 1
  6680                           ; switch strategies available:
  6681                           ; Name         Instructions Cycles
  6682                           ; simple_byte            7     4 (average)
  6683                           ;	Chosen strategy is simple_byte
  6684   000BC4  0A00               	xorlw	0	; case 0
  6685   000BC6  B4D8               	btfsc	status,2,c
  6686   000BC8  D7D8               	goto	l684
  6687   000BCA  0A01               	xorlw	1	; case 1
  6688   000BCC  A4D8               	btfss	status,2,c
  6689   000BCE  0012               	return	
  6690   000BD0  D7E6               	goto	l687
  6691   000BD2                     __end_of_RGB_Motor:
  6692                           	callstack 0
  6693                           
  6694 ;; *************** function _RGB_Init *****************
  6695 ;; Defined at:
  6696 ;;		line 7 in file "TAD_RGB.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1
  6710 ;;      Params:         0       0       0
  6711 ;;      Locals:         0       0       0
  6712 ;;      Temps:          0       0       0
  6713 ;;      Totals:         0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used: 1
  6716 ;; Hardware stack levels required when called: 5
  6717 ;; This function calls:
  6718 ;;		_TI_NewTimer
  6719 ;;		_TI_ResetTics
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text47
  6726   0015FA                     __ptext47:
  6727                           	callstack 0
  6728   0015FA                     _RGB_Init:
  6729                           	callstack 25
  6730                           
  6731                           ;TAD_RGB.c: 8:     TRISAbits.TRISA3 = 0;
  6732                           
  6733                           ;incstack = 0
  6734   0015FA  9692               	bcf	146,3,c	;volatile
  6735                           
  6736                           ;TAD_RGB.c: 9:     TRISAbits.TRISA4 = 0;
  6737   0015FC  9892               	bcf	146,4,c	;volatile
  6738                           
  6739                           ;TAD_RGB.c: 10:     TRISAbits.TRISA5 = 0;
  6740   0015FE  9A92               	bcf	146,5,c	;volatile
  6741                           
  6742                           ;TAD_RGB.c: 12:     LATAbits.LATA3 = 0;
  6743   001600  9689               	bcf	137,3,c	;volatile
  6744                           
  6745                           ;TAD_RGB.c: 13:     LATAbits.LATA4 = 0;
  6746   001602  9889               	bcf	137,4,c	;volatile
  6747                           
  6748                           ;TAD_RGB.c: 14:     LATAbits.LATA5 = 0;
  6749   001604  9A89               	bcf	137,5,c	;volatile
  6750                           
  6751                           ;TAD_RGB.c: 16:     TI_NewTimer(&timerRGB);
  6752   001606  0E51               	movlw	low _timerRGB
  6753   001608  6E67               	movwf	TI_NewTimer@TimerHandle^0,c
  6754   00160A  EC8F  F008         	call	_TI_NewTimer	;wreg free
  6755                           
  6756                           ;TAD_RGB.c: 17:     TI_ResetTics(timerRGB);
  6757   00160E  5051               	movf	_timerRGB^0,w,c
  6758   001610  EC57  F00A         	call	_TI_ResetTics
  6759   001614  0012               	return		;funcret
  6760   001616                     __end_of_RGB_Init:
  6761                           	callstack 0
  6762                           
  6763 ;; *************** function _RAM_Motor *****************
  6764 ;; Defined at:
  6765 ;;		line 133 in file "TAD_RAM.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  i               2   21[COMRAM] unsigned int 
  6770 ;;  v               1   20[COMRAM] unsigned char 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  1    wreg      void 
  6773 ;; Registers used:
  6774 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1
  6780 ;;      Params:         0       0       0
  6781 ;;      Locals:         3       0       0
  6782 ;;      Temps:          0       0       0
  6783 ;;      Totals:         3       0       0
  6784 ;;Total ram usage:        3 bytes
  6785 ;; Hardware stack levels used: 1
  6786 ;; Hardware stack levels required when called: 7
  6787 ;; This function calls:
  6788 ;;		_RAM_IncAddr
  6789 ;;		_RAM_Read
  6790 ;;		_RAM_ResetAddr
  6791 ;;		_SIO_SendDecimal
  6792 ;;		_SIO_SendString
  6793 ;; This function is called by:
  6794 ;;		_main
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text48
  6799   000AB2                     __ptext48:
  6800                           	callstack 0
  6801   000AB2                     _RAM_Motor:
  6802                           	callstack 23
  6803                           
  6804                           ;TAD_RAM.c: 134:     if (!pendingReadRequest) return;
  6805                           
  6806                           ;incstack = 0
  6807   000AB2  502A               	movf	_pendingReadRequest@TAD_RAM$F1961^0,w,c
  6808   000AB4  B4D8               	btfsc	status,2,c
  6809   000AB6  0012               	return	
  6810   000AB8  D03F               	goto	l4698
  6811   000ABA                     l761:
  6812                           
  6813                           ;TAD_RAM.c: 138:             ramAddrBackup = posAddrRAM;
  6814   000ABA  C01A  F016         	movff	_posAddrRAM,_ramAddrBackup
  6815   000ABE  C01B  F017         	movff	_posAddrRAM+1,_ramAddrBackup+1
  6816                           
  6817                           ;TAD_RAM.c: 139:             RAM_ResetAddr();
  6818   000AC2  EC64  F009         	call	_RAM_ResetAddr	;wreg free
  6819                           
  6820                           ;TAD_RAM.c: 140:             ramReadIndex = 0;
  6821   000AC6  0E00               	movlw	0
  6822   000AC8  6E19               	movwf	(_ramReadIndex+1)^0,c
  6823   000ACA  0E00               	movlw	0
  6824   000ACC  6E18               	movwf	_ramReadIndex^0,c
  6825                           
  6826                           ;TAD_RAM.c: 141:             ramReadState = 1;
  6827   000ACE  0E01               	movlw	1
  6828   000AD0  6E2B               	movwf	_ramReadState^0,c
  6829                           
  6830                           ;TAD_RAM.c: 142:             break;
  6831   000AD2  0012               	return	
  6832   000AD4                     l4666:
  6833                           
  6834                           ;TAD_RAM.c: 145:             if (ramReadIndex < 25) {
  6835   000AD4  5019               	movf	(_ramReadIndex+1)^0,w,c
  6836   000AD6  E117               	bnz	l4680
  6837   000AD8  0E19               	movlw	25
  6838   000ADA  5C18               	subwf	_ramReadIndex^0,w,c
  6839   000ADC  B0D8               	btfsc	status,0,c
  6840   000ADE  D013               	goto	l4680
  6841                           
  6842                           ;TAD_RAM.c: 146:                 unsigned char v = RAM_Read();
  6843   000AE0  EC0B  F00B         	call	_RAM_Read	;wreg free
  6844   000AE4  6E70               	movwf	RAM_Motor@v^0,c
  6845                           
  6846                           ;TAD_RAM.c: 147:                 SIO_SendString("DATAGRAPH:");
  6847   000AE6  0E35               	movlw	low STR_23
  6848   000AE8  6E68               	movwf	SIO_SendString@str^0,c
  6849   000AEA  EC7A  F009         	call	_SIO_SendString	;wreg free
  6850                           
  6851                           ;TAD_RAM.c: 148:                 SIO_SendDecimal(v);
  6852   000AEE  5070               	movf	RAM_Motor@v^0,w,c
  6853   000AF0  ECD6  F007         	call	_SIO_SendDecimal
  6854                           
  6855                           ;TAD_RAM.c: 149:                 SIO_SendString("\r\n");
  6856   000AF4  0E1A               	movlw	low (STR_21+25)
  6857   000AF6  6E68               	movwf	SIO_SendString@str^0,c
  6858   000AF8  EC7A  F009         	call	_SIO_SendString	;wreg free
  6859                           
  6860                           ;TAD_RAM.c: 150:                 RAM_IncAddr();
  6861   000AFC  ECF8  F009         	call	_RAM_IncAddr	;wreg free
  6862                           
  6863                           ;TAD_RAM.c: 151:                 ramReadIndex++;
  6864   000B00  4A18               	infsnz	_ramReadIndex^0,f,c
  6865   000B02  2A19               	incf	(_ramReadIndex+1)^0,f,c
  6866                           
  6867                           ;TAD_RAM.c: 152:             } else {
  6868   000B04  0012               	return	
  6869   000B06                     l4680:
  6870                           
  6871                           ;TAD_RAM.c: 153:                 ramReadState = 2;
  6872   000B06  0E02               	movlw	2
  6873   000B08  6E2B               	movwf	_ramReadState^0,c
  6874   000B0A  0012               	return	
  6875   000B0C                     l4682:
  6876                           
  6877                           ;TAD_RAM.c: 158:             for (unsigned int i = 0; i < ramAddrBackup; i++) RAM_IncAdd
      +                          r();
  6878   000B0C  0E00               	movlw	0
  6879   000B0E  6E72               	movwf	(RAM_Motor@i+1)^0,c
  6880   000B10  0E00               	movlw	0
  6881   000B12  6E71               	movwf	RAM_Motor@i^0,c
  6882   000B14  D004               	goto	l4688
  6883   000B16                     l4684:
  6884   000B16  ECF8  F009         	call	_RAM_IncAddr	;wreg free
  6885   000B1A  4A71               	infsnz	RAM_Motor@i^0,f,c
  6886   000B1C  2A72               	incf	(RAM_Motor@i+1)^0,f,c
  6887   000B1E                     l4688:
  6888   000B1E  5016               	movf	_ramAddrBackup^0,w,c
  6889   000B20  5C71               	subwf	RAM_Motor@i^0,w,c
  6890   000B22  5017               	movf	(_ramAddrBackup+1)^0,w,c
  6891   000B24  5872               	subwfb	(RAM_Motor@i+1)^0,w,c
  6892   000B26  A0D8               	btfss	status,0,c
  6893   000B28  D7F6               	goto	l4684
  6894                           
  6895                           ;TAD_RAM.c: 159:             SIO_SendString("FINISH\r\n");
  6896   000B2A  0E5E               	movlw	low STR_22
  6897   000B2C  6E68               	movwf	SIO_SendString@str^0,c
  6898   000B2E  EC7A  F009         	call	_SIO_SendString	;wreg free
  6899                           
  6900                           ;TAD_RAM.c: 160:             ramReadState = 0;
  6901   000B32  6A2B               	clrf	_ramReadState^0,c
  6902                           
  6903                           ;TAD_RAM.c: 161:             pendingReadRequest = 0;
  6904   000B34  6A2A               	clrf	_pendingReadRequest@TAD_RAM$F1961^0,c
  6905                           
  6906                           ;TAD_RAM.c: 162:             break;
  6907   000B36  0012               	return	
  6908   000B38                     l4698:
  6909   000B38  502B               	movf	_ramReadState^0,w,c
  6910                           
  6911                           ; Switch size 1, requested type "simple"
  6912                           ; Number of cases is 3, Range of values is 0 to 2
  6913                           ; switch strategies available:
  6914                           ; Name         Instructions Cycles
  6915                           ; simple_byte           10     6 (average)
  6916                           ;	Chosen strategy is simple_byte
  6917   000B3A  0A00               	xorlw	0	; case 0
  6918   000B3C  B4D8               	btfsc	status,2,c
  6919   000B3E  D7BD               	goto	l761
  6920   000B40  0A01               	xorlw	1	; case 1
  6921   000B42  B4D8               	btfsc	status,2,c
  6922   000B44  D7C7               	goto	l4666
  6923   000B46  0A03               	xorlw	3	; case 2
  6924   000B48  A4D8               	btfss	status,2,c
  6925   000B4A  0012               	return	
  6926   000B4C  D7DF               	goto	l4682
  6927   000B4E                     __end_of_RAM_Motor:
  6928                           	callstack 0
  6929                           
  6930 ;; *************** function _SIO_SendDecimal *****************
  6931 ;; Defined at:
  6932 ;;		line 58 in file "TAD_SIO.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  num             1    wreg     unsigned char 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  num             1   19[COMRAM] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1
  6946 ;;      Params:         0       0       0
  6947 ;;      Locals:         1       0       0
  6948 ;;      Temps:          0       0       0
  6949 ;;      Totals:         1       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used: 1
  6952 ;; Hardware stack levels required when called: 5
  6953 ;; This function calls:
  6954 ;;		_SIO_SendBlocking
  6955 ;;		___awmod
  6956 ;;		___lbdiv
  6957 ;;		___lbmod
  6958 ;; This function is called by:
  6959 ;;		_RAM_Motor
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text49
  6964   000FAC                     __ptext49:
  6965                           	callstack 0
  6966   000FAC                     _SIO_SendDecimal:
  6967                           	callstack 24
  6968                           
  6969                           ;incstack = 0
  6970                           ;SIO_SendDecimal@num stored from wreg
  6971   000FAC  6E6F               	movwf	SIO_SendDecimal@num^0,c
  6972                           
  6973                           ;TAD_SIO.c: 59:     if (num >= 100) {
  6974   000FAE  0E63               	movlw	99
  6975   000FB0  646F               	cpfsgt	SIO_SendDecimal@num^0,c
  6976   000FB2  D013               	goto	l241
  6977                           
  6978                           ;TAD_SIO.c: 60:         SIO_SendBlocking((num / 100) + '0');
  6979   000FB4  0E64               	movlw	100
  6980   000FB6  6E67               	movwf	___lbdiv@divisor^0,c
  6981   000FB8  506F               	movf	SIO_SendDecimal@num^0,w,c
  6982   000FBA  ECC9  F008         	call	___lbdiv
  6983   000FBE  0F30               	addlw	48
  6984   000FC0  EC0B  F00C         	call	_SIO_SendBlocking
  6985                           
  6986                           ;TAD_SIO.c: 61:         num %= 100;
  6987   000FC4  C06F  F067         	movff	SIO_SendDecimal@num,___awmod@dividend
  6988   000FC8  6A68               	clrf	(___awmod@dividend+1)^0,c
  6989   000FCA  0E00               	movlw	0
  6990   000FCC  6E6A               	movwf	(___awmod@divisor+1)^0,c
  6991   000FCE  0E64               	movlw	100
  6992   000FD0  6E69               	movwf	___awmod@divisor^0,c
  6993   000FD2  EC5A  F006         	call	___awmod	;wreg free
  6994   000FD6  5067               	movf	?___awmod^0,w,c
  6995   000FD8  6E6F               	movwf	SIO_SendDecimal@num^0,c
  6996   000FDA                     l241:
  6997                           
  6998                           ;TAD_SIO.c: 63:     SIO_SendBlocking((num / 10) + '0');
  6999   000FDA  0E0A               	movlw	10
  7000   000FDC  6E67               	movwf	___lbdiv@divisor^0,c
  7001   000FDE  506F               	movf	SIO_SendDecimal@num^0,w,c
  7002   000FE0  ECC9  F008         	call	___lbdiv
  7003   000FE4  0F30               	addlw	48
  7004   000FE6  EC0B  F00C         	call	_SIO_SendBlocking
  7005                           
  7006                           ;TAD_SIO.c: 64:     SIO_SendBlocking((num % 10) + '0');
  7007   000FEA  0E0A               	movlw	10
  7008   000FEC  6E6B               	movwf	___lbmod@divisor^0,c
  7009   000FEE  506F               	movf	SIO_SendDecimal@num^0,w,c
  7010   000FF0  ECE4  F009         	call	___lbmod
  7011   000FF4  0F30               	addlw	48
  7012   000FF6  EC0B  F00C         	call	_SIO_SendBlocking
  7013   000FFA  0012               	return		;funcret
  7014   000FFC                     __end_of_SIO_SendDecimal:
  7015                           	callstack 0
  7016                           
  7017 ;; *************** function ___lbmod *****************
  7018 ;; Defined at:
  7019 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lbmod.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  dividend        1    wreg     unsigned char 
  7022 ;;  divisor         1   15[COMRAM] unsigned char 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  dividend        1   16[COMRAM] unsigned char 
  7025 ;;  rem             1   18[COMRAM] unsigned char 
  7026 ;;  counter         1   17[COMRAM] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      unsigned char 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1
  7036 ;;      Params:         1       0       0
  7037 ;;      Locals:         3       0       0
  7038 ;;      Temps:          0       0       0
  7039 ;;      Totals:         4       0       0
  7040 ;;Total ram usage:        4 bytes
  7041 ;; Hardware stack levels used: 1
  7042 ;; Hardware stack levels required when called: 4
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_SIO_SendDecimal
  7047 ;;		_EEPROM_DemanaDesarLog
  7048 ;;		_decToBcd
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text50
  7053   0013C8                     __ptext50:
  7054                           	callstack 0
  7055   0013C8                     ___lbmod:
  7056                           	callstack 21
  7057                           
  7058                           ;incstack = 0
  7059                           ;___lbmod@dividend stored from wreg
  7060   0013C8  6E6C               	movwf	___lbmod@dividend^0,c
  7061   0013CA  0E08               	movlw	8
  7062   0013CC  6E6D               	movwf	___lbmod@counter^0,c
  7063   0013CE  6A6E               	clrf	___lbmod@rem^0,c
  7064   0013D0                     l4280:
  7065   0013D0  90D8               	bcf	status,0,c
  7066   0013D2  346C               	rlcf	___lbmod@dividend^0,w,c
  7067   0013D4  346E               	rlcf	___lbmod@rem^0,w,c
  7068   0013D6  6E6E               	movwf	___lbmod@rem^0,c
  7069   0013D8  90D8               	bcf	status,0,c
  7070   0013DA  366C               	rlcf	___lbmod@dividend^0,f,c
  7071   0013DC  506B               	movf	___lbmod@divisor^0,w,c
  7072   0013DE  5C6E               	subwf	___lbmod@rem^0,w,c
  7073   0013E0  A0D8               	btfss	status,0,c
  7074   0013E2  D002               	goto	l4288
  7075   0013E4  506B               	movf	___lbmod@divisor^0,w,c
  7076   0013E6  5E6E               	subwf	___lbmod@rem^0,f,c
  7077   0013E8                     l4288:
  7078   0013E8  2E6D               	decfsz	___lbmod@counter^0,f,c
  7079   0013EA  D7F2               	goto	l4280
  7080   0013EC  506E               	movf	___lbmod@rem^0,w,c
  7081   0013EE  0012               	return		;funcret
  7082   0013F0                     __end_of___lbmod:
  7083                           	callstack 0
  7084                           
  7085 ;; *************** function ___lbdiv *****************
  7086 ;; Defined at:
  7087 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lbdiv.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  dividend        1    wreg     unsigned char 
  7090 ;;  divisor         1   11[COMRAM] unsigned char 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  dividend        1   12[COMRAM] unsigned char 
  7093 ;;  quotient        1   14[COMRAM] unsigned char 
  7094 ;;  counter         1   13[COMRAM] unsigned char 
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      unsigned char 
  7097 ;; Registers used:
  7098 ;;		wreg, status,2, status,0
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1
  7104 ;;      Params:         1       0       0
  7105 ;;      Locals:         3       0       0
  7106 ;;      Temps:          0       0       0
  7107 ;;      Totals:         4       0       0
  7108 ;;Total ram usage:        4 bytes
  7109 ;; Hardware stack levels used: 1
  7110 ;; Hardware stack levels required when called: 4
  7111 ;; This function calls:
  7112 ;;		Nothing
  7113 ;; This function is called by:
  7114 ;;		_SIO_SendDecimal
  7115 ;;		_EEPROM_DemanaDesarLog
  7116 ;;		_decToBcd
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text51
  7121   001192                     __ptext51:
  7122                           	callstack 0
  7123   001192                     ___lbdiv:
  7124                           	callstack 21
  7125                           
  7126                           ;incstack = 0
  7127                           ;___lbdiv@dividend stored from wreg
  7128   001192  6E68               	movwf	___lbdiv@dividend^0,c
  7129   001194  6A6A               	clrf	___lbdiv@quotient^0,c
  7130   001196  5067               	movf	___lbdiv@divisor^0,w,c
  7131   001198  B4D8               	btfsc	status,2,c
  7132   00119A  D015               	goto	l4272
  7133   00119C  0E01               	movlw	1
  7134   00119E  6E69               	movwf	___lbdiv@counter^0,c
  7135   0011A0  D003               	goto	l4260
  7136   0011A2                     l4256:
  7137   0011A2  90D8               	bcf	status,0,c
  7138   0011A4  3667               	rlcf	___lbdiv@divisor^0,f,c
  7139   0011A6  2A69               	incf	___lbdiv@counter^0,f,c
  7140   0011A8                     l4260:
  7141   0011A8  AE67               	btfss	___lbdiv@divisor^0,7,c
  7142   0011AA  D7FB               	goto	l4256
  7143   0011AC                     u2700:
  7144   0011AC  90D8               	bcf	status,0,c
  7145   0011AE  366A               	rlcf	___lbdiv@quotient^0,f,c
  7146   0011B0  5067               	movf	___lbdiv@divisor^0,w,c
  7147   0011B2  5C68               	subwf	___lbdiv@dividend^0,w,c
  7148   0011B4  A0D8               	btfss	status,0,c
  7149   0011B6  D003               	goto	l4268
  7150   0011B8  5067               	movf	___lbdiv@divisor^0,w,c
  7151   0011BA  5E68               	subwf	___lbdiv@dividend^0,f,c
  7152   0011BC  806A               	bsf	___lbdiv@quotient^0,0,c
  7153   0011BE                     l4268:
  7154   0011BE  90D8               	bcf	status,0,c
  7155   0011C0  3267               	rrcf	___lbdiv@divisor^0,f,c
  7156   0011C2  2E69               	decfsz	___lbdiv@counter^0,f,c
  7157   0011C4  D7F3               	goto	u2700
  7158   0011C6                     l4272:
  7159   0011C6  506A               	movf	___lbdiv@quotient^0,w,c
  7160   0011C8  0012               	return		;funcret
  7161   0011CA                     __end_of___lbdiv:
  7162                           	callstack 0
  7163                           
  7164 ;; *************** function ___awmod *****************
  7165 ;; Defined at:
  7166 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  dividend        2   11[COMRAM] int 
  7169 ;;  divisor         2   13[COMRAM] int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  sign            1   16[COMRAM] unsigned char 
  7172 ;;  counter         1   15[COMRAM] unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  2   11[COMRAM] int 
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, status,0
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1
  7182 ;;      Params:         4       0       0
  7183 ;;      Locals:         2       0       0
  7184 ;;      Temps:          0       0       0
  7185 ;;      Totals:         6       0       0
  7186 ;;Total ram usage:        6 bytes
  7187 ;; Hardware stack levels used: 1
  7188 ;; Hardware stack levels required when called: 4
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_SIO_SendDecimal
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text52
  7197   000CB4                     __ptext52:
  7198                           	callstack 0
  7199   000CB4                     ___awmod:
  7200                           	callstack 24
  7201                           
  7202                           ;incstack = 0
  7203   000CB4  6A6C               	clrf	___awmod@sign^0,c
  7204   000CB6  AE68               	btfss	(___awmod@dividend+1)^0,7,c
  7205   000CB8  D006               	goto	l3392
  7206   000CBA  6C67               	negf	___awmod@dividend^0,c
  7207   000CBC  1E68               	comf	(___awmod@dividend+1)^0,f,c
  7208   000CBE  B0D8               	btfsc	status,0,c
  7209   000CC0  2A68               	incf	(___awmod@dividend+1)^0,f,c
  7210   000CC2  0E01               	movlw	1
  7211   000CC4  6E6C               	movwf	___awmod@sign^0,c
  7212   000CC6                     l3392:
  7213   000CC6  AE6A               	btfss	(___awmod@divisor+1)^0,7,c
  7214   000CC8  D004               	goto	l3396
  7215   000CCA  6C69               	negf	___awmod@divisor^0,c
  7216   000CCC  1E6A               	comf	(___awmod@divisor+1)^0,f,c
  7217   000CCE  B0D8               	btfsc	status,0,c
  7218   000CD0  2A6A               	incf	(___awmod@divisor+1)^0,f,c
  7219   000CD2                     l3396:
  7220   000CD2  5069               	movf	___awmod@divisor^0,w,c
  7221   000CD4  106A               	iorwf	(___awmod@divisor+1)^0,w,c
  7222   000CD6  B4D8               	btfsc	status,2,c
  7223   000CD8  D018               	goto	l3412
  7224   000CDA  0E01               	movlw	1
  7225   000CDC  6E6B               	movwf	___awmod@counter^0,c
  7226   000CDE  D004               	goto	l3402
  7227   000CE0                     l3400:
  7228   000CE0  90D8               	bcf	status,0,c
  7229   000CE2  3669               	rlcf	___awmod@divisor^0,f,c
  7230   000CE4  366A               	rlcf	(___awmod@divisor+1)^0,f,c
  7231   000CE6  2A6B               	incf	___awmod@counter^0,f,c
  7232   000CE8                     l3402:
  7233   000CE8  AE6A               	btfss	(___awmod@divisor+1)^0,7,c
  7234   000CEA  D7FA               	goto	l3400
  7235   000CEC                     u1800:
  7236   000CEC  5069               	movf	___awmod@divisor^0,w,c
  7237   000CEE  5C67               	subwf	___awmod@dividend^0,w,c
  7238   000CF0  506A               	movf	(___awmod@divisor+1)^0,w,c
  7239   000CF2  5868               	subwfb	(___awmod@dividend+1)^0,w,c
  7240   000CF4  A0D8               	btfss	status,0,c
  7241   000CF6  D004               	goto	l3408
  7242   000CF8  5069               	movf	___awmod@divisor^0,w,c
  7243   000CFA  5E67               	subwf	___awmod@dividend^0,f,c
  7244   000CFC  506A               	movf	(___awmod@divisor+1)^0,w,c
  7245   000CFE  5A68               	subwfb	(___awmod@dividend+1)^0,f,c
  7246   000D00                     l3408:
  7247   000D00  90D8               	bcf	status,0,c
  7248   000D02  326A               	rrcf	(___awmod@divisor+1)^0,f,c
  7249   000D04  3269               	rrcf	___awmod@divisor^0,f,c
  7250   000D06  2E6B               	decfsz	___awmod@counter^0,f,c
  7251   000D08  D7F1               	goto	u1800
  7252   000D0A                     l3412:
  7253   000D0A  506C               	movf	___awmod@sign^0,w,c
  7254   000D0C  B4D8               	btfsc	status,2,c
  7255   000D0E  D004               	goto	l3416
  7256   000D10  6C67               	negf	___awmod@dividend^0,c
  7257   000D12  1E68               	comf	(___awmod@dividend+1)^0,f,c
  7258   000D14  B0D8               	btfsc	status,0,c
  7259   000D16  2A68               	incf	(___awmod@dividend+1)^0,f,c
  7260   000D18                     l3416:
  7261   000D18  C067  F067         	movff	___awmod@dividend,?___awmod
  7262   000D1C  C068  F068         	movff	___awmod@dividend+1,?___awmod+1
  7263   000D20  0012               	return		;funcret
  7264   000D22                     __end_of___awmod:
  7265                           	callstack 0
  7266                           
  7267 ;; *************** function _RAM_Read *****************
  7268 ;; Defined at:
  7269 ;;		line 92 in file "TAD_RAM.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  r               1   12[COMRAM] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      unsigned char 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1
  7283 ;;      Params:         0       0       0
  7284 ;;      Locals:         1       0       0
  7285 ;;      Temps:          0       0       0
  7286 ;;      Totals:         1       0       0
  7287 ;;Total ram usage:        1 bytes
  7288 ;; Hardware stack levels used: 1
  7289 ;; Hardware stack levels required when called: 5
  7290 ;; This function calls:
  7291 ;;		_delay_us
  7292 ;; This function is called by:
  7293 ;;		_RAM_Motor
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text53
  7298   001616                     __ptext53:
  7299                           	callstack 0
  7300   001616                     _RAM_Read:
  7301                           	callstack 24
  7302                           
  7303                           ;TAD_RAM.c: 93:     TRISD = 0xFF;
  7304                           
  7305                           ;incstack = 0
  7306   001616  6895               	setf	149,c	;volatile
  7307                           
  7308                           ;TAD_RAM.c: 94:     LATD = 0x00;
  7309   001618  6A8C               	clrf	140,c	;volatile
  7310                           
  7311                           ;TAD_RAM.c: 96:     LATBbits.LATB3 = 1;
  7312   00161A  868A               	bsf	138,3,c	;volatile
  7313                           
  7314                           ;TAD_RAM.c: 97:     LATCbits.LATC2 = 0;
  7315   00161C  948B               	bcf	139,2,c	;volatile
  7316                           
  7317                           ;TAD_RAM.c: 98:     LATBbits.LATB2 = 0;
  7318   00161E  948A               	bcf	138,2,c	;volatile
  7319                           
  7320                           ;TAD_RAM.c: 100:     delay_us(5);
  7321   001620  0E05               	movlw	5
  7322   001622  EC8C  F00B         	call	_delay_us
  7323                           
  7324                           ;TAD_RAM.c: 101:     unsigned char r = PORTD;
  7325   001626  CF83 F068          	movff	3971,RAM_Read@r	;volatile
  7326                           
  7327                           ;TAD_RAM.c: 103:     LATBbits.LATB2 = 1;
  7328   00162A  848A               	bsf	138,2,c	;volatile
  7329                           
  7330                           ;TAD_RAM.c: 104:     LATCbits.LATC2 = 1;
  7331   00162C  848B               	bsf	139,2,c	;volatile
  7332                           
  7333                           ;TAD_RAM.c: 106:     return r;
  7334   00162E  5068               	movf	RAM_Read@r^0,w,c
  7335   001630  0012               	return		;funcret
  7336   001632                     __end_of_RAM_Read:
  7337                           	callstack 0
  7338                           
  7339 ;; *************** function _RAM_Init *****************
  7340 ;; Defined at:
  7341 ;;		line 22 in file "TAD_RAM.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      void 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1
  7355 ;;      Params:         0       0       0
  7356 ;;      Locals:         0       0       0
  7357 ;;      Temps:          0       0       0
  7358 ;;      Totals:         0       0       0
  7359 ;;Total ram usage:        0 bytes
  7360 ;; Hardware stack levels used: 1
  7361 ;; Hardware stack levels required when called: 8
  7362 ;; This function calls:
  7363 ;;		_RAM_DemanaEsborrar
  7364 ;;		_RAM_ResetAddr
  7365 ;; This function is called by:
  7366 ;;		_main
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text54
  7371   001376                     __ptext54:
  7372                           	callstack 0
  7373   001376                     _RAM_Init:
  7374                           	callstack 22
  7375                           
  7376                           ;TAD_RAM.c: 23:     TRISD = 0x00;
  7377                           
  7378                           ;incstack = 0
  7379   001376  6A95               	clrf	149,c	;volatile
  7380                           
  7381                           ;TAD_RAM.c: 24:     LATD = 0x00;
  7382   001378  6A8C               	clrf	140,c	;volatile
  7383                           
  7384                           ;TAD_RAM.c: 26:     TRISBbits.TRISB2 = 0;
  7385   00137A  9493               	bcf	147,2,c	;volatile
  7386                           
  7387                           ;TAD_RAM.c: 27:     TRISBbits.TRISB3 = 0;
  7388   00137C  9693               	bcf	147,3,c	;volatile
  7389                           
  7390                           ;TAD_RAM.c: 28:     TRISBbits.TRISB4 = 0;
  7391   00137E  9893               	bcf	147,4,c	;volatile
  7392                           
  7393                           ;TAD_RAM.c: 29:     TRISBbits.TRISB5 = 0;
  7394   001380  9A93               	bcf	147,5,c	;volatile
  7395                           
  7396                           ;TAD_RAM.c: 30:     TRISCbits.TRISC2 = 0;
  7397   001382  9494               	bcf	148,2,c	;volatile
  7398                           
  7399                           ;TAD_RAM.c: 32:     LATBbits.LATB4 = 0;
  7400   001384  988A               	bcf	138,4,c	;volatile
  7401                           
  7402                           ;TAD_RAM.c: 33:     LATBbits.LATB2 = 1;
  7403   001386  848A               	bsf	138,2,c	;volatile
  7404                           
  7405                           ;TAD_RAM.c: 34:     LATBbits.LATB3 = 1;
  7406   001388  868A               	bsf	138,3,c	;volatile
  7407                           
  7408                           ;TAD_RAM.c: 35:     LATCbits.LATC2 = 1;
  7409   00138A  848B               	bsf	139,2,c	;volatile
  7410                           
  7411                           ;TAD_RAM.c: 36:     LATBbits.LATB5 = 1;
  7412   00138C  8A8A               	bsf	138,5,c	;volatile
  7413                           
  7414                           ;TAD_RAM.c: 39:     posAddrRAM = 0;
  7415   00138E  0E00               	movlw	0
  7416   001390  6E1B               	movwf	(_posAddrRAM+1)^0,c
  7417   001392  0E00               	movlw	0
  7418   001394  6E1A               	movwf	_posAddrRAM^0,c
  7419                           
  7420                           ;TAD_RAM.c: 40:     RAM_ResetAddr();
  7421   001396  EC64  F009         	call	_RAM_ResetAddr	;wreg free
  7422                           
  7423                           ;TAD_RAM.c: 42:     RAM_DemanaEsborrar();
  7424   00139A  EC4E  F009         	call	_RAM_DemanaEsborrar	;wreg free
  7425   00139E  0012               	return		;funcret
  7426   0013A0                     __end_of_RAM_Init:
  7427                           	callstack 0
  7428                           
  7429 ;; *************** function _RAM_DemanaEsborrar *****************
  7430 ;; Defined at:
  7431 ;;		line 115 in file "TAD_RAM.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;		None
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  i               2   13[COMRAM] unsigned int 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  1    wreg      void 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0, cstack
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1
  7445 ;;      Params:         0       0       0
  7446 ;;      Locals:         2       0       0
  7447 ;;      Temps:          0       0       0
  7448 ;;      Totals:         2       0       0
  7449 ;;Total ram usage:        2 bytes
  7450 ;; Hardware stack levels used: 1
  7451 ;; Hardware stack levels required when called: 7
  7452 ;; This function calls:
  7453 ;;		_RAM_IncAddr
  7454 ;;		_RAM_ResetAddr
  7455 ;;		_RAM_Write
  7456 ;; This function is called by:
  7457 ;;		_resetCommand
  7458 ;;		_RAM_Init
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text55
  7463   00129C                     __ptext55:
  7464                           	callstack 0
  7465   00129C                     _RAM_DemanaEsborrar:
  7466                           	callstack 20
  7467                           
  7468                           ;TAD_RAM.c: 116:     RAM_ResetAddr();
  7469                           
  7470                           ;incstack = 0
  7471   00129C  EC64  F009         	call	_RAM_ResetAddr	;wreg free
  7472                           
  7473                           ;TAD_RAM.c: 118:     unsigned int i;;TAD_RAM.c: 119:     for(i = 0; i < 25; i++) {
  7474   0012A0  0E00               	movlw	0
  7475   0012A2  6E6A               	movwf	(RAM_DemanaEsborrar@i+1)^0,c
  7476   0012A4  0E00               	movlw	0
  7477   0012A6  6E69               	movwf	RAM_DemanaEsborrar@i^0,c
  7478   0012A8                     l3172:
  7479                           
  7480                           ;TAD_RAM.c: 120:         RAM_Write(0);
  7481   0012A8  0E00               	movlw	0
  7482   0012AA  EC45  F00A         	call	_RAM_Write
  7483                           
  7484                           ;TAD_RAM.c: 121:         RAM_IncAddr();
  7485   0012AE  ECF8  F009         	call	_RAM_IncAddr	;wreg free
  7486                           
  7487                           ;TAD_RAM.c: 122:     }
  7488   0012B2  4A69               	infsnz	RAM_DemanaEsborrar@i^0,f,c
  7489   0012B4  2A6A               	incf	(RAM_DemanaEsborrar@i+1)^0,f,c
  7490   0012B6  506A               	movf	(RAM_DemanaEsborrar@i+1)^0,w,c
  7491   0012B8  E104               	bnz	u1610
  7492   0012BA  0E19               	movlw	25
  7493   0012BC  5C69               	subwf	RAM_DemanaEsborrar@i^0,w,c
  7494   0012BE  A0D8               	btfss	status,0,c
  7495   0012C0  D7F3               	goto	l3172
  7496   0012C2                     u1610:
  7497                           
  7498                           ;TAD_RAM.c: 124:     RAM_ResetAddr();
  7499   0012C2  EC64  F009         	call	_RAM_ResetAddr	;wreg free
  7500   0012C6  0012               	return		;funcret
  7501   0012C8                     __end_of_RAM_DemanaEsborrar:
  7502                           	callstack 0
  7503                           
  7504 ;; *************** function _RAM_Write *****************
  7505 ;; Defined at:
  7506 ;;		line 76 in file "TAD_RAM.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  v               1    wreg     unsigned char 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  v               1   12[COMRAM] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      void 
  7513 ;; Registers used:
  7514 ;;		wreg, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1
  7520 ;;      Params:         0       0       0
  7521 ;;      Locals:         1       0       0
  7522 ;;      Temps:          0       0       0
  7523 ;;      Totals:         1       0       0
  7524 ;;Total ram usage:        1 bytes
  7525 ;; Hardware stack levels used: 1
  7526 ;; Hardware stack levels required when called: 5
  7527 ;; This function calls:
  7528 ;;		_delay_us
  7529 ;; This function is called by:
  7530 ;;		_RAM_DemanaDesar
  7531 ;;		_RAM_DemanaEsborrar
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text56
  7536   00148A                     __ptext56:
  7537                           	callstack 0
  7538   00148A                     _RAM_Write:
  7539                           	callstack 21
  7540                           
  7541                           ;incstack = 0
  7542                           ;RAM_Write@v stored from wreg
  7543   00148A  6E68               	movwf	RAM_Write@v^0,c
  7544                           
  7545                           ;TAD_RAM.c: 77:     TRISD = 0x00;
  7546   00148C  6A95               	clrf	149,c	;volatile
  7547                           
  7548                           ;TAD_RAM.c: 78:     delay_us(1);
  7549   00148E  0E01               	movlw	1
  7550   001490  EC8C  F00B         	call	_delay_us
  7551                           
  7552                           ;TAD_RAM.c: 79:     LATD = v;
  7553   001494  C068  FF8C         	movff	RAM_Write@v,3980	;volatile
  7554                           
  7555                           ;TAD_RAM.c: 81:     LATBbits.LATB2 = 1;
  7556   001498  848A               	bsf	138,2,c	;volatile
  7557                           
  7558                           ;TAD_RAM.c: 82:     LATCbits.LATC2 = 0;
  7559   00149A  948B               	bcf	139,2,c	;volatile
  7560                           
  7561                           ;TAD_RAM.c: 83:     LATBbits.LATB3 = 0;
  7562   00149C  968A               	bcf	138,3,c	;volatile
  7563                           
  7564                           ;TAD_RAM.c: 84:     delay_us(1);
  7565   00149E  0E01               	movlw	1
  7566   0014A0  EC8C  F00B         	call	_delay_us
  7567                           
  7568                           ;TAD_RAM.c: 85:     LATBbits.LATB3 = 1;
  7569   0014A4  868A               	bsf	138,3,c	;volatile
  7570                           
  7571                           ;TAD_RAM.c: 86:     LATCbits.LATC2 = 1;
  7572   0014A6  848B               	bsf	139,2,c	;volatile
  7573                           
  7574                           ;TAD_RAM.c: 88:     TRISD = 0xFF;
  7575   0014A8  6895               	setf	149,c	;volatile
  7576                           
  7577                           ;TAD_RAM.c: 89:     LATD = 0x00;
  7578   0014AA  6A8C               	clrf	140,c	;volatile
  7579   0014AC  0012               	return		;funcret
  7580   0014AE                     __end_of_RAM_Write:
  7581                           	callstack 0
  7582                           
  7583 ;; *************** function _RAM_IncAddr *****************
  7584 ;; Defined at:
  7585 ;;		line 63 in file "TAD_RAM.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1
  7599 ;;      Params:         0       0       0
  7600 ;;      Locals:         0       0       0
  7601 ;;      Temps:          0       0       0
  7602 ;;      Totals:         0       0       0
  7603 ;;Total ram usage:        0 bytes
  7604 ;; Hardware stack levels used: 1
  7605 ;; Hardware stack levels required when called: 6
  7606 ;; This function calls:
  7607 ;;		_RAM_ResetAddr
  7608 ;;		_delay_us
  7609 ;; This function is called by:
  7610 ;;		_RAM_DemanaDesar
  7611 ;;		_RAM_DemanaEsborrar
  7612 ;;		_RAM_Motor
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text57
  7617   0013F0                     __ptext57:
  7618                           	callstack 0
  7619   0013F0                     _RAM_IncAddr:
  7620                           	callstack 20
  7621                           
  7622                           ;TAD_RAM.c: 64:     LATBbits.LATB4 = 0;
  7623                           
  7624                           ;incstack = 0
  7625   0013F0  988A               	bcf	138,4,c	;volatile
  7626                           
  7627                           ;TAD_RAM.c: 66:     delay_us(3);
  7628   0013F2  0E03               	movlw	3
  7629   0013F4  EC8C  F00B         	call	_delay_us
  7630                           
  7631                           ;TAD_RAM.c: 67:     LATBbits.LATB4 = 1;
  7632   0013F8  888A               	bsf	138,4,c	;volatile
  7633                           
  7634                           ;TAD_RAM.c: 68:     delay_us(3);
  7635   0013FA  0E03               	movlw	3
  7636   0013FC  EC8C  F00B         	call	_delay_us
  7637                           
  7638                           ;TAD_RAM.c: 70:     LATBbits.LATB4 = 0;
  7639   001400  988A               	bcf	138,4,c	;volatile
  7640                           
  7641                           ;TAD_RAM.c: 72:     posAddrRAM++;
  7642   001402  4A1A               	infsnz	_posAddrRAM^0,f,c
  7643   001404  2A1B               	incf	(_posAddrRAM+1)^0,f,c
  7644                           
  7645                           ;TAD_RAM.c: 73:     if(posAddrRAM >= 25) RAM_ResetAddr();
  7646   001406  501B               	movf	(_posAddrRAM+1)^0,w,c
  7647   001408  E104               	bnz	u1570
  7648   00140A  0E19               	movlw	25
  7649   00140C  5C1A               	subwf	_posAddrRAM^0,w,c
  7650   00140E  A0D8               	btfss	status,0,c
  7651   001410  0012               	return	
  7652   001412                     u1570:
  7653   001412  EC64  F009         	call	_RAM_ResetAddr	;wreg free
  7654   001416  0012               	return		;funcret
  7655   001418                     __end_of_RAM_IncAddr:
  7656                           	callstack 0
  7657                           
  7658 ;; *************** function _RAM_ResetAddr *****************
  7659 ;; Defined at:
  7660 ;;		line 45 in file "TAD_RAM.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;		None
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;		None
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      void 
  7667 ;; Registers used:
  7668 ;;		wreg, status,2, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1
  7674 ;;      Params:         0       0       0
  7675 ;;      Locals:         0       0       0
  7676 ;;      Temps:          0       0       0
  7677 ;;      Totals:         0       0       0
  7678 ;;Total ram usage:        0 bytes
  7679 ;; Hardware stack levels used: 1
  7680 ;; Hardware stack levels required when called: 5
  7681 ;; This function calls:
  7682 ;;		_delay_us
  7683 ;; This function is called by:
  7684 ;;		_RAM_Init
  7685 ;;		_RAM_IncAddr
  7686 ;;		_RAM_DemanaEsborrar
  7687 ;;		_RAM_Motor
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text58
  7692   0012C8                     __ptext58:
  7693                           	callstack 0
  7694   0012C8                     _RAM_ResetAddr:
  7695                           	callstack 21
  7696                           
  7697                           ;TAD_RAM.c: 46:     LATBbits.LATB4 = 0;
  7698                           
  7699                           ;incstack = 0
  7700   0012C8  988A               	bcf	138,4,c	;volatile
  7701                           
  7702                           ;TAD_RAM.c: 47:     LATBbits.LATB5 = 0;
  7703   0012CA  9A8A               	bcf	138,5,c	;volatile
  7704                           
  7705                           ;TAD_RAM.c: 48:     delay_us(1);
  7706   0012CC  0E01               	movlw	1
  7707   0012CE  EC8C  F00B         	call	_delay_us
  7708                           
  7709                           ;TAD_RAM.c: 50:     LATBbits.LATB4 = 1;
  7710   0012D2  888A               	bsf	138,4,c	;volatile
  7711                           
  7712                           ;TAD_RAM.c: 51:     delay_us(1);
  7713   0012D4  0E01               	movlw	1
  7714   0012D6  EC8C  F00B         	call	_delay_us
  7715                           
  7716                           ;TAD_RAM.c: 53:     LATBbits.LATB4 = 0;
  7717   0012DA  988A               	bcf	138,4,c	;volatile
  7718                           
  7719                           ;TAD_RAM.c: 54:     delay_us(1);
  7720   0012DC  0E01               	movlw	1
  7721   0012DE  EC8C  F00B         	call	_delay_us
  7722                           
  7723                           ;TAD_RAM.c: 56:     LATBbits.LATB5 = 1;
  7724   0012E2  8A8A               	bsf	138,5,c	;volatile
  7725                           
  7726                           ;TAD_RAM.c: 57:     delay_us(1);
  7727   0012E4  0E01               	movlw	1
  7728   0012E6  EC8C  F00B         	call	_delay_us
  7729                           
  7730                           ;TAD_RAM.c: 59:     posAddrRAM = 0;
  7731   0012EA  0E00               	movlw	0
  7732   0012EC  6E1B               	movwf	(_posAddrRAM+1)^0,c
  7733   0012EE  0E00               	movlw	0
  7734   0012F0  6E1A               	movwf	_posAddrRAM^0,c
  7735   0012F2  0012               	return		;funcret
  7736   0012F4                     __end_of_RAM_ResetAddr:
  7737                           	callstack 0
  7738                           
  7739 ;; *************** function _delay_us *****************
  7740 ;; Defined at:
  7741 ;;		line 15 in file "TAD_RAM.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  us              1    wreg     unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  us              1   11[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1
  7755 ;;      Params:         0       0       0
  7756 ;;      Locals:         1       0       0
  7757 ;;      Temps:          0       0       0
  7758 ;;      Totals:         1       0       0
  7759 ;;Total ram usage:        1 bytes
  7760 ;; Hardware stack levels used: 1
  7761 ;; Hardware stack levels required when called: 4
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_RAM_ResetAddr
  7766 ;;		_RAM_IncAddr
  7767 ;;		_RAM_Write
  7768 ;;		_RAM_Read
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text59
  7773   001718                     __ptext59:
  7774                           	callstack 0
  7775   001718                     _delay_us:
  7776                           	callstack 21
  7777                           
  7778                           ;incstack = 0
  7779                           ;delay_us@us stored from wreg
  7780   001718  6E67               	movwf	delay_us@us^0,c
  7781                           
  7782                           ;TAD_RAM.c: 16:     while(--us) {
  7783   00171A  D006               	goto	l2984
  7784   00171C                     l725:
  7785   00171C  0000               	nop		;# 
  7786   00171E  0000               	nop		;# 
  7787   001720  0000               	nop		;# 
  7788   001722  0000               	nop		;# 
  7789   001724  0000               	nop		;# 
  7790   001726  0000               	nop		;# 
  7791   001728                     l2984:
  7792                           
  7793                           ;TAD_RAM.c: 16:     while(--us) {
  7794   001728  2E67               	decfsz	delay_us@us^0,f,c
  7795   00172A  D7F8               	goto	l725
  7796   00172C  0012               	return		;funcret
  7797   00172E                     __end_of_delay_us:
  7798                           	callstack 0
  7799                           
  7800 ;; *************** function _JOY_Motor *****************
  7801 ;; Defined at:
  7802 ;;		line 26 in file "TAD_JOYSTICK.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;		None
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;		None
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1
  7816 ;;      Params:         0       0       0
  7817 ;;      Locals:         0       0       0
  7818 ;;      Temps:          0       0       0
  7819 ;;      Totals:         0       0       0
  7820 ;;Total ram usage:        0 bytes
  7821 ;; Hardware stack levels used: 1
  7822 ;; Hardware stack levels required when called: 4
  7823 ;; This function calls:
  7824 ;;		Nothing
  7825 ;; This function is called by:
  7826 ;;		_main
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text60
  7831   00109C                     __ptext60:
  7832                           	callstack 0
  7833   00109C                     _JOY_Motor:
  7834                           	callstack 26
  7835                           
  7836                           ;TAD_JOYSTICK.c: 27:     static char state = 0;;TAD_JOYSTICK.c: 28:     static char cana
      +                          l = 0;;TAD_JOYSTICK.c: 30:     switch (state) {
  7837                           
  7838                           ;incstack = 0
  7839   00109C  D01A               	goto	l2632
  7840   00109E                     l2616:
  7841                           
  7842                           ;TAD_JOYSTICK.c: 33:             if (canal == 0) {
  7843   00109E  501C               	movf	JOY_Motor@canal^0,w,c
  7844   0010A0  A4D8               	btfss	status,2,c
  7845   0010A2  D003               	goto	l2620
  7846                           
  7847                           ;TAD_JOYSTICK.c: 34:                 ADCON0bits.CHS = 0;
  7848   0010A4  0EC3               	movlw	-61
  7849   0010A6  16C2               	andwf	194,f,c	;volatile
  7850                           
  7851                           ;TAD_JOYSTICK.c: 35:             } else {
  7852   0010A8  D004               	goto	l2622
  7853   0010AA                     l2620:
  7854                           
  7855                           ;TAD_JOYSTICK.c: 36:                 ADCON0bits.CHS = 1;
  7856   0010AA  50C2               	movf	194,w,c	;volatile
  7857   0010AC  0BC3               	andlw	-61
  7858   0010AE  0904               	iorlw	4
  7859   0010B0  6EC2               	movwf	194,c	;volatile
  7860   0010B2                     l2622:
  7861                           
  7862                           ;TAD_JOYSTICK.c: 38:             ADCON0bits.GO = 1;
  7863   0010B2  82C2               	bsf	194,1,c	;volatile
  7864                           
  7865                           ;TAD_JOYSTICK.c: 39:             state = 1;
  7866   0010B4  0E01               	movlw	1
  7867   0010B6  6E1D               	movwf	JOY_Motor@state^0,c
  7868                           
  7869                           ;TAD_JOYSTICK.c: 40:             break;
  7870   0010B8  0012               	return	
  7871   0010BA                     l861:
  7872                           
  7873                           ;TAD_JOYSTICK.c: 43:             if (ADCON0bits.GO == 0) {
  7874   0010BA  B2C2               	btfsc	194,1,c	;volatile
  7875   0010BC  0012               	return	
  7876                           
  7877                           ;TAD_JOYSTICK.c: 44:                 joystick[canal] = ADRESH;
  7878   0010BE  501C               	movf	JOY_Motor@canal^0,w,c
  7879   0010C0  0F14               	addlw	low _joystick
  7880   0010C2  6ED9               	movwf	fsr2l,c
  7881   0010C4  6ADA               	clrf	fsr2h,c
  7882   0010C6  CFC4 FFDF          	movff	4036,indf2	;volatile
  7883                           
  7884                           ;TAD_JOYSTICK.c: 45:                 canal ^= 1;
  7885   0010CA  0E01               	movlw	1
  7886   0010CC  1A1C               	xorwf	JOY_Motor@canal^0,f,c
  7887                           
  7888                           ;TAD_JOYSTICK.c: 46:                 state = 0;
  7889   0010CE  6A1D               	clrf	JOY_Motor@state^0,c
  7890   0010D0  0012               	return	
  7891   0010D2                     l2632:
  7892   0010D2  501D               	movf	JOY_Motor@state^0,w,c
  7893                           
  7894                           ; Switch size 1, requested type "simple"
  7895                           ; Number of cases is 2, Range of values is 0 to 1
  7896                           ; switch strategies available:
  7897                           ; Name         Instructions Cycles
  7898                           ; simple_byte            7     4 (average)
  7899                           ;	Chosen strategy is simple_byte
  7900   0010D4  0A00               	xorlw	0	; case 0
  7901   0010D6  B4D8               	btfsc	status,2,c
  7902   0010D8  D7E2               	goto	l2616
  7903   0010DA  0A01               	xorlw	1	; case 1
  7904   0010DC  A4D8               	btfss	status,2,c
  7905   0010DE  0012               	return	
  7906   0010E0  D7EC               	goto	l861
  7907   0010E2                     __end_of_JOY_Motor:
  7908                           	callstack 0
  7909                           
  7910 ;; *************** function _JOY_Init *****************
  7911 ;; Defined at:
  7912 ;;		line 10 in file "TAD_JOYSTICK.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1
  7926 ;;      Params:         0       0       0
  7927 ;;      Locals:         0       0       0
  7928 ;;      Temps:          0       0       0
  7929 ;;      Totals:         0       0       0
  7930 ;;Total ram usage:        0 bytes
  7931 ;; Hardware stack levels used: 1
  7932 ;; Hardware stack levels required when called: 4
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_main
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text61
  7941   00159E                     __ptext61:
  7942                           	callstack 0
  7943   00159E                     _JOY_Init:
  7944                           	callstack 26
  7945                           
  7946                           ;TAD_JOYSTICK.c: 11:     TRISAbits.TRISA0 = 1;
  7947                           
  7948                           ;incstack = 0
  7949   00159E  8092               	bsf	146,0,c	;volatile
  7950                           
  7951                           ;TAD_JOYSTICK.c: 12:     TRISAbits.TRISA1 = 1;
  7952   0015A0  8292               	bsf	146,1,c	;volatile
  7953                           
  7954                           ;TAD_JOYSTICK.c: 13:     TRISAbits.TRISA2 = 1;
  7955   0015A2  8492               	bsf	146,2,c	;volatile
  7956                           
  7957                           ;TAD_JOYSTICK.c: 15:     ADCON0bits.CHS = 0;
  7958   0015A4  0EC3               	movlw	-61
  7959   0015A6  16C2               	andwf	194,f,c	;volatile
  7960                           
  7961                           ;TAD_JOYSTICK.c: 16:     ADCON0bits.ADON = 1;
  7962   0015A8  80C2               	bsf	194,0,c	;volatile
  7963                           
  7964                           ;TAD_JOYSTICK.c: 17:     ADCON2bits.ADFM = 0;
  7965   0015AA  9EC0               	bcf	192,7,c	;volatile
  7966                           
  7967                           ;TAD_JOYSTICK.c: 18:     ADCON2bits.ADCS2 = 0;
  7968   0015AC  94C0               	bcf	192,2,c	;volatile
  7969                           
  7970                           ;TAD_JOYSTICK.c: 19:     ADCON2bits.ADCS1 = 1;
  7971   0015AE  82C0               	bsf	192,1,c	;volatile
  7972                           
  7973                           ;TAD_JOYSTICK.c: 20:     ADCON2bits.ADCS0 = 1;
  7974   0015B0  80C0               	bsf	192,0,c	;volatile
  7975                           
  7976                           ;TAD_JOYSTICK.c: 22:     indexJoystick = enable = 1;
  7977   0015B2  0E01               	movlw	1
  7978   0015B4  6E1F               	movwf	_enable^0,c
  7979   0015B6  C01F  F020         	movff	_enable,_indexJoystick
  7980                           
  7981                           ;TAD_JOYSTICK.c: 23:     canalActual = 0;
  7982   0015BA  6A1E               	clrf	_canalActual^0,c
  7983   0015BC  0012               	return		;funcret
  7984   0015BE                     __end_of_JOY_Init:
  7985                           	callstack 0
  7986                           
  7987 ;; *************** function _INT_Init *****************
  7988 ;; Defined at:
  7989 ;;		line 79 in file "main.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;		None
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		None
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1
  8003 ;;      Params:         0       0       0
  8004 ;;      Locals:         0       0       0
  8005 ;;      Temps:          0       0       0
  8006 ;;      Totals:         0       0       0
  8007 ;;Total ram usage:        0 bytes
  8008 ;; Hardware stack levels used: 1
  8009 ;; Hardware stack levels required when called: 4
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_main
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text62
  8018   0017AA                     __ptext62:
  8019                           	callstack 0
  8020   0017AA                     _INT_Init:
  8021                           	callstack 26
  8022                           
  8023                           ;main.c: 80:     RCONbits.IPEN = 1;
  8024                           
  8025                           ;incstack = 0
  8026   0017AA  8ED0               	bsf	208,7,c	;volatile
  8027                           
  8028                           ;main.c: 81:     INTCONbits.PEIE = 1;
  8029   0017AC  8CF2               	bsf	242,6,c	;volatile
  8030                           
  8031                           ;main.c: 82:     INTCONbits.GIE = 1;
  8032   0017AE  8EF2               	bsf	242,7,c	;volatile
  8033                           
  8034                           ;main.c: 84:     TRISBbits.TRISB1 = 1;
  8035   0017B0  8293               	bsf	147,1,c	;volatile
  8036                           
  8037                           ;main.c: 85:     INTCON3bits.INT1IF = 0;
  8038   0017B2  90F0               	bcf	240,0,c	;volatile
  8039                           
  8040                           ;main.c: 86:     INTCON3bits.INT1IE = 1;
  8041   0017B4  86F0               	bsf	240,3,c	;volatile
  8042                           
  8043                           ;main.c: 87:     INTCON2bits.INTEDG1 = 0;
  8044   0017B6  9AF1               	bcf	241,5,c	;volatile
  8045   0017B8  0012               	return		;funcret
  8046   0017BA                     __end_of_INT_Init:
  8047                           	callstack 0
  8048                           
  8049 ;; *************** function _FAN_Motor *****************
  8050 ;; Defined at:
  8051 ;;		line 21 in file "TAD_FAN.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;		None
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;		None
  8056 ;; Return value:  Size  Location     Type
  8057 ;;                  1    wreg      void 
  8058 ;; Registers used:
  8059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMRAM   BANK0   BANK1
  8065 ;;      Params:         0       0       0
  8066 ;;      Locals:         0       0       0
  8067 ;;      Temps:          0       0       0
  8068 ;;      Totals:         0       0       0
  8069 ;;Total ram usage:        0 bytes
  8070 ;; Hardware stack levels used: 1
  8071 ;; Hardware stack levels required when called: 5
  8072 ;; This function calls:
  8073 ;;		_TI_GetTics
  8074 ;;		_TI_ResetTics
  8075 ;; This function is called by:
  8076 ;;		_main
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text63
  8081   000EB0                     __ptext63:
  8082                           	callstack 0
  8083   000EB0                     _FAN_Motor:
  8084                           	callstack 25
  8085                           
  8086                           ;TAD_FAN.c: 22:     static char state = 0;;TAD_FAN.c: 24:     switch(state) {
  8087                           
  8088                           ;incstack = 0
  8089   000EB0  D025               	goto	l4634
  8090   000EB2                     l4610:
  8091                           
  8092                           ;TAD_FAN.c: 26:             if (TI_GetTics(timerFan) >= 1) {
  8093   000EB2  5052               	movf	_timerFan^0,w,c
  8094   000EB4  ECFE  F007         	call	_TI_GetTics
  8095   000EB8  5067               	movf	?_TI_GetTics^0,w,c
  8096   000EBA  1068               	iorwf	(?_TI_GetTics+1)^0,w,c
  8097   000EBC  1069               	iorwf	(?_TI_GetTics+2)^0,w,c
  8098   000EBE  106A               	iorwf	(?_TI_GetTics+3)^0,w,c
  8099   000EC0  B4D8               	btfsc	status,2,c
  8100   000EC2  0012               	return	
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;TAD_FAN.c: 27:                 TI_ResetTics(timerFan);
  8104   000EC4  5052               	movf	_timerFan^0,w,c
  8105   000EC6  EC57  F00A         	call	_TI_ResetTics
  8106                           
  8107                           ;TAD_FAN.c: 30:                 if (counterFan0 < dutyFan0) {
  8108   000ECA  5035               	movf	_dutyFan0^0,w,c
  8109   000ECC  5C33               	subwf	_counterFan0^0,w,c
  8110   000ECE  B0D8               	btfsc	status,0,c
  8111   000ED0  D002               	goto	l632
  8112                           
  8113                           ;TAD_FAN.c: 31:                     LATCbits.LATC0 = 1;
  8114   000ED2  808B               	bsf	139,0,c	;volatile
  8115                           
  8116                           ;TAD_FAN.c: 32:                 } else {
  8117   000ED4  D001               	goto	l4618
  8118   000ED6                     l632:
  8119                           
  8120                           ;TAD_FAN.c: 33:                     LATCbits.LATC0 = 0;
  8121   000ED6  908B               	bcf	139,0,c	;volatile
  8122   000ED8                     l4618:
  8123                           
  8124                           ;TAD_FAN.c: 37:                 if (counterFan1 < dutyFan1) {
  8125   000ED8  5034               	movf	_dutyFan1^0,w,c
  8126   000EDA  5C32               	subwf	_counterFan1^0,w,c
  8127   000EDC  B0D8               	btfsc	status,0,c
  8128   000EDE  D002               	goto	l634
  8129                           
  8130                           ;TAD_FAN.c: 38:                     LATCbits.LATC1 = 1;
  8131   000EE0  828B               	bsf	139,1,c	;volatile
  8132                           
  8133                           ;TAD_FAN.c: 39:                 } else {
  8134   000EE2  D001               	goto	l4622
  8135   000EE4                     l634:
  8136                           
  8137                           ;TAD_FAN.c: 40:                     LATCbits.LATC1 = 0;
  8138   000EE4  928B               	bcf	139,1,c	;volatile
  8139   000EE6                     l4622:
  8140                           
  8141                           ;TAD_FAN.c: 44:                 counterFan0++;
  8142   000EE6  2A33               	incf	_counterFan0^0,f,c
  8143                           
  8144                           ;TAD_FAN.c: 45:                 counterFan1++;
  8145   000EE8  2A32               	incf	_counterFan1^0,f,c
  8146                           
  8147                           ;TAD_FAN.c: 47:                 if (counterFan0 >= 100) counterFan0 = 0;
  8148   000EEA  0E63               	movlw	99
  8149   000EEC  6433               	cpfsgt	_counterFan0^0,c
  8150   000EEE  D001               	goto	l4628
  8151   000EF0  6A33               	clrf	_counterFan0^0,c
  8152   000EF2                     l4628:
  8153                           
  8154                           ;TAD_FAN.c: 48:                 if (counterFan1 >= 100) counterFan1 = 0;
  8155   000EF2  0E63               	movlw	99
  8156   000EF4  6432               	cpfsgt	_counterFan1^0,c
  8157   000EF6  0012               	return	
  8158   000EF8  6A32               	clrf	_counterFan1^0,c
  8159   000EFA  0012               	return	
  8160   000EFC                     l4634:
  8161   000EFC  5031               	movf	FAN_Motor@state^0,w,c
  8162                           
  8163                           ; Switch size 1, requested type "simple"
  8164                           ; Number of cases is 1, Range of values is 0 to 0
  8165                           ; switch strategies available:
  8166                           ; Name         Instructions Cycles
  8167                           ; simple_byte            4     3 (average)
  8168                           ;	Chosen strategy is simple_byte
  8169   000EFE  0A00               	xorlw	0	; case 0
  8170   000F00  A4D8               	btfss	status,2,c
  8171   000F02  0012               	return	
  8172   000F04  D7D6               	goto	l4610
  8173   000F06                     __end_of_FAN_Motor:
  8174                           	callstack 0
  8175                           
  8176 ;; *************** function _TI_GetTics *****************
  8177 ;; Defined at:
  8178 ;;		line 49 in file "TAD_TIMER.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  TimerHandle     1    wreg     unsigned char 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  TimerHandle     1    4[BANK0 ] unsigned char 
  8183 ;;  CopiaTicsAct    4    0[BANK0 ] unsigned long 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;                  4   11[COMRAM] unsigned long 
  8186 ;; Registers used:
  8187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 3F/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMRAM   BANK0   BANK1
  8193 ;;      Params:         4       0       0
  8194 ;;      Locals:         0       5       0
  8195 ;;      Temps:          4       0       0
  8196 ;;      Totals:         8       5       0
  8197 ;;Total ram usage:       13 bytes
  8198 ;; Hardware stack levels used: 1
  8199 ;; Hardware stack levels required when called: 4
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		_SIS_MovementMotor
  8204 ;;		_SIS_ControlTemperatura
  8205 ;;		_FAN_Motor
  8206 ;;		_RGB_Motor
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text64
  8211   000FFC                     __ptext64:
  8212                           	callstack 0
  8213   000FFC                     _TI_GetTics:
  8214                           	callstack 25
  8215                           
  8216                           ;incstack = 0
  8217                           ;TI_GetTics@TimerHandle stored from wreg
  8218   000FFC  0100               	movlb	0	; () banked
  8219   000FFE  6FEB               	movwf	TI_GetTics@TimerHandle& (0+255),b
  8220                           
  8221                           ;TAD_TIMER.c: 50:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8222   001000  9EF2               	bcf	242,7,c	;volatile
  8223   001002  C010  F0E7         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8224   001006  C011  F0E8         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8225   00100A  C012  F0E9         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8226   00100E  C013  F0EA         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8227   001012  8EF2               	bsf	242,7,c	;volatile
  8228                           
  8229                           ;TAD_TIMER.c: 51:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8230   001014  0100               	movlb	0	; () banked
  8231   001016  51EB               	movf	TI_GetTics@TimerHandle& (0+255),w,b
  8232   001018  0D05               	mullw	5
  8233   00101A  50F3               	movf	243,w,c
  8234   00101C  0F80               	addlw	low _Timers
  8235   00101E  6ED9               	movwf	fsr2l,c
  8236   001020  6ADA               	clrf	fsr2h,c
  8237   001022  CFDE F06B          	movff	postinc2,??_TI_GetTics
  8238   001026  CFDE F06C          	movff	postinc2,??_TI_GetTics+1
  8239   00102A  CFDE F06D          	movff	postinc2,??_TI_GetTics+2
  8240   00102E  CFDE F06E          	movff	postinc2,??_TI_GetTics+3
  8241   001032  506B               	movf	??_TI_GetTics^0,w,c
  8242   001034  5DE7               	subwf	TI_GetTics@CopiaTicsActual& (0+255),w,b
  8243   001036  6E67               	movwf	?_TI_GetTics^0,c
  8244   001038  506C               	movf	(??_TI_GetTics+1)^0,w,c
  8245   00103A  59E8               	subwfb	(TI_GetTics@CopiaTicsActual+1)& (0+255),w,b
  8246   00103C  6E68               	movwf	(?_TI_GetTics+1)^0,c
  8247   00103E  506D               	movf	(??_TI_GetTics+2)^0,w,c
  8248   001040  59E9               	subwfb	(TI_GetTics@CopiaTicsActual+2)& (0+255),w,b
  8249   001042  6E69               	movwf	(?_TI_GetTics+2)^0,c
  8250   001044  506E               	movf	(??_TI_GetTics+3)^0,w,c
  8251   001046  59EA               	subwfb	(TI_GetTics@CopiaTicsActual+3)& (0+255),w,b
  8252   001048  6E6A               	movwf	(?_TI_GetTics+3)^0,c
  8253                           
  8254                           ; BSR set to: 0
  8255   00104A  0012               	return		;funcret
  8256   00104C                     __end_of_TI_GetTics:
  8257                           	callstack 0
  8258                           
  8259 ;; *************** function _FAN_Init *****************
  8260 ;; Defined at:
  8261 ;;		line 11 in file "TAD_FAN.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  1    wreg      void 
  8268 ;; Registers used:
  8269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1
  8275 ;;      Params:         0       0       0
  8276 ;;      Locals:         0       0       0
  8277 ;;      Temps:          0       0       0
  8278 ;;      Totals:         0       0       0
  8279 ;;Total ram usage:        0 bytes
  8280 ;; Hardware stack levels used: 1
  8281 ;; Hardware stack levels required when called: 5
  8282 ;; This function calls:
  8283 ;;		_TI_NewTimer
  8284 ;;		_TI_ResetTics
  8285 ;; This function is called by:
  8286 ;;		_main
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           	psect	text65
  8291   00167A                     __ptext65:
  8292                           	callstack 0
  8293   00167A                     _FAN_Init:
  8294                           	callstack 25
  8295                           
  8296                           ;TAD_FAN.c: 12:     TRISCbits.TRISC0 = 0;
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;incstack = 0
  8300   00167A  9094               	bcf	148,0,c	;volatile
  8301                           
  8302                           ;TAD_FAN.c: 13:     TRISCbits.TRISC1 = 0;
  8303   00167C  9294               	bcf	148,1,c	;volatile
  8304                           
  8305                           ;TAD_FAN.c: 14:     LATCbits.LATC0 = 0;
  8306   00167E  908B               	bcf	139,0,c	;volatile
  8307                           
  8308                           ;TAD_FAN.c: 15:     LATCbits.LATC1 = 0;
  8309   001680  928B               	bcf	139,1,c	;volatile
  8310                           
  8311                           ;TAD_FAN.c: 17:     TI_NewTimer(&timerFan);
  8312   001682  0E52               	movlw	low _timerFan
  8313   001684  6E67               	movwf	TI_NewTimer@TimerHandle^0,c
  8314   001686  EC8F  F008         	call	_TI_NewTimer	;wreg free
  8315                           
  8316                           ;TAD_FAN.c: 18:     TI_ResetTics(timerFan);
  8317   00168A  5052               	movf	_timerFan^0,w,c
  8318   00168C  EC57  F00A         	call	_TI_ResetTics
  8319   001690  0012               	return		;funcret
  8320   001692                     __end_of_FAN_Init:
  8321                           	callstack 0
  8322                           
  8323 ;; *************** function _TI_ResetTics *****************
  8324 ;; Defined at:
  8325 ;;		line 44 in file "TAD_TIMER.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  TimerHandle     1    wreg     unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  TimerHandle     1   11[COMRAM] unsigned char 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      void 
  8332 ;; Registers used:
  8333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1
  8339 ;;      Params:         0       0       0
  8340 ;;      Locals:         1       0       0
  8341 ;;      Temps:          0       0       0
  8342 ;;      Totals:         1       0       0
  8343 ;;Total ram usage:        1 bytes
  8344 ;; Hardware stack levels used: 1
  8345 ;; Hardware stack levels required when called: 4
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_SIS_Init
  8350 ;;		_SIS_MovementMotor
  8351 ;;		_SIS_ControlTemperatura
  8352 ;;		_FAN_Init
  8353 ;;		_FAN_Motor
  8354 ;;		_RGB_Init
  8355 ;;		_RGB_SetColorAlternatCritic
  8356 ;;		_RGB_Motor
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text66
  8361   0014AE                     __ptext66:
  8362                           	callstack 0
  8363   0014AE                     _TI_ResetTics:
  8364                           	callstack 25
  8365                           
  8366                           ;incstack = 0
  8367                           ;TI_ResetTics@TimerHandle stored from wreg
  8368   0014AE  6E67               	movwf	TI_ResetTics@TimerHandle^0,c
  8369                           
  8370                           ;TAD_TIMER.c: 45:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8371   0014B0  9EF2               	bcf	242,7,c	;volatile
  8372   0014B2  5067               	movf	TI_ResetTics@TimerHandle^0,w,c
  8373   0014B4  0D05               	mullw	5
  8374   0014B6  50F3               	movf	243,w,c
  8375   0014B8  0F80               	addlw	low _Timers
  8376   0014BA  6ED9               	movwf	fsr2l,c
  8377   0014BC  6ADA               	clrf	fsr2h,c
  8378   0014BE  C010  FFDE         	movff	_Tics,postinc2	;volatile
  8379   0014C2  C011  FFDE         	movff	_Tics+1,postinc2	;volatile
  8380   0014C6  C012  FFDE         	movff	_Tics+2,postinc2	;volatile
  8381   0014CA  C013  FFDE         	movff	_Tics+3,postinc2	;volatile
  8382   0014CE  8EF2               	bsf	242,7,c	;volatile
  8383   0014D0  0012               	return		;funcret
  8384   0014D2                     __end_of_TI_ResetTics:
  8385                           	callstack 0
  8386                           
  8387 ;; *************** function _TI_NewTimer *****************
  8388 ;; Defined at:
  8389 ;;		line 34 in file "TAD_TIMER.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  TimerHandle     1   11[COMRAM] PTR unsigned char 
  8392 ;;		 -> timerRGB(1), timerFan(1), timerTemperatura(1), timerRebots(1), 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  Comptador       1   13[COMRAM] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  1    wreg      unsigned char 
  8397 ;; Registers used:
  8398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1
  8404 ;;      Params:         1       0       0
  8405 ;;      Locals:         1       0       0
  8406 ;;      Temps:          1       0       0
  8407 ;;      Totals:         3       0       0
  8408 ;;Total ram usage:        3 bytes
  8409 ;; Hardware stack levels used: 1
  8410 ;; Hardware stack levels required when called: 4
  8411 ;; This function calls:
  8412 ;;		Nothing
  8413 ;; This function is called by:
  8414 ;;		_SIS_Init
  8415 ;;		_FAN_Init
  8416 ;;		_RGB_Init
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text67
  8421   00111E                     __ptext67:
  8422                           	callstack 0
  8423   00111E                     _TI_NewTimer:
  8424                           	callstack 25
  8425                           
  8426                           ;TAD_TIMER.c: 35:  unsigned char Comptador=0;
  8427                           
  8428                           ;incstack = 0
  8429   00111E  6A69               	clrf	TI_NewTimer@Comptador^0,c
  8430                           
  8431                           ;TAD_TIMER.c: 36:  while (Timers[Comptador].Busy==1) {
  8432   001120  D005               	goto	l3540
  8433   001122                     l3536:
  8434                           
  8435                           ;TAD_TIMER.c: 37:   if (++Comptador == 5) return (0);
  8436   001122  2A69               	incf	TI_NewTimer@Comptador^0,f,c
  8437   001124  0E05               	movlw	5
  8438   001126  1869               	xorwf	TI_NewTimer@Comptador^0,w,c
  8439   001128  B4D8               	btfsc	status,2,c
  8440   00112A  0012               	return	
  8441   00112C                     l3540:
  8442                           
  8443                           ;TAD_TIMER.c: 36:  while (Timers[Comptador].Busy==1) {
  8444   00112C  5069               	movf	TI_NewTimer@Comptador^0,w,c
  8445   00112E  0D05               	mullw	5
  8446   001130  50F3               	movf	243,w,c
  8447   001132  0F84               	addlw	low (_Timers+4)
  8448   001134  6ED9               	movwf	fsr2l,c
  8449   001136  6ADA               	clrf	fsr2h,c
  8450   001138  04DE               	decf	postinc2,w,c
  8451   00113A  B4D8               	btfsc	status,2,c
  8452   00113C  D7F2               	goto	l3536
  8453                           
  8454                           ;TAD_TIMER.c: 39:  Timers[Comptador].Busy=1;
  8455   00113E  5069               	movf	TI_NewTimer@Comptador^0,w,c
  8456   001140  0D05               	mullw	5
  8457   001142  50F3               	movf	243,w,c
  8458   001144  0F84               	addlw	low (_Timers+4)
  8459   001146  6ED9               	movwf	fsr2l,c
  8460   001148  6ADA               	clrf	fsr2h,c
  8461   00114A  0E01               	movlw	1
  8462   00114C  6EDF               	movwf	indf2,c
  8463                           
  8464                           ;TAD_TIMER.c: 40:  *TimerHandle=Comptador;
  8465   00114E  5067               	movf	TI_NewTimer@TimerHandle^0,w,c
  8466   001150  6ED9               	movwf	fsr2l,c
  8467   001152  6ADA               	clrf	fsr2h,c
  8468   001154  C069  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8469   001158  0012               	return		;funcret
  8470   00115A                     __end_of_TI_NewTimer:
  8471                           	callstack 0
  8472                           
  8473 ;; *************** function _EEPROM_Motor *****************
  8474 ;; Defined at:
  8475 ;;		line 79 in file "TAD_EEPROM.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  addr            1   16[COMRAM] unsigned char 
  8480 ;;  to              1   15[COMRAM] unsigned char 
  8481 ;;  from            1   14[COMRAM] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      void 
  8484 ;; Registers used:
  8485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1
  8491 ;;      Params:         0       0       0
  8492 ;;      Locals:         3       0       0
  8493 ;;      Temps:          0       0       0
  8494 ;;      Totals:         3       0       0
  8495 ;;Total ram usage:        3 bytes
  8496 ;; Hardware stack levels used: 1
  8497 ;; Hardware stack levels required when called: 6
  8498 ;; This function calls:
  8499 ;;		_SIO_SendBlocking
  8500 ;;		_SIO_SendString
  8501 ;;		_readByte
  8502 ;;		_writeByte
  8503 ;; This function is called by:
  8504 ;;		_main
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           	psect	text68
  8509   0002A4                     __ptext68:
  8510                           	callstack 0
  8511   0002A4                     _EEPROM_Motor:
  8512                           	callstack 24
  8513                           
  8514                           ;TAD_EEPROM.c: 80:     static unsigned char estatGlobal = 0;;TAD_EEPROM.c: 81:     stati
      +                          c unsigned char eepromSubState = 0;;TAD_EEPROM.c: 82:     static unsigned char baseAddr 
      +                          = 0;;TAD_EEPROM.c: 83:     static unsigned char sendIndex = 0;;TAD_EEPROM.c: 86:     if 
      +                          (estatGlobal == 0) {
  8515                           
  8516                           ;incstack = 0
  8517   0002A4  5039               	movf	EEPROM_Motor@estatGlobal^0,w,c
  8518   0002A6  A4D8               	btfss	status,2,c
  8519   0002A8  D00C               	goto	l3992
  8520                           
  8521                           ;TAD_EEPROM.c: 87:         if (pendingReadRequest) {
  8522   0002AA  503F               	movf	_pendingReadRequest^0,w,c
  8523   0002AC  B4D8               	btfsc	status,2,c
  8524   0002AE  D004               	goto	l3986
  8525                           
  8526                           ;TAD_EEPROM.c: 88:             estatGlobal = 1;
  8527   0002B0  0E01               	movlw	1
  8528   0002B2  6E39               	movwf	EEPROM_Motor@estatGlobal^0,c
  8529                           
  8530                           ;TAD_EEPROM.c: 89:             eepromSubState = 0;
  8531   0002B4  6A38               	clrf	EEPROM_Motor@eepromSubState^0,c
  8532                           
  8533                           ;TAD_EEPROM.c: 90:         } else if (desantLog) {
  8534   0002B6  D005               	goto	l3992
  8535   0002B8                     l3986:
  8536   0002B8  503B               	movf	_desantLog^0,w,c
  8537   0002BA  B4D8               	btfsc	status,2,c
  8538   0002BC  0012               	return	
  8539                           
  8540                           ;TAD_EEPROM.c: 91:             estatGlobal = 2;
  8541   0002BE  0E02               	movlw	2
  8542   0002C0  D7F8               	goto	L1
  8543   0002C2                     l3992:
  8544                           
  8545                           ;TAD_EEPROM.c: 99:     if (estatGlobal == 1) {
  8546   0002C2  0439               	decf	EEPROM_Motor@estatGlobal^0,w,c
  8547   0002C4  B4D8               	btfsc	status,2,c
  8548   0002C6  D0D2               	goto	l4090
  8549   0002C8  D0EE               	goto	l4092
  8550   0002CA                     l3996:
  8551                           
  8552                           ;TAD_EEPROM.c: 102:                 if (totalLogs > 0) {
  8553   0002CA  5042               	movf	_totalLogs^0,w,c
  8554   0002CC  B4D8               	btfsc	status,2,c
  8555   0002CE  D007               	goto	l549
  8556                           
  8557                           ;TAD_EEPROM.c: 103:                     iLog = 0;
  8558   0002D0  6A41               	clrf	_iLog^0,c
  8559                           
  8560                           ;TAD_EEPROM.c: 104:                     jLog = 0;
  8561   0002D2  6A40               	clrf	_jLog^0,c
  8562                           
  8563                           ;TAD_EEPROM.c: 105:                     baseAddr = 0x00;
  8564   0002D4  6A37               	clrf	EEPROM_Motor@baseAddr^0,c
  8565                           
  8566                           ;TAD_EEPROM.c: 106:                     log[14] = '\0';
  8567   0002D6  6A0F               	clrf	(_log+14)^0,c
  8568   0002D8                     l4000:
  8569                           
  8570                           ;TAD_EEPROM.c: 107:                     eepromSubState = 1;
  8571   0002D8  0E01               	movlw	1
  8572   0002DA  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8573                           
  8574                           ;TAD_EEPROM.c: 108:                 } else {
  8575   0002DC  0012               	return	
  8576   0002DE                     l549:
  8577                           
  8578                           ;TAD_EEPROM.c: 109:                     pendingReadRequest = 0;
  8579   0002DE  6A3F               	clrf	_pendingReadRequest^0,c
  8580                           
  8581                           ;TAD_EEPROM.c: 110:                     estatGlobal = 0;
  8582   0002E0  6A39               	clrf	EEPROM_Motor@estatGlobal^0,c
  8583   0002E2  0012               	return	
  8584   0002E4                     l4002:
  8585                           
  8586                           ;TAD_EEPROM.c: 115:                 if (jLog < 14) {
  8587   0002E4  0E0E               	movlw	14
  8588   0002E6  6040               	cpfslt	_jLog^0,c
  8589   0002E8  D00E               	goto	l553
  8590                           
  8591                           ;TAD_EEPROM.c: 116:                     log[jLog] = readByte(baseAddr + (iLog * 14) + jL
      +                          og);
  8592   0002EA  5040               	movf	_jLog^0,w,c
  8593   0002EC  0F01               	addlw	low _log
  8594   0002EE  6ED9               	movwf	fsr2l,c
  8595   0002F0  6ADA               	clrf	fsr2h,c
  8596   0002F2  5041               	movf	_iLog^0,w,c
  8597   0002F4  0D0E               	mullw	14
  8598   0002F6  50F3               	movf	243,w,c
  8599   0002F8  2437               	addwf	EEPROM_Motor@baseAddr^0,w,c
  8600   0002FA  2440               	addwf	_jLog^0,w,c
  8601   0002FC  ECDD  F00B         	call	_readByte
  8602   000300  6EDF               	movwf	indf2,c
  8603                           
  8604                           ;TAD_EEPROM.c: 117:                     jLog++;
  8605   000302  2A40               	incf	_jLog^0,f,c
  8606                           
  8607                           ;TAD_EEPROM.c: 118:                 } else {
  8608   000304  0012               	return	
  8609   000306                     l553:
  8610                           
  8611                           ;TAD_EEPROM.c: 119:                     jLog = 0;
  8612   000306  6A40               	clrf	_jLog^0,c
  8613                           
  8614                           ;TAD_EEPROM.c: 120:                     sendIndex = 0;
  8615   000308  6A36               	clrf	EEPROM_Motor@sendIndex^0,c
  8616                           
  8617                           ;TAD_EEPROM.c: 121:                     eepromSubState = 2;
  8618   00030A  0E02               	movlw	2
  8619   00030C  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8620   00030E  0012               	return	
  8621   000310                     l4010:
  8622                           
  8623                           ;TAD_EEPROM.c: 126:                 SIO_SendString("DATALOGS:");
  8624   000310  0E40               	movlw	low STR_19
  8625   000312  6E68               	movwf	SIO_SendString@str^0,c
  8626   000314  EC7A  F009         	call	_SIO_SendString	;wreg free
  8627   000318                     l4012:
  8628                           
  8629                           ;TAD_EEPROM.c: 127:                 eepromSubState = 3;
  8630   000318  0E03               	movlw	3
  8631   00031A  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8632                           
  8633                           ;TAD_EEPROM.c: 128:                 break;
  8634   00031C  0012               	return	
  8635   00031E                     l4014:
  8636   00031E  5007               	movf	(_log+6)^0,w,c
  8637   000320  EC0B  F00C         	call	_SIO_SendBlocking
  8638   000324  0012               	return	
  8639   000326                     l4016:
  8640   000326  5008               	movf	(_log+7)^0,w,c
  8641   000328  EC0B  F00C         	call	_SIO_SendBlocking
  8642   00032C  0012               	return	
  8643   00032E                     l4018:
  8644   00032E  0E2D               	movlw	45
  8645   000330  EC0B  F00C         	call	_SIO_SendBlocking
  8646   000334  0012               	return	
  8647   000336                     l4020:
  8648   000336  5009               	movf	(_log+8)^0,w,c
  8649   000338  EC0B  F00C         	call	_SIO_SendBlocking
  8650   00033C  0012               	return	
  8651   00033E                     l4022:
  8652   00033E  500A               	movf	(_log+9)^0,w,c
  8653   000340  EC0B  F00C         	call	_SIO_SendBlocking
  8654   000344  0012               	return	
  8655   000346                     l4024:
  8656   000346  0E2D               	movlw	45
  8657   000348  EC0B  F00C         	call	_SIO_SendBlocking
  8658   00034C  0012               	return	
  8659   00034E                     l4026:
  8660   00034E  500B               	movf	(_log+10)^0,w,c
  8661   000350  EC0B  F00C         	call	_SIO_SendBlocking
  8662   000354  0012               	return	
  8663   000356                     l4028:
  8664   000356  500C               	movf	(_log+11)^0,w,c
  8665   000358  EC0B  F00C         	call	_SIO_SendBlocking
  8666   00035C  0012               	return	
  8667   00035E                     l4030:
  8668   00035E  500D               	movf	(_log+12)^0,w,c
  8669   000360  EC0B  F00C         	call	_SIO_SendBlocking
  8670   000364  0012               	return	
  8671   000366                     l4032:
  8672   000366  500E               	movf	(_log+13)^0,w,c
  8673   000368  EC0B  F00C         	call	_SIO_SendBlocking
  8674   00036C  6A36               	clrf	EEPROM_Motor@sendIndex^0,c
  8675   00036E                     l4036:
  8676   00036E  0E04               	movlw	4
  8677   000370  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8678   000372  0012               	return	
  8679   000374                     l4040:
  8680   000374  2A36               	incf	EEPROM_Motor@sendIndex^0,f,c
  8681   000376  0436               	decf	EEPROM_Motor@sendIndex^0,w,c
  8682                           
  8683                           ; Switch size 1, requested type "simple"
  8684                           ; Number of cases is 10, Range of values is 0 to 9
  8685                           ; switch strategies available:
  8686                           ; Name         Instructions Cycles
  8687                           ; simple_byte           31    16 (average)
  8688                           ;	Chosen strategy is simple_byte
  8689   000378  0A00               	xorlw	0	; case 0
  8690   00037A  B4D8               	btfsc	status,2,c
  8691   00037C  D7D0               	goto	l4014
  8692   00037E  0A01               	xorlw	1	; case 1
  8693   000380  B4D8               	btfsc	status,2,c
  8694   000382  D7D1               	goto	l4016
  8695   000384  0A03               	xorlw	3	; case 2
  8696   000386  B4D8               	btfsc	status,2,c
  8697   000388  D7D2               	goto	l4018
  8698   00038A  0A01               	xorlw	1	; case 3
  8699   00038C  B4D8               	btfsc	status,2,c
  8700   00038E  D7D3               	goto	l4020
  8701   000390  0A07               	xorlw	7	; case 4
  8702   000392  B4D8               	btfsc	status,2,c
  8703   000394  D7D4               	goto	l4022
  8704   000396  0A01               	xorlw	1	; case 5
  8705   000398  B4D8               	btfsc	status,2,c
  8706   00039A  D7D5               	goto	l4024
  8707   00039C  0A03               	xorlw	3	; case 6
  8708   00039E  B4D8               	btfsc	status,2,c
  8709   0003A0  D7D6               	goto	l4026
  8710   0003A2  0A01               	xorlw	1	; case 7
  8711   0003A4  B4D8               	btfsc	status,2,c
  8712   0003A6  D7D7               	goto	l4028
  8713   0003A8  0A0F               	xorlw	15	; case 8
  8714   0003AA  B4D8               	btfsc	status,2,c
  8715   0003AC  D7D8               	goto	l4030
  8716   0003AE  0A01               	xorlw	1	; case 9
  8717   0003B0  A4D8               	btfss	status,2,c
  8718   0003B2  0012               	return	
  8719   0003B4  D7D8               	goto	l4032
  8720   0003B6                     l4042:
  8721                           
  8722                           ;TAD_EEPROM.c: 146:                 SIO_SendString(" a les ");
  8723   0003B6  0E79               	movlw	low STR_20
  8724   0003B8  6E68               	movwf	SIO_SendString@str^0,c
  8725   0003BA  EC7A  F009         	call	_SIO_SendString	;wreg free
  8726                           
  8727                           ;TAD_EEPROM.c: 147:                 eepromSubState = 5;
  8728   0003BE  0E05               	movlw	5
  8729   0003C0  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8730                           
  8731                           ;TAD_EEPROM.c: 148:                 break;
  8732   0003C2  0012               	return	
  8733   0003C4                     l4046:
  8734   0003C4  5001               	movf	_log^0,w,c
  8735   0003C6  EC0B  F00C         	call	_SIO_SendBlocking
  8736   0003CA  0012               	return	
  8737   0003CC                     l4048:
  8738   0003CC  5002               	movf	(_log+1)^0,w,c
  8739   0003CE  EC0B  F00C         	call	_SIO_SendBlocking
  8740   0003D2  0012               	return	
  8741   0003D4                     l4050:
  8742   0003D4  0E3A               	movlw	58
  8743   0003D6  EC0B  F00C         	call	_SIO_SendBlocking
  8744   0003DA  0012               	return	
  8745   0003DC                     l4052:
  8746   0003DC  5003               	movf	(_log+2)^0,w,c
  8747   0003DE  EC0B  F00C         	call	_SIO_SendBlocking
  8748   0003E2  0012               	return	
  8749   0003E4                     l4054:
  8750   0003E4  5004               	movf	(_log+3)^0,w,c
  8751   0003E6  EC0B  F00C         	call	_SIO_SendBlocking
  8752   0003EA  0012               	return	
  8753   0003EC                     l4056:
  8754   0003EC  0E3A               	movlw	58
  8755   0003EE  EC0B  F00C         	call	_SIO_SendBlocking
  8756   0003F2  0012               	return	
  8757   0003F4                     l4058:
  8758   0003F4  5005               	movf	(_log+4)^0,w,c
  8759   0003F6  EC0B  F00C         	call	_SIO_SendBlocking
  8760   0003FA  0012               	return	
  8761   0003FC                     l4060:
  8762   0003FC  5006               	movf	(_log+5)^0,w,c
  8763   0003FE  EC0B  F00C         	call	_SIO_SendBlocking
  8764   000402  6A36               	clrf	EEPROM_Motor@sendIndex^0,c
  8765   000404  0E06               	movlw	6
  8766   000406  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8767   000408  0012               	return	
  8768   00040A                     l4068:
  8769   00040A  2A36               	incf	EEPROM_Motor@sendIndex^0,f,c
  8770   00040C  0436               	decf	EEPROM_Motor@sendIndex^0,w,c
  8771                           
  8772                           ; Switch size 1, requested type "simple"
  8773                           ; Number of cases is 8, Range of values is 0 to 7
  8774                           ; switch strategies available:
  8775                           ; Name         Instructions Cycles
  8776                           ; simple_byte           25    13 (average)
  8777                           ;	Chosen strategy is simple_byte
  8778   00040E  0A00               	xorlw	0	; case 0
  8779   000410  B4D8               	btfsc	status,2,c
  8780   000412  D7D8               	goto	l4046
  8781   000414  0A01               	xorlw	1	; case 1
  8782   000416  B4D8               	btfsc	status,2,c
  8783   000418  D7D9               	goto	l4048
  8784   00041A  0A03               	xorlw	3	; case 2
  8785   00041C  B4D8               	btfsc	status,2,c
  8786   00041E  D7DA               	goto	l4050
  8787   000420  0A01               	xorlw	1	; case 3
  8788   000422  B4D8               	btfsc	status,2,c
  8789   000424  D7DB               	goto	l4052
  8790   000426  0A07               	xorlw	7	; case 4
  8791   000428  B4D8               	btfsc	status,2,c
  8792   00042A  D7DC               	goto	l4054
  8793   00042C  0A01               	xorlw	1	; case 5
  8794   00042E  B4D8               	btfsc	status,2,c
  8795   000430  D7DD               	goto	l4056
  8796   000432  0A03               	xorlw	3	; case 6
  8797   000434  B4D8               	btfsc	status,2,c
  8798   000436  D7DE               	goto	l4058
  8799   000438  0A01               	xorlw	1	; case 7
  8800   00043A  A4D8               	btfss	status,2,c
  8801   00043C  0012               	return	
  8802   00043E  D7DE               	goto	l4060
  8803   000440                     l4070:
  8804                           
  8805                           ;TAD_EEPROM.c: 164:                 SIO_SendString(" - Estat critic detectat.\r\n");
  8806   000440  0E01               	movlw	low STR_21
  8807   000442  6E68               	movwf	SIO_SendString@str^0,c
  8808   000444  EC7A  F009         	call	_SIO_SendString	;wreg free
  8809                           
  8810                           ;TAD_EEPROM.c: 165:                 eepromSubState = 7;
  8811   000448  0E07               	movlw	7
  8812   00044A  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8813                           
  8814                           ;TAD_EEPROM.c: 166:                 break;
  8815   00044C  0012               	return	
  8816   00044E                     l4074:
  8817                           
  8818                           ;TAD_EEPROM.c: 169:                 iLog++;
  8819   00044E  2A41               	incf	_iLog^0,f,c
  8820                           
  8821                           ;TAD_EEPROM.c: 170:                 if (iLog >= totalLogs) {
  8822   000450  5042               	movf	_totalLogs^0,w,c
  8823   000452  5C41               	subwf	_iLog^0,w,c
  8824   000454  A0D8               	btfss	status,0,c
  8825   000456  D740               	goto	l4000
  8826                           
  8827                           ;TAD_EEPROM.c: 171:                     eepromSubState = 8;
  8828   000458  0E08               	movlw	8
  8829   00045A  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8830                           
  8831                           ;TAD_EEPROM.c: 172:                 } else {
  8832   00045C  0012               	return	
  8833   00045E                     l4082:
  8834                           
  8835                           ;TAD_EEPROM.c: 178:                 SIO_SendString("FINISH\r\n");
  8836   00045E  0E5E               	movlw	low STR_22
  8837   000460  6E68               	movwf	SIO_SendString@str^0,c
  8838   000462  EC7A  F009         	call	_SIO_SendString	;wreg free
  8839                           
  8840                           ;TAD_EEPROM.c: 179:                 pendingReadRequest = 0;
  8841   000466  6A3F               	clrf	_pendingReadRequest^0,c
  8842   000468                     l4086:
  8843                           
  8844                           ;TAD_EEPROM.c: 180:                 estatGlobal = 0;
  8845   000468  6A39               	clrf	EEPROM_Motor@estatGlobal^0,c
  8846                           
  8847                           ;TAD_EEPROM.c: 181:                 break;
  8848   00046A  0012               	return	
  8849   00046C                     l4090:
  8850   00046C  5038               	movf	EEPROM_Motor@eepromSubState^0,w,c
  8851                           
  8852                           ; Switch size 1, requested type "simple"
  8853                           ; Number of cases is 9, Range of values is 0 to 8
  8854                           ; switch strategies available:
  8855                           ; Name         Instructions Cycles
  8856                           ; simple_byte           28    15 (average)
  8857                           ;	Chosen strategy is simple_byte
  8858   00046E  0A00               	xorlw	0	; case 0
  8859   000470  B4D8               	btfsc	status,2,c
  8860   000472  D72B               	goto	l3996
  8861   000474  0A01               	xorlw	1	; case 1
  8862   000476  B4D8               	btfsc	status,2,c
  8863   000478  D735               	goto	l4002
  8864   00047A  0A03               	xorlw	3	; case 2
  8865   00047C  B4D8               	btfsc	status,2,c
  8866   00047E  D748               	goto	l4010
  8867   000480  0A01               	xorlw	1	; case 3
  8868   000482  B4D8               	btfsc	status,2,c
  8869   000484  D777               	goto	l4040
  8870   000486  0A07               	xorlw	7	; case 4
  8871   000488  B4D8               	btfsc	status,2,c
  8872   00048A  D795               	goto	l4042
  8873   00048C  0A01               	xorlw	1	; case 5
  8874   00048E  B4D8               	btfsc	status,2,c
  8875   000490  D7BC               	goto	l4068
  8876   000492  0A03               	xorlw	3	; case 6
  8877   000494  B4D8               	btfsc	status,2,c
  8878   000496  D7D4               	goto	l4070
  8879   000498  0A01               	xorlw	1	; case 7
  8880   00049A  B4D8               	btfsc	status,2,c
  8881   00049C  D7D8               	goto	l4074
  8882   00049E  0A0F               	xorlw	15	; case 8
  8883   0004A0  A4D8               	btfss	status,2,c
  8884   0004A2  0012               	return	
  8885   0004A4  D7DC               	goto	l4082
  8886   0004A6                     l4092:
  8887   0004A6  0E02               	movlw	2
  8888   0004A8  1839               	xorwf	EEPROM_Motor@estatGlobal^0,w,c
  8889   0004AA  A4D8               	btfss	status,2,c
  8890   0004AC  0012               	return	
  8891   0004AE  D048               	goto	l4144
  8892   0004B0                     l4096:
  8893                           
  8894                           ;TAD_EEPROM.c: 189:                 if (totalLogs >= 15) {
  8895   0004B0  0E0E               	movlw	14
  8896   0004B2  6442               	cpfsgt	_totalLogs^0,c
  8897   0004B4  D731               	goto	l4012
  8898                           
  8899                           ;TAD_EEPROM.c: 190:                     idxDesplac = 0;
  8900   0004B6  6A3D               	clrf	_idxDesplac^0,c
  8901                           
  8902                           ;TAD_EEPROM.c: 191:                     idxChar = 0;
  8903   0004B8  6A3C               	clrf	_idxChar^0,c
  8904   0004BA  D70E               	goto	l4000
  8905   0004BC                     l4104:
  8906                           
  8907                           ;TAD_EEPROM.c: 199:                 if (idxChar < 14) {
  8908   0004BC  0E0E               	movlw	14
  8909   0004BE  603C               	cpfslt	_idxChar^0,c
  8910   0004C0  D014               	goto	l594
  8911                           
  8912                           ;TAD_EEPROM.c: 200:                     unsigned char from = 0x00 + ((idxDesplac + 1) * 
      +                          14) + idxChar;
  8913   0004C2  503D               	movf	_idxDesplac^0,w,c
  8914   0004C4  0D0E               	mullw	14
  8915   0004C6  50F3               	movf	243,w,c
  8916   0004C8  243C               	addwf	_idxChar^0,w,c
  8917   0004CA  0F0E               	addlw	14
  8918   0004CC  6E6A               	movwf	EEPROM_Motor@from^0,c
  8919                           
  8920                           ;TAD_EEPROM.c: 201:                     unsigned char to = 0x00 + (idxDesplac * 14) + id
      +                          xChar;
  8921   0004CE  503D               	movf	_idxDesplac^0,w,c
  8922   0004D0  0D0E               	mullw	14
  8923   0004D2  50F3               	movf	243,w,c
  8924   0004D4  243C               	addwf	_idxChar^0,w,c
  8925   0004D6  6E6B               	movwf	EEPROM_Motor@to^0,c
  8926                           
  8927                           ;TAD_EEPROM.c: 202:                     writeByte(to, readByte(from));
  8928   0004D8  506A               	movf	EEPROM_Motor@from^0,w,c
  8929   0004DA  ECDD  F00B         	call	_readByte
  8930   0004DE  6E68               	movwf	writeByte@data^0,c
  8931   0004E0  506B               	movf	EEPROM_Motor@to^0,w,c
  8932   0004E2  EC20  F00A         	call	_writeByte
  8933                           
  8934                           ;TAD_EEPROM.c: 203:                     idxChar++;
  8935   0004E6  2A3C               	incf	_idxChar^0,f,c
  8936                           
  8937                           ;TAD_EEPROM.c: 204:                 } else {
  8938   0004E8  0012               	return	
  8939   0004EA                     l594:
  8940                           
  8941                           ;TAD_EEPROM.c: 205:                     idxChar = 0;
  8942   0004EA  6A3C               	clrf	_idxChar^0,c
  8943                           
  8944                           ;TAD_EEPROM.c: 206:                     idxDesplac++;
  8945   0004EC  2A3D               	incf	_idxDesplac^0,f,c
  8946                           
  8947                           ;TAD_EEPROM.c: 207:                     if (idxDesplac >= 15 - 1) {
  8948   0004EE  0E0D               	movlw	13
  8949   0004F0  643D               	cpfsgt	_idxDesplac^0,c
  8950   0004F2  0012               	return	
  8951                           
  8952                           ;TAD_EEPROM.c: 208:                         totalLogs = 15 - 1;
  8953   0004F4  0E0E               	movlw	14
  8954   0004F6  6E42               	movwf	_totalLogs^0,c
  8955                           
  8956                           ;TAD_EEPROM.c: 209:                         eepromSubState = 3;
  8957   0004F8  0E03               	movlw	3
  8958   0004FA  6E38               	movwf	EEPROM_Motor@eepromSubState^0,c
  8959   0004FC  0012               	return	
  8960   0004FE                     l4118:
  8961                           
  8962                           ;TAD_EEPROM.c: 215:                 if (idxLog < 14) {
  8963   0004FE  0E0E               	movlw	14
  8964   000500  603E               	cpfslt	_idxLog^0,c
  8965   000502  D735               	goto	l4036
  8966                           
  8967                           ;TAD_EEPROM.c: 216:                     unsigned char addr = 0x00 + (totalLogs * 14) + i
      +                          dxLog;
  8968   000504  5042               	movf	_totalLogs^0,w,c
  8969   000506  0D0E               	mullw	14
  8970   000508  50F3               	movf	243,w,c
  8971   00050A  243E               	addwf	_idxLog^0,w,c
  8972   00050C  6E6C               	movwf	EEPROM_Motor@addr^0,c
  8973                           
  8974                           ;TAD_EEPROM.c: 217:                     writeByte(addr, logPend[idxLog]);
  8975   00050E  503E               	movf	_idxLog^0,w,c
  8976   000510  0F99               	addlw	low _logPend
  8977   000512  6ED9               	movwf	fsr2l,c
  8978   000514  6ADA               	clrf	fsr2h,c
  8979   000516  50DF               	movf	indf2,w,c
  8980   000518  6E68               	movwf	writeByte@data^0,c
  8981   00051A  506C               	movf	EEPROM_Motor@addr^0,w,c
  8982   00051C  EC20  F00A         	call	_writeByte
  8983                           
  8984                           ;TAD_EEPROM.c: 218:                     idxLog++;
  8985   000520  2A3E               	incf	_idxLog^0,f,c
  8986                           
  8987                           ;TAD_EEPROM.c: 219:                 } else {
  8988   000522  0012               	return	
  8989   000524                     l4128:
  8990                           
  8991                           ;TAD_EEPROM.c: 225:                 totalLogs++;
  8992   000524  2A42               	incf	_totalLogs^0,f,c
  8993                           
  8994                           ;TAD_EEPROM.c: 226:                 if (totalLogs > 15) totalLogs = 15;
  8995   000526  0E0F               	movlw	15
  8996   000528  6442               	cpfsgt	_totalLogs^0,c
  8997   00052A  D002               	goto	l4134
  8998   00052C  0E0F               	movlw	15
  8999   00052E  6E42               	movwf	_totalLogs^0,c
  9000   000530                     l4134:
  9001                           
  9002                           ;TAD_EEPROM.c: 227:                 writeByte(0xFF, totalLogs);
  9003   000530  C042  F068         	movff	_totalLogs,writeByte@data
  9004   000534  0EFF               	movlw	255
  9005   000536  EC20  F00A         	call	_writeByte
  9006                           
  9007                           ;TAD_EEPROM.c: 228:                 idxLog = 0;
  9008   00053A  6A3E               	clrf	_idxLog^0,c
  9009                           
  9010                           ;TAD_EEPROM.c: 229:                 desantLog = 0;
  9011   00053C  6A3B               	clrf	_desantLog^0,c
  9012   00053E  D794               	goto	l4086
  9013   000540                     l4144:
  9014   000540  5038               	movf	EEPROM_Motor@eepromSubState^0,w,c
  9015                           
  9016                           ; Switch size 1, requested type "simple"
  9017                           ; Number of cases is 4, Range of values is 0 to 4
  9018                           ; switch strategies available:
  9019                           ; Name         Instructions Cycles
  9020                           ; simple_byte           13     7 (average)
  9021                           ;	Chosen strategy is simple_byte
  9022   000542  0A00               	xorlw	0	; case 0
  9023   000544  B4D8               	btfsc	status,2,c
  9024   000546  D7B4               	goto	l4096
  9025   000548  0A01               	xorlw	1	; case 1
  9026   00054A  B4D8               	btfsc	status,2,c
  9027   00054C  D7B7               	goto	l4104
  9028   00054E  0A02               	xorlw	2	; case 3
  9029   000550  B4D8               	btfsc	status,2,c
  9030   000552  D7D5               	goto	l4118
  9031   000554  0A07               	xorlw	7	; case 4
  9032   000556  A4D8               	btfss	status,2,c
  9033   000558  0012               	return	
  9034   00055A  D7E4               	goto	l4128
  9035   00055C                     __end_of_EEPROM_Motor:
  9036                           	callstack 0
  9037                           
  9038 ;; *************** function _writeByte *****************
  9039 ;; Defined at:
  9040 ;;		line 49 in file "TAD_EEPROM.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  addr            1    wreg     unsigned char 
  9043 ;;  data            1   12[COMRAM] unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  addr            1   13[COMRAM] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1
  9055 ;;      Params:         1       0       0
  9056 ;;      Locals:         1       0       0
  9057 ;;      Temps:          0       0       0
  9058 ;;      Totals:         2       0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used: 1
  9061 ;; Hardware stack levels required when called: 4
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_EEPROM_DemanaEsborrarLogs
  9066 ;;		_EEPROM_Motor
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text69
  9071   001440                     __ptext69:
  9072                           	callstack 0
  9073   001440                     _writeByte:
  9074                           	callstack 22
  9075                           
  9076                           ;incstack = 0
  9077                           ;writeByte@addr stored from wreg
  9078   001440  6E69               	movwf	writeByte@addr^0,c
  9079                           
  9080                           ;TAD_EEPROM.c: 50:     EEADR = addr;
  9081   001442  C069  FFA9         	movff	writeByte@addr,4009	;volatile
  9082                           
  9083                           ;TAD_EEPROM.c: 51:     EEDATA = data;
  9084   001446  C068  FFA8         	movff	writeByte@data,4008	;volatile
  9085                           
  9086                           ;TAD_EEPROM.c: 52:     EECON1bits.EEPGD = 0;
  9087   00144A  9EA6               	bcf	166,7,c	;volsfr
  9088                           
  9089                           ;TAD_EEPROM.c: 53:     EECON1bits.CFGS = 0;
  9090   00144C  9CA6               	bcf	166,6,c	;volsfr
  9091                           
  9092                           ;TAD_EEPROM.c: 54:     EECON1bits.WREN = 1;
  9093   00144E  84A6               	bsf	166,2,c	;volsfr
  9094                           
  9095                           ;TAD_EEPROM.c: 55:     INTCONbits.GIE = 0;
  9096   001450  9EF2               	bcf	242,7,c	;volatile
  9097                           
  9098                           ;TAD_EEPROM.c: 56:     EECON2 = 0x55;
  9099   001452  0E55               	movlw	85
  9100   001454  6EA7               	movwf	167,c	;volsfr
  9101                           
  9102                           ;TAD_EEPROM.c: 57:     EECON2 = 0xAA;
  9103   001456  0EAA               	movlw	170
  9104   001458  6EA7               	movwf	167,c	;volsfr
  9105                           
  9106                           ;TAD_EEPROM.c: 58:     EECON1bits.WR = 1;
  9107   00145A  82A6               	bsf	166,1,c	;volsfr
  9108                           
  9109                           ;TAD_EEPROM.c: 59:     INTCONbits.GIE = 1;
  9110   00145C  8EF2               	bsf	242,7,c	;volatile
  9111   00145E                     l519:
  9112   00145E  B2A6               	btfsc	166,1,c	;volsfr
  9113   001460  D7FE               	goto	l519
  9114                           
  9115                           ;TAD_EEPROM.c: 61:     EECON1bits.WREN = 0;
  9116   001462  94A6               	bcf	166,2,c	;volsfr
  9117   001464  0012               	return		;funcret
  9118   001466                     __end_of_writeByte:
  9119                           	callstack 0
  9120                           
  9121 ;; *************** function _SIO_SendString *****************
  9122 ;; Defined at:
  9123 ;;		line 38 in file "TAD_SIO.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  str             1   12[COMRAM] PTR const unsigned char 
  9126 ;;		 -> STR_25(9), STR_24(3), STR_23(11), STR_22(9), 
  9127 ;;		 -> STR_21(28), STR_20(8), STR_19(10), STR_3(3), 
  9128 ;;		 -> STR_2(12), STR_1(3), 
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;		None
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  1    wreg      void 
  9133 ;; Registers used:
  9134 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1
  9140 ;;      Params:         1       0       0
  9141 ;;      Locals:         0       0       0
  9142 ;;      Temps:          0       0       0
  9143 ;;      Totals:         1       0       0
  9144 ;;Total ram usage:        1 bytes
  9145 ;; Hardware stack levels used: 1
  9146 ;; Hardware stack levels required when called: 5
  9147 ;; This function calls:
  9148 ;;		_SIO_Send
  9149 ;; This function is called by:
  9150 ;;		_EEPROM_Motor
  9151 ;;		_RAM_Motor
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text70
  9156   0012F4                     __ptext70:
  9157                           	callstack 0
  9158   0012F4                     _SIO_SendString:
  9159                           	callstack 24
  9160                           
  9161                           ;TAD_SIO.c: 39:     while(*str) {
  9162                           
  9163                           ;incstack = 0
  9164   0012F4  D00B               	goto	l3572
  9165   0012F6                     l3568:
  9166                           
  9167                           ;TAD_SIO.c: 40:         if (SIO_Send(*str)) {
  9168   0012F6  C068  FFF6         	movff	SIO_SendString@str,tblptrl
  9169   0012FA                     	if	1	;There is more than 1 active tblptr byte
  9170   0012FA  0E02               	movlw	high __psmallconst
  9171   0012FC  6EF7               	movwf	tblptrh,c
  9172   0012FE                     	endif
  9173   0012FE                     	if	0	;tblptru may be non-zero
  9174   0012FE                     	endif
  9175   0012FE                     	if	0	;tblptru may be non-zero
  9176   0012FE                     	endif
  9177   0012FE  0008               	tblrd		*
  9178   001300  50F5               	movf	tablat,w,c
  9179   001302  ECB2  F00B         	call	_SIO_Send
  9180   001306  0900               	iorlw	0
  9181   001308  A4D8               	btfss	status,2,c
  9182                           
  9183                           ;TAD_SIO.c: 41:             str++;
  9184   00130A  2A68               	incf	SIO_SendString@str^0,f,c
  9185   00130C                     l3572:
  9186                           
  9187                           ;TAD_SIO.c: 39:     while(*str) {
  9188   00130C  C068  FFF6         	movff	SIO_SendString@str,tblptrl
  9189   001310                     	if	1	;There is more than 1 active tblptr byte
  9190   001310  0E02               	movlw	high __psmallconst
  9191   001312  6EF7               	movwf	tblptrh,c
  9192   001314                     	endif
  9193   001314                     	if	0	;tblptru may be non-zero
  9194   001314                     	endif
  9195   001314                     	if	0	;tblptru may be non-zero
  9196   001314                     	endif
  9197   001314  0008               	tblrd		*
  9198   001316  50F5               	movf	tablat,w,c
  9199   001318  0900               	iorlw	0
  9200   00131A  B4D8               	btfsc	status,2,c
  9201   00131C  0012               	return	
  9202   00131E  D7EB               	goto	l3568
  9203   001320                     __end_of_SIO_SendString:
  9204                           	callstack 0
  9205                           
  9206 ;; *************** function _SIO_Send *****************
  9207 ;; Defined at:
  9208 ;;		line 21 in file "TAD_SIO.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  character       1    wreg     unsigned char 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;  character       1   11[COMRAM] unsigned char 
  9213 ;; Return value:  Size  Location     Type
  9214 ;;                  1    wreg      unsigned char 
  9215 ;; Registers used:
  9216 ;;		wreg
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1
  9222 ;;      Params:         0       0       0
  9223 ;;      Locals:         1       0       0
  9224 ;;      Temps:          0       0       0
  9225 ;;      Totals:         1       0       0
  9226 ;;Total ram usage:        1 bytes
  9227 ;; Hardware stack levels used: 1
  9228 ;; Hardware stack levels required when called: 4
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_SIO_SendString
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text71
  9237   001764                     __ptext71:
  9238                           	callstack 0
  9239   001764                     _SIO_Send:
  9240                           	callstack 24
  9241                           
  9242                           ;incstack = 0
  9243                           ;SIO_Send@character stored from wreg
  9244   001764  6E67               	movwf	SIO_Send@character^0,c
  9245                           
  9246                           ;TAD_SIO.c: 22:     if (TXSTAbits.TRMT) {
  9247   001766  A2AC               	btfss	172,1,c	;volatile
  9248   001768  D004               	goto	l3254
  9249                           
  9250                           ;TAD_SIO.c: 23:         TXREG = character;
  9251   00176A  C067  FFAD         	movff	SIO_Send@character,4013	;volatile
  9252                           
  9253                           ;TAD_SIO.c: 24:         return 1;
  9254   00176E  0E01               	movlw	1
  9255   001770  0012               	return	
  9256   001772                     l3254:
  9257                           
  9258                           ;TAD_SIO.c: 26:     return 0;
  9259   001772  0E00               	movlw	0
  9260   001774  0012               	return		;funcret
  9261   001776                     __end_of_SIO_Send:
  9262                           	callstack 0
  9263                           
  9264 ;; *************** function _SIO_SendBlocking *****************
  9265 ;; Defined at:
  9266 ;;		line 53 in file "TAD_SIO.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  character       1    wreg     unsigned char 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  character       1   11[COMRAM] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1
  9280 ;;      Params:         0       0       0
  9281 ;;      Locals:         1       0       0
  9282 ;;      Temps:          0       0       0
  9283 ;;      Totals:         1       0       0
  9284 ;;Total ram usage:        1 bytes
  9285 ;; Hardware stack levels used: 1
  9286 ;; Hardware stack levels required when called: 4
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_SIO_SendDecimal
  9291 ;;		_EEPROM_Motor
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           	psect	text72
  9296   001816                     __ptext72:
  9297                           	callstack 0
  9298   001816                     _SIO_SendBlocking:
  9299                           	callstack 24
  9300                           
  9301                           ;incstack = 0
  9302                           ;SIO_SendBlocking@character stored from wreg
  9303   001816  6E67               	movwf	SIO_SendBlocking@character^0,c
  9304   001818                     
  9305                           ;TAD_SIO.c: 54:     while (!TXSTAbits.TRMT);
  9306   001818  A2AC               	btfss	172,1,c	;volatile
  9307   00181A  D7FE               	goto	l3258
  9308                           
  9309                           ;TAD_SIO.c: 55:     TXREG = character;
  9310   00181C  C067  FFAD         	movff	SIO_SendBlocking@character,4013	;volatile
  9311   001820  0012               	return		;funcret
  9312   001822                     __end_of_SIO_SendBlocking:
  9313                           	callstack 0
  9314                           
  9315 ;; *************** function _EEPROM_Init *****************
  9316 ;; Defined at:
  9317 ;;		line 18 in file "TAD_EEPROM.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;		None
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      void 
  9324 ;; Registers used:
  9325 ;;		wreg, status,2, status,0, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMRAM   BANK0   BANK1
  9331 ;;      Params:         0       0       0
  9332 ;;      Locals:         0       0       0
  9333 ;;      Temps:          0       0       0
  9334 ;;      Totals:         0       0       0
  9335 ;;Total ram usage:        0 bytes
  9336 ;; Hardware stack levels used: 1
  9337 ;; Hardware stack levels required when called: 5
  9338 ;; This function calls:
  9339 ;;		_readByte
  9340 ;; This function is called by:
  9341 ;;		_main
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text73
  9346   001776                     __ptext73:
  9347                           	callstack 0
  9348   001776                     _EEPROM_Init:
  9349                           	callstack 25
  9350                           
  9351                           ;TAD_EEPROM.c: 19:     totalLogs = readByte(0xFF);
  9352                           
  9353                           ;incstack = 0
  9354   001776  0EFF               	movlw	255
  9355   001778  ECDD  F00B         	call	_readByte
  9356   00177C  6E42               	movwf	_totalLogs^0,c
  9357                           
  9358                           ;TAD_EEPROM.c: 20:     if (totalLogs > 15) totalLogs = 0;
  9359   00177E  0E0F               	movlw	15
  9360   001780  6442               	cpfsgt	_totalLogs^0,c
  9361   001782  0012               	return	
  9362   001784  6A42               	clrf	_totalLogs^0,c
  9363   001786  0012               	return		;funcret
  9364   001788                     __end_of_EEPROM_Init:
  9365                           	callstack 0
  9366                           
  9367 ;; *************** function _readByte *****************
  9368 ;; Defined at:
  9369 ;;		line 65 in file "TAD_EEPROM.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;  addr            1    wreg     unsigned char 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  addr            1   11[COMRAM] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      unsigned char 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1
  9383 ;;      Params:         0       0       0
  9384 ;;      Locals:         1       0       0
  9385 ;;      Temps:          0       0       0
  9386 ;;      Totals:         1       0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used: 1
  9389 ;; Hardware stack levels required when called: 4
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_EEPROM_Init
  9394 ;;		_EEPROM_Motor
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398                           	psect	text74
  9399   0017BA                     __ptext74:
  9400                           	callstack 0
  9401   0017BA                     _readByte:
  9402                           	callstack 25
  9403                           
  9404                           ;incstack = 0
  9405                           ;readByte@addr stored from wreg
  9406   0017BA  6E67               	movwf	readByte@addr^0,c
  9407                           
  9408                           ;TAD_EEPROM.c: 66:     EEADR = addr;
  9409   0017BC  C067  FFA9         	movff	readByte@addr,4009	;volatile
  9410                           
  9411                           ;TAD_EEPROM.c: 67:     EECON1bits.EEPGD = 0;
  9412   0017C0  9EA6               	bcf	166,7,c	;volsfr
  9413                           
  9414                           ;TAD_EEPROM.c: 68:     EECON1bits.CFGS = 0;
  9415   0017C2  9CA6               	bcf	166,6,c	;volsfr
  9416                           
  9417                           ;TAD_EEPROM.c: 69:     EECON1bits.RD = 1;
  9418   0017C4  80A6               	bsf	166,0,c	;volsfr
  9419                           
  9420                           ;TAD_EEPROM.c: 70:     return EEDATA;
  9421   0017C6  50A8               	movf	168,w,c	;volatile
  9422   0017C8  0012               	return		;funcret
  9423   0017CA                     __end_of_readByte:
  9424                           	callstack 0
  9425                           
  9426 ;; *************** function _RSI_High *****************
  9427 ;; Defined at:
  9428 ;;		line 73 in file "main.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;		None
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;		None
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      void 
  9435 ;; Registers used:
  9436 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1
  9442 ;;      Params:         0       0       0
  9443 ;;      Locals:         0       0       0
  9444 ;;      Temps:          4       0       0
  9445 ;;      Totals:         4       0       0
  9446 ;;Total ram usage:        4 bytes
  9447 ;; Hardware stack levels used: 1
  9448 ;; Hardware stack levels required when called: 3
  9449 ;; This function calls:
  9450 ;;		_RSI_INT1
  9451 ;;		_RSI_Timer0
  9452 ;; This function is called by:
  9453 ;;		Interrupt level 2
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	intcode
  9458   000008                     __pintcode:
  9459                           	callstack 0
  9460   000008                     _RSI_High:
  9461                           	callstack 20
  9462                           
  9463                           ;incstack = 0
  9464   000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9465   00000A  CFF6 F063          	movff	tblptrl,??_RSI_High
  9466   00000E  CFF7 F064          	movff	tblptrh,??_RSI_High+1
  9467   000012  CFF8 F065          	movff	tblptru,??_RSI_High+2
  9468   000016  CFF5 F066          	movff	tablat,??_RSI_High+3
  9469                           
  9470                           ;main.c: 74:     if (INTCONbits.TMR0IF) RSI_Timer0();
  9471   00001A  B4F2               	btfsc	242,2,c	;volatile
  9472   00001C  EC49  F00B         	call	_RSI_Timer0	;wreg free
  9473                           
  9474                           ;main.c: 75:     if (INTCON3bits.INT1IF) RSI_INT1();
  9475   000020  B0F0               	btfsc	240,0,c	;volatile
  9476   000022  EC2A  F007         	call	_RSI_INT1	;wreg free
  9477   000026  C066  FFF5         	movff	??_RSI_High+3,tablat
  9478   00002A  C065  FFF8         	movff	??_RSI_High+2,tblptru
  9479   00002E  C064  FFF7         	movff	??_RSI_High+1,tblptrh
  9480   000032  C063  FFF6         	movff	??_RSI_High,tblptrl
  9481   000036  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9482   000038  0011               	retfie		f
  9483   00003A                     __end_of_RSI_High:
  9484                           	callstack 0
  9485                           
  9486 ;; *************** function _RSI_Timer0 *****************
  9487 ;; Defined at:
  9488 ;;		line 17 in file "TAD_TIMER.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;		None
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  1    wreg      void 
  9495 ;; Registers used:
  9496 ;;		wreg, status,2, status,0
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMRAM   BANK0   BANK1
  9502 ;;      Params:         0       0       0
  9503 ;;      Locals:         0       0       0
  9504 ;;      Temps:          0       0       0
  9505 ;;      Totals:         0       0       0
  9506 ;;Total ram usage:        0 bytes
  9507 ;; Hardware stack levels used: 1
  9508 ;; This function calls:
  9509 ;;		Nothing
  9510 ;; This function is called by:
  9511 ;;		_RSI_High
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text76
  9516   001692                     __ptext76:
  9517                           	callstack 0
  9518   001692                     _RSI_Timer0:
  9519                           	callstack 22
  9520                           
  9521                           ;TAD_TIMER.c: 19:     TMR0=55536;
  9522                           
  9523                           ;incstack = 0
  9524   001692  0ED8               	movlw	216
  9525   001694  6ED7               	movwf	215,c	;volatile
  9526   001696  0EF0               	movlw	240
  9527   001698  6ED6               	movwf	214,c	;volatile
  9528                           
  9529                           ;TAD_TIMER.c: 20:     TMR0IF=0;
  9530   00169A  94F2               	bcf	4082,2,c	;volatile
  9531                           
  9532                           ;TAD_TIMER.c: 21:     Tics++;
  9533   00169C  0E01               	movlw	1
  9534   00169E  2610               	addwf	_Tics^0,f,c	;volatile
  9535   0016A0  0E00               	movlw	0
  9536   0016A2  2211               	addwfc	(_Tics+1)^0,f,c	;volatile
  9537   0016A4  2212               	addwfc	(_Tics+2)^0,f,c	;volatile
  9538   0016A6  2213               	addwfc	(_Tics+3)^0,f,c	;volatile
  9539   0016A8  0012               	return		;funcret
  9540   0016AA                     __end_of_RSI_Timer0:
  9541                           	callstack 0
  9542                           
  9543 ;; *************** function _RSI_INT1 *****************
  9544 ;; Defined at:
  9545 ;;		line 55 in file "TAD_SISTEMA.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      void 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1
  9559 ;;      Params:         0       0       0
  9560 ;;      Locals:         0       0       0
  9561 ;;      Temps:          0       0       0
  9562 ;;      Totals:         0       0       0
  9563 ;;Total ram usage:        0 bytes
  9564 ;; Hardware stack levels used: 1
  9565 ;; Hardware stack levels required when called: 2
  9566 ;; This function calls:
  9567 ;;		_RTC_DemanaTime
  9568 ;;		i2_SIO_SendBlocking
  9569 ;;		i2_SIO_SendDecimal
  9570 ;;		i2_SIO_SendString
  9571 ;; This function is called by:
  9572 ;;		_RSI_High
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text77
  9577   000E54                     __ptext77:
  9578                           	callstack 0
  9579   000E54                     _RSI_INT1:
  9580                           	callstack 20
  9581                           
  9582                           ;TAD_SISTEMA.c: 56:     INTCON3bits.INT1IF = 0;
  9583                           
  9584                           ;incstack = 0
  9585   000E54  90F0               	bcf	240,0,c	;volatile
  9586                           
  9587                           ;TAD_SISTEMA.c: 58:     SIO_SendDecimal(minuts); SIO_SendString("\r\n");
  9588   000E56  5055               	movf	_minuts^0,w,c
  9589   000E58  EC26  F008         	call	i2_SIO_SendDecimal
  9590   000E5C  0E1A               	movlw	low (STR_21+25)
  9591   000E5E  6E5D               	movwf	i2SIO_SendString@str^0,c
  9592   000E60  EC90  F009         	call	i2_SIO_SendString	;wreg free
  9593                           
  9594                           ;TAD_SISTEMA.c: 60:     if (!systemInitialized) return;
  9595   000E64  5050               	movf	_systemInitialized^0,w,c
  9596   000E66  B4D8               	btfsc	status,2,c
  9597   000E68  0012               	return	
  9598                           
  9599                           ;TAD_SISTEMA.c: 62:     RTC_DemanaTime(&hora, &minuts, &segons, &dia, &mes, &any);
  9600   000E6A  0E56               	movlw	low _hora
  9601   000E6C  6E5C               	movwf	RTC_DemanaTime@hh^0,c
  9602   000E6E  0E55               	movlw	low _minuts
  9603   000E70  6E5D               	movwf	RTC_DemanaTime@mm^0,c
  9604   000E72  0E54               	movlw	low _segons
  9605   000E74  6E5E               	movwf	RTC_DemanaTime@ss^0,c
  9606   000E76  0E57               	movlw	low _dia
  9607   000E78  6E5F               	movwf	RTC_DemanaTime@dd^0,c
  9608   000E7A  0E58               	movlw	low _mes
  9609   000E7C  6E60               	movwf	RTC_DemanaTime@mo^0,c
  9610   000E7E  0E59               	movlw	low _any
  9611   000E80  6E61               	movwf	RTC_DemanaTime@yy^0,c
  9612   000E82  ECEE  F00A         	call	_RTC_DemanaTime	;wreg free
  9613                           
  9614                           ;TAD_SISTEMA.c: 64:     if(!segons) {
  9615   000E86  5054               	movf	_segons^0,w,c
  9616   000E88  A4D8               	btfss	status,2,c
  9617   000E8A  0012               	return	
  9618                           
  9619                           ;TAD_SISTEMA.c: 65:         SIO_SendString("UPDATETIME:");
  9620   000E8C  0E1D               	movlw	low STR_2
  9621   000E8E  6E5D               	movwf	i2SIO_SendString@str^0,c
  9622   000E90  EC90  F009         	call	i2_SIO_SendString	;wreg free
  9623                           
  9624                           ;TAD_SISTEMA.c: 66:         SIO_SendDecimal(hora);
  9625   000E94  5056               	movf	_hora^0,w,c
  9626   000E96  EC26  F008         	call	i2_SIO_SendDecimal
  9627                           
  9628                           ;TAD_SISTEMA.c: 67:         SIO_SendBlocking(':');
  9629   000E9A  0E3A               	movlw	58
  9630   000E9C  EC11  F00C         	call	i2_SIO_SendBlocking
  9631                           
  9632                           ;TAD_SISTEMA.c: 68:         SIO_SendDecimal(minuts);
  9633   000EA0  5055               	movf	_minuts^0,w,c
  9634   000EA2  EC26  F008         	call	i2_SIO_SendDecimal
  9635                           
  9636                           ;TAD_SISTEMA.c: 69:         SIO_SendString("\r\n");
  9637   000EA6  0E1A               	movlw	low (STR_21+25)
  9638   000EA8  6E5D               	movwf	i2SIO_SendString@str^0,c
  9639   000EAA  EC90  F009         	call	i2_SIO_SendString	;wreg free
  9640   000EAE  0012               	return		;funcret
  9641   000EB0                     __end_of_RSI_INT1:
  9642                           	callstack 0
  9643                           
  9644 ;; *************** function i2_SIO_SendString *****************
  9645 ;; Defined at:
  9646 ;;		line 38 in file "TAD_SIO.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  str             1    1[COMRAM] PTR const unsigned char 
  9649 ;;		 -> STR_25(9), STR_24(3), STR_23(11), STR_22(9), 
  9650 ;;		 -> STR_21(28), STR_20(8), STR_19(10), STR_3(3), 
  9651 ;;		 -> STR_2(12), STR_1(3), 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  1    wreg      void 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1
  9663 ;;      Params:         1       0       0
  9664 ;;      Locals:         0       0       0
  9665 ;;      Temps:          0       0       0
  9666 ;;      Totals:         1       0       0
  9667 ;;Total ram usage:        1 bytes
  9668 ;; Hardware stack levels used: 1
  9669 ;; Hardware stack levels required when called: 1
  9670 ;; This function calls:
  9671 ;;		i2_SIO_Send
  9672 ;; This function is called by:
  9673 ;;		_RSI_INT1
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text78
  9678   001320                     __ptext78:
  9679                           	callstack 0
  9680   001320                     i2_SIO_SendString:
  9681                           	callstack 20
  9682                           
  9683                           ;TAD_SIO.c: 39:     while(*str) {
  9684                           
  9685                           ;incstack = 0
  9686   001320  D00B               	goto	i2l3670
  9687   001322                     i2l3666:
  9688                           
  9689                           ;TAD_SIO.c: 40:         if (SIO_Send(*str)) {
  9690   001322  C05D  FFF6         	movff	i2SIO_SendString@str,tblptrl
  9691   001326                     	if	1	;There is more than 1 active tblptr byte
  9692   001326  0E02               	movlw	high __psmallconst
  9693   001328  6EF7               	movwf	tblptrh,c
  9694   00132A                     	endif
  9695   00132A                     	if	0	;tblptru may be non-zero
  9696   00132A                     	endif
  9697   00132A                     	if	0	;tblptru may be non-zero
  9698   00132A                     	endif
  9699   00132A  0008               	tblrd		*
  9700   00132C  50F5               	movf	tablat,w,c
  9701   00132E  ECC4  F00B         	call	i2_SIO_Send
  9702   001332  0900               	iorlw	0
  9703   001334  A4D8               	btfss	status,2,c
  9704                           
  9705                           ;TAD_SIO.c: 41:             str++;
  9706   001336  2A5D               	incf	i2SIO_SendString@str^0,f,c
  9707   001338                     i2l3670:
  9708                           
  9709                           ;TAD_SIO.c: 39:     while(*str) {
  9710   001338  C05D  FFF6         	movff	i2SIO_SendString@str,tblptrl
  9711   00133C                     	if	1	;There is more than 1 active tblptr byte
  9712   00133C  0E02               	movlw	high __psmallconst
  9713   00133E  6EF7               	movwf	tblptrh,c
  9714   001340                     	endif
  9715   001340                     	if	0	;tblptru may be non-zero
  9716   001340                     	endif
  9717   001340                     	if	0	;tblptru may be non-zero
  9718   001340                     	endif
  9719   001340  0008               	tblrd		*
  9720   001342  50F5               	movf	tablat,w,c
  9721   001344  0900               	iorlw	0
  9722   001346  B4D8               	btfsc	status,2,c
  9723   001348  0012               	return	
  9724   00134A  D7EB               	goto	i2l3666
  9725   00134C                     __end_ofi2_SIO_SendString:
  9726                           	callstack 0
  9727                           
  9728 ;; *************** function i2_SIO_Send *****************
  9729 ;; Defined at:
  9730 ;;		line 21 in file "TAD_SIO.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  character       1    wreg     unsigned char 
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  character       1    0[COMRAM] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      unsigned char 
  9737 ;; Registers used:
  9738 ;;		wreg
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1
  9744 ;;      Params:         0       0       0
  9745 ;;      Locals:         1       0       0
  9746 ;;      Temps:          0       0       0
  9747 ;;      Totals:         1       0       0
  9748 ;;Total ram usage:        1 bytes
  9749 ;; Hardware stack levels used: 1
  9750 ;; This function calls:
  9751 ;;		Nothing
  9752 ;; This function is called by:
  9753 ;;		i2_SIO_SendString
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           	psect	text79
  9758   001788                     __ptext79:
  9759                           	callstack 0
  9760   001788                     i2_SIO_Send:
  9761                           	callstack 20
  9762                           
  9763                           ;incstack = 0
  9764                           ;i2SIO_Send@character stored from wreg
  9765   001788  6E5C               	movwf	i2SIO_Send@character^0,c
  9766                           
  9767                           ;TAD_SIO.c: 22:     if (TXSTAbits.TRMT) {
  9768   00178A  A2AC               	btfss	172,1,c	;volatile
  9769   00178C  D004               	goto	i2l3426
  9770                           
  9771                           ;TAD_SIO.c: 23:         TXREG = character;
  9772   00178E  C05C  FFAD         	movff	i2SIO_Send@character,4013	;volatile
  9773                           
  9774                           ;TAD_SIO.c: 24:         return 1;
  9775   001792  0E01               	movlw	1
  9776   001794  0012               	return	
  9777   001796                     i2l3426:
  9778                           
  9779                           ;TAD_SIO.c: 26:     return 0;
  9780   001796  0E00               	movlw	0
  9781   001798  0012               	return		;funcret
  9782   00179A                     __end_ofi2_SIO_Send:
  9783                           	callstack 0
  9784                           
  9785 ;; *************** function i2_SIO_SendDecimal *****************
  9786 ;; Defined at:
  9787 ;;		line 58 in file "TAD_SIO.c"
  9788 ;; Parameters:    Size  Location     Type
  9789 ;;  num             1    wreg     unsigned char 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  num             1    6[COMRAM] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  1    wreg      void 
  9794 ;; Registers used:
  9795 ;;		wreg, status,2, status,0, cstack
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1
  9801 ;;      Params:         0       0       0
  9802 ;;      Locals:         1       0       0
  9803 ;;      Temps:          0       0       0
  9804 ;;      Totals:         1       0       0
  9805 ;;Total ram usage:        1 bytes
  9806 ;; Hardware stack levels used: 1
  9807 ;; Hardware stack levels required when called: 1
  9808 ;; This function calls:
  9809 ;;		i2_SIO_SendBlocking
  9810 ;;		i2___awmod
  9811 ;;		i2___lbdiv
  9812 ;;		i2___lbmod
  9813 ;; This function is called by:
  9814 ;;		_RSI_INT1
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           	psect	text80
  9819   00104C                     __ptext80:
  9820                           	callstack 0
  9821   00104C                     i2_SIO_SendDecimal:
  9822                           	callstack 20
  9823                           
  9824                           ;incstack = 0
  9825                           ;i2SIO_SendDecimal@num stored from wreg
  9826   00104C  6E62               	movwf	i2SIO_SendDecimal@num^0,c
  9827                           
  9828                           ;TAD_SIO.c: 59:     if (num >= 100) {
  9829   00104E  0E63               	movlw	99
  9830   001050  6462               	cpfsgt	i2SIO_SendDecimal@num^0,c
  9831   001052  D013               	goto	i2l241
  9832                           
  9833                           ;TAD_SIO.c: 60:         SIO_SendBlocking((num / 100) + '0');
  9834   001054  0E64               	movlw	100
  9835   001056  6E5C               	movwf	i2___lbdiv@divisor^0,c
  9836   001058  5062               	movf	i2SIO_SendDecimal@num^0,w,c
  9837   00105A  ECE5  F008         	call	i2___lbdiv
  9838   00105E  0F30               	addlw	48
  9839   001060  EC11  F00C         	call	i2_SIO_SendBlocking
  9840                           
  9841                           ;TAD_SIO.c: 61:         num %= 100;
  9842   001064  C062  F05C         	movff	i2SIO_SendDecimal@num,i2___awmod@dividend
  9843   001068  6A5D               	clrf	(i2___awmod@dividend+1)^0,c
  9844   00106A  0E00               	movlw	0
  9845   00106C  6E5F               	movwf	(i2___awmod@divisor+1)^0,c
  9846   00106E  0E64               	movlw	100
  9847   001070  6E5E               	movwf	i2___awmod@divisor^0,c
  9848   001072  EC91  F006         	call	i2___awmod	;wreg free
  9849   001076  505C               	movf	?i2___awmod^0,w,c
  9850   001078  6E62               	movwf	i2SIO_SendDecimal@num^0,c
  9851   00107A                     i2l241:
  9852                           
  9853                           ;TAD_SIO.c: 63:     SIO_SendBlocking((num / 10) + '0');
  9854   00107A  0E0A               	movlw	10
  9855   00107C  6E5C               	movwf	i2___lbdiv@divisor^0,c
  9856   00107E  5062               	movf	i2SIO_SendDecimal@num^0,w,c
  9857   001080  ECE5  F008         	call	i2___lbdiv
  9858   001084  0F30               	addlw	48
  9859   001086  EC11  F00C         	call	i2_SIO_SendBlocking
  9860                           
  9861                           ;TAD_SIO.c: 64:     SIO_SendBlocking((num % 10) + '0');
  9862   00108A  0E0A               	movlw	10
  9863   00108C  6E5C               	movwf	i2___lbmod@divisor^0,c
  9864   00108E  5062               	movf	i2SIO_SendDecimal@num^0,w,c
  9865   001090  EC0C  F00A         	call	i2___lbmod
  9866   001094  0F30               	addlw	48
  9867   001096  EC11  F00C         	call	i2_SIO_SendBlocking
  9868   00109A  0012               	return		;funcret
  9869   00109C                     __end_ofi2_SIO_SendDecimal:
  9870                           	callstack 0
  9871                           
  9872 ;; *************** function i2___lbmod *****************
  9873 ;; Defined at:
  9874 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lbmod.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  dividend        1    wreg     unsigned char 
  9877 ;;  divisor         1    0[COMRAM] unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  dividend        1    1[COMRAM] unsigned char 
  9880 ;;  rem             1    3[COMRAM] unsigned char 
  9881 ;;  counter         1    2[COMRAM] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      unsigned char 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1
  9891 ;;      Params:         1       0       0
  9892 ;;      Locals:         3       0       0
  9893 ;;      Temps:          0       0       0
  9894 ;;      Totals:         4       0       0
  9895 ;;Total ram usage:        4 bytes
  9896 ;; Hardware stack levels used: 1
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		i2_SIO_SendDecimal
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text81
  9905   001418                     __ptext81:
  9906                           	callstack 0
  9907   001418                     i2___lbmod:
  9908                           	callstack 20
  9909                           
  9910                           ;incstack = 0
  9911                           ;i2___lbmod@dividend stored from wreg
  9912   001418  6E5D               	movwf	i2___lbmod@dividend^0,c
  9913   00141A  0E08               	movlw	8
  9914   00141C  6E5E               	movwf	i2___lbmod@counter^0,c
  9915   00141E  6A5F               	clrf	i2___lbmod@rem^0,c
  9916   001420                     i2l3500:
  9917   001420  90D8               	bcf	status,0,c
  9918   001422  345D               	rlcf	i2___lbmod@dividend^0,w,c
  9919   001424  345F               	rlcf	i2___lbmod@rem^0,w,c
  9920   001426  6E5F               	movwf	i2___lbmod@rem^0,c
  9921   001428  90D8               	bcf	status,0,c
  9922   00142A  365D               	rlcf	i2___lbmod@dividend^0,f,c
  9923   00142C  505C               	movf	i2___lbmod@divisor^0,w,c
  9924   00142E  5C5F               	subwf	i2___lbmod@rem^0,w,c
  9925   001430  A0D8               	btfss	status,0,c
  9926   001432  D002               	goto	i2l3508
  9927   001434  505C               	movf	i2___lbmod@divisor^0,w,c
  9928   001436  5E5F               	subwf	i2___lbmod@rem^0,f,c
  9929   001438                     i2l3508:
  9930   001438  2E5E               	decfsz	i2___lbmod@counter^0,f,c
  9931   00143A  D7F2               	goto	i2l3500
  9932   00143C  505F               	movf	i2___lbmod@rem^0,w,c
  9933   00143E  0012               	return		;funcret
  9934   001440                     __end_ofi2___lbmod:
  9935                           	callstack 0
  9936                           
  9937 ;; *************** function i2___lbdiv *****************
  9938 ;; Defined at:
  9939 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lbdiv.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;  dividend        1    wreg     unsigned char 
  9942 ;;  divisor         1    0[COMRAM] unsigned char 
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;  dividend        1    1[COMRAM] unsigned char 
  9945 ;;  quotient        1    3[COMRAM] unsigned char 
  9946 ;;  counter         1    2[COMRAM] unsigned char 
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  1    wreg      unsigned char 
  9949 ;; Registers used:
  9950 ;;		wreg, status,2, status,0
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMRAM   BANK0   BANK1
  9956 ;;      Params:         1       0       0
  9957 ;;      Locals:         3       0       0
  9958 ;;      Temps:          0       0       0
  9959 ;;      Totals:         4       0       0
  9960 ;;Total ram usage:        4 bytes
  9961 ;; Hardware stack levels used: 1
  9962 ;; This function calls:
  9963 ;;		Nothing
  9964 ;; This function is called by:
  9965 ;;		i2_SIO_SendDecimal
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           	psect	text82
  9970   0011CA                     __ptext82:
  9971                           	callstack 0
  9972   0011CA                     i2___lbdiv:
  9973                           	callstack 20
  9974                           
  9975                           ;incstack = 0
  9976                           ;i2___lbdiv@dividend stored from wreg
  9977   0011CA  6E5D               	movwf	i2___lbdiv@dividend^0,c
  9978   0011CC  6A5F               	clrf	i2___lbdiv@quotient^0,c
  9979   0011CE  505C               	movf	i2___lbdiv@divisor^0,w,c
  9980   0011D0  B4D8               	btfsc	status,2,c
  9981   0011D2  D015               	goto	i2l3492
  9982   0011D4  0E01               	movlw	1
  9983   0011D6  6E5E               	movwf	i2___lbdiv@counter^0,c
  9984   0011D8  D003               	goto	i2l3480
  9985   0011DA                     i2l3476:
  9986   0011DA  90D8               	bcf	status,0,c
  9987   0011DC  365C               	rlcf	i2___lbdiv@divisor^0,f,c
  9988   0011DE  2A5E               	incf	i2___lbdiv@counter^0,f,c
  9989   0011E0                     i2l3480:
  9990   0011E0  AE5C               	btfss	i2___lbdiv@divisor^0,7,c
  9991   0011E2  D7FB               	goto	i2l3476
  9992   0011E4                     i2u192_40:
  9993   0011E4  90D8               	bcf	status,0,c
  9994   0011E6  365F               	rlcf	i2___lbdiv@quotient^0,f,c
  9995   0011E8  505C               	movf	i2___lbdiv@divisor^0,w,c
  9996   0011EA  5C5D               	subwf	i2___lbdiv@dividend^0,w,c
  9997   0011EC  A0D8               	btfss	status,0,c
  9998   0011EE  D003               	goto	i2l3488
  9999   0011F0  505C               	movf	i2___lbdiv@divisor^0,w,c
 10000   0011F2  5E5D               	subwf	i2___lbdiv@dividend^0,f,c
 10001   0011F4  805F               	bsf	i2___lbdiv@quotient^0,0,c
 10002   0011F6                     i2l3488:
 10003   0011F6  90D8               	bcf	status,0,c
 10004   0011F8  325C               	rrcf	i2___lbdiv@divisor^0,f,c
 10005   0011FA  2E5E               	decfsz	i2___lbdiv@counter^0,f,c
 10006   0011FC  D7F3               	goto	i2u192_40
 10007   0011FE                     i2l3492:
 10008   0011FE  505F               	movf	i2___lbdiv@quotient^0,w,c
 10009   001200  0012               	return		;funcret
 10010   001202                     __end_ofi2___lbdiv:
 10011                           	callstack 0
 10012                           
 10013 ;; *************** function i2___awmod *****************
 10014 ;; Defined at:
 10015 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;  dividend        2    0[COMRAM] int 
 10018 ;;  divisor         2    2[COMRAM] int 
 10019 ;; Auto vars:     Size  Location     Type
 10020 ;;  sign            1    5[COMRAM] unsigned char 
 10021 ;;  counter         1    4[COMRAM] unsigned char 
 10022 ;; Return value:  Size  Location     Type
 10023 ;;                  2    0[COMRAM] int 
 10024 ;; Registers used:
 10025 ;;		wreg, status,2, status,0
 10026 ;; Tracked objects:
 10027 ;;		On entry : 0/0
 10028 ;;		On exit  : 0/0
 10029 ;;		Unchanged: 0/0
 10030 ;; Data sizes:     COMRAM   BANK0   BANK1
 10031 ;;      Params:         4       0       0
 10032 ;;      Locals:         2       0       0
 10033 ;;      Temps:          0       0       0
 10034 ;;      Totals:         6       0       0
 10035 ;;Total ram usage:        6 bytes
 10036 ;; Hardware stack levels used: 1
 10037 ;; This function calls:
 10038 ;;		Nothing
 10039 ;; This function is called by:
 10040 ;;		i2_SIO_SendDecimal
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           	psect	text83
 10045   000D22                     __ptext83:
 10046                           	callstack 0
 10047   000D22                     i2___awmod:
 10048                           	callstack 20
 10049                           
 10050                           ;incstack = 0
 10051   000D22  6A61               	clrf	i2___awmod@sign^0,c
 10052   000D24  AE5D               	btfss	(i2___awmod@dividend+1)^0,7,c
 10053   000D26  D006               	goto	i2l3442
 10054   000D28  6C5C               	negf	i2___awmod@dividend^0,c
 10055   000D2A  1E5D               	comf	(i2___awmod@dividend+1)^0,f,c
 10056   000D2C  B0D8               	btfsc	status,0,c
 10057   000D2E  2A5D               	incf	(i2___awmod@dividend+1)^0,f,c
 10058   000D30  0E01               	movlw	1
 10059   000D32  6E61               	movwf	i2___awmod@sign^0,c
 10060   000D34                     i2l3442:
 10061   000D34  AE5F               	btfss	(i2___awmod@divisor+1)^0,7,c
 10062   000D36  D004               	goto	i2l3446
 10063   000D38  6C5E               	negf	i2___awmod@divisor^0,c
 10064   000D3A  1E5F               	comf	(i2___awmod@divisor+1)^0,f,c
 10065   000D3C  B0D8               	btfsc	status,0,c
 10066   000D3E  2A5F               	incf	(i2___awmod@divisor+1)^0,f,c
 10067   000D40                     i2l3446:
 10068   000D40  505E               	movf	i2___awmod@divisor^0,w,c
 10069   000D42  105F               	iorwf	(i2___awmod@divisor+1)^0,w,c
 10070   000D44  B4D8               	btfsc	status,2,c
 10071   000D46  D018               	goto	i2l3462
 10072   000D48  0E01               	movlw	1
 10073   000D4A  6E60               	movwf	i2___awmod@counter^0,c
 10074   000D4C  D004               	goto	i2l3452
 10075   000D4E                     i2l3450:
 10076   000D4E  90D8               	bcf	status,0,c
 10077   000D50  365E               	rlcf	i2___awmod@divisor^0,f,c
 10078   000D52  365F               	rlcf	(i2___awmod@divisor+1)^0,f,c
 10079   000D54  2A60               	incf	i2___awmod@counter^0,f,c
 10080   000D56                     i2l3452:
 10081   000D56  AE5F               	btfss	(i2___awmod@divisor+1)^0,7,c
 10082   000D58  D7FA               	goto	i2l3450
 10083   000D5A                     i2u188_40:
 10084   000D5A  505E               	movf	i2___awmod@divisor^0,w,c
 10085   000D5C  5C5C               	subwf	i2___awmod@dividend^0,w,c
 10086   000D5E  505F               	movf	(i2___awmod@divisor+1)^0,w,c
 10087   000D60  585D               	subwfb	(i2___awmod@dividend+1)^0,w,c
 10088   000D62  A0D8               	btfss	status,0,c
 10089   000D64  D004               	goto	i2l3458
 10090   000D66  505E               	movf	i2___awmod@divisor^0,w,c
 10091   000D68  5E5C               	subwf	i2___awmod@dividend^0,f,c
 10092   000D6A  505F               	movf	(i2___awmod@divisor+1)^0,w,c
 10093   000D6C  5A5D               	subwfb	(i2___awmod@dividend+1)^0,f,c
 10094   000D6E                     i2l3458:
 10095   000D6E  90D8               	bcf	status,0,c
 10096   000D70  325F               	rrcf	(i2___awmod@divisor+1)^0,f,c
 10097   000D72  325E               	rrcf	i2___awmod@divisor^0,f,c
 10098   000D74  2E60               	decfsz	i2___awmod@counter^0,f,c
 10099   000D76  D7F1               	goto	i2u188_40
 10100   000D78                     i2l3462:
 10101   000D78  5061               	movf	i2___awmod@sign^0,w,c
 10102   000D7A  B4D8               	btfsc	status,2,c
 10103   000D7C  D004               	goto	i2l3466
 10104   000D7E  6C5C               	negf	i2___awmod@dividend^0,c
 10105   000D80  1E5D               	comf	(i2___awmod@dividend+1)^0,f,c
 10106   000D82  B0D8               	btfsc	status,0,c
 10107   000D84  2A5D               	incf	(i2___awmod@dividend+1)^0,f,c
 10108   000D86                     i2l3466:
 10109   000D86  C05C  F05C         	movff	i2___awmod@dividend,?i2___awmod
 10110   000D8A  C05D  F05D         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10111   000D8E  0012               	return		;funcret
 10112   000D90                     __end_ofi2___awmod:
 10113                           	callstack 0
 10114                           
 10115 ;; *************** function i2_SIO_SendBlocking *****************
 10116 ;; Defined at:
 10117 ;;		line 53 in file "TAD_SIO.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  character       1    wreg     unsigned char 
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;  character       1    0[COMRAM] unsigned char 
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  1    wreg      void 
 10124 ;; Registers used:
 10125 ;;		wreg
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1
 10131 ;;      Params:         0       0       0
 10132 ;;      Locals:         1       0       0
 10133 ;;      Temps:          0       0       0
 10134 ;;      Totals:         1       0       0
 10135 ;;Total ram usage:        1 bytes
 10136 ;; Hardware stack levels used: 1
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_RSI_INT1
 10141 ;;		i2_SIO_SendDecimal
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text84
 10146   001822                     __ptext84:
 10147                           	callstack 0
 10148   001822                     i2_SIO_SendBlocking:
 10149                           	callstack 20
 10150                           
 10151                           ;incstack = 0
 10152                           ;i2SIO_SendBlocking@character stored from wreg
 10153   001822  6E5C               	movwf	i2SIO_SendBlocking@character^0,c
 10154   001824                     
 10155                           ;TAD_SIO.c: 54:     while (!TXSTAbits.TRMT);
 10156   001824  A2AC               	btfss	172,1,c	;volatile
 10157   001826  D7FE               	goto	i2l3430
 10158                           
 10159                           ;TAD_SIO.c: 55:     TXREG = character;
 10160   001828  C05C  FFAD         	movff	i2SIO_SendBlocking@character,4013	;volatile
 10161   00182C  0012               	return		;funcret
 10162   00182E                     __end_ofi2_SIO_SendBlocking:
 10163                           	callstack 0
 10164                           
 10165 ;; *************** function _RTC_DemanaTime *****************
 10166 ;; Defined at:
 10167 ;;		line 65 in file "TAD_RTC.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  hh              1    0[COMRAM] PTR unsigned char 
 10170 ;;		 -> hora(1), 
 10171 ;;  mm              1    1[COMRAM] PTR unsigned char 
 10172 ;;		 -> minuts(1), 
 10173 ;;  ss              1    2[COMRAM] PTR unsigned char 
 10174 ;;		 -> segons(1), 
 10175 ;;  dd              1    3[COMRAM] PTR unsigned char 
 10176 ;;		 -> dia(1), 
 10177 ;;  mo              1    4[COMRAM] PTR unsigned char 
 10178 ;;		 -> mes(1), 
 10179 ;;  yy              1    5[COMRAM] PTR unsigned char 
 10180 ;;		 -> any(1), 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;		None
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      void 
 10185 ;; Registers used:
 10186 ;;		wreg, status,2, status,0
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1
 10192 ;;      Params:         6       0       0
 10193 ;;      Locals:         0       0       0
 10194 ;;      Temps:          0       0       0
 10195 ;;      Totals:         6       0       0
 10196 ;;Total ram usage:        6 bytes
 10197 ;; Hardware stack levels used: 1
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_RSI_INT1
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text85
 10206   0015DC                     __ptext85:
 10207                           	callstack 0
 10208   0015DC                     _RTC_DemanaTime:
 10209                           	callstack 21
 10210                           
 10211                           ;TAD_RTC.c: 65: void RTC_DemanaTime(unsigned char *hh, unsigned char *mm, unsigned char 
      +                          *ss,;TAD_RTC.c: 66:                     unsigned char *dd, unsigned char *mo, unsigned c
      +                          har *yy) {;TAD_RTC.c: 67:     rtc_hh = hh;
 10212                           
 10213                           ;incstack = 0
 10214   0015DC  C05C  F028         	movff	RTC_DemanaTime@hh,_rtc_hh
 10215                           
 10216                           ;TAD_RTC.c: 68:     rtc_mm = mm;
 10217   0015E0  C05D  F027         	movff	RTC_DemanaTime@mm,_rtc_mm
 10218                           
 10219                           ;TAD_RTC.c: 69:     rtc_ss = ss;
 10220   0015E4  C05E  F026         	movff	RTC_DemanaTime@ss,_rtc_ss
 10221                           
 10222                           ;TAD_RTC.c: 70:     rtc_dd = dd;
 10223   0015E8  C05F  F025         	movff	RTC_DemanaTime@dd,_rtc_dd
 10224                           
 10225                           ;TAD_RTC.c: 71:     rtc_mo = mo;
 10226   0015EC  C060  F024         	movff	RTC_DemanaTime@mo,_rtc_mo
 10227                           
 10228                           ;TAD_RTC.c: 72:     rtc_yy = yy;
 10229   0015F0  C061  F023         	movff	RTC_DemanaTime@yy,_rtc_yy
 10230                           
 10231                           ;TAD_RTC.c: 73:     pendingRTC = 1;
 10232   0015F4  0E01               	movlw	1
 10233   0015F6  6E29               	movwf	_pendingRTC^0,c
 10234   0015F8  0012               	return		;funcret
 10235   0015FA                     __end_of_RTC_DemanaTime:
 10236                           	callstack 0
 10237                           
 10238                           	psect	rparam
 10239   000001                     ___rparam_used  equ	1
 10240   000000                     ___param_bank   equ	0
 10241   000000                     __Lparam        equ	__Lrparam
 10242   000000                     __Hparam        equ	__Hrparam
 10243                           
 10244                           	psect	temp
 10245   000074                     btemp:
 10246                           	callstack 0
 10247   000074                     	ds	1
 10248   000074                     int$flags       set	btemp
 10249   000075                     wtemp8          set	btemp+1
 10250   000075                     ttemp5          set	btemp+1
 10251   000078                     ttemp6          set	btemp+4
 10252   00007C                     ttemp7          set	btemp+8
 10253                           
 10254                           	psect	idloc
 10255                           
 10256                           ;Config register IDLOC0 @ 0x200000
 10257                           ;	unspecified, using default values
 10258   200000                     	org	2097152
 10259   200000  FF                 	db	255
 10260                           
 10261                           ;Config register IDLOC1 @ 0x200001
 10262                           ;	unspecified, using default values
 10263   200001                     	org	2097153
 10264   200001  FF                 	db	255
 10265                           
 10266                           ;Config register IDLOC2 @ 0x200002
 10267                           ;	unspecified, using default values
 10268   200002                     	org	2097154
 10269   200002  FF                 	db	255
 10270                           
 10271                           ;Config register IDLOC3 @ 0x200003
 10272                           ;	unspecified, using default values
 10273   200003                     	org	2097155
 10274   200003  FF                 	db	255
 10275                           
 10276                           ;Config register IDLOC4 @ 0x200004
 10277                           ;	unspecified, using default values
 10278   200004                     	org	2097156
 10279   200004  FF                 	db	255
 10280                           
 10281                           ;Config register IDLOC5 @ 0x200005
 10282                           ;	unspecified, using default values
 10283   200005                     	org	2097157
 10284   200005  FF                 	db	255
 10285                           
 10286                           ;Config register IDLOC6 @ 0x200006
 10287                           ;	unspecified, using default values
 10288   200006                     	org	2097158
 10289   200006  FF                 	db	255
 10290                           
 10291                           ;Config register IDLOC7 @ 0x200007
 10292                           ;	unspecified, using default values
 10293   200007                     	org	2097159
 10294   200007  FF                 	db	255
 10295                           
 10296                           	psect	config
 10297                           
 10298                           ; Padding undefined space
 10299   300000                     	org	3145728
 10300   300000  FF                 	db	255
 10301                           
 10302                           ;Config register CONFIG1H @ 0x300001
 10303                           ;	Oscillator
 10304                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10305                           ;	Fail-Safe Clock Monitor Enable bit
 10306                           ;	FCMEN = 0x0, unprogrammed default
 10307                           ;	Internal/External Oscillator Switchover bit
 10308                           ;	IESO = 0x0, unprogrammed default
 10309   300001                     	org	3145729
 10310   300001  06                 	db	6
 10311                           
 10312                           ;Config register CONFIG2L @ 0x300002
 10313                           ;	Power-up Timer Enable bit
 10314                           ;	PWRT = OFF, PWRT disabled
 10315                           ;	Brown-out Reset Enable bits
 10316                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10317                           ;	Brown-out Reset Voltage bits
 10318                           ;	BORV = 0x3, unprogrammed default
 10319   300002                     	org	3145730
 10320   300002  19                 	db	25
 10321                           
 10322                           ;Config register CONFIG2H @ 0x300003
 10323                           ;	Watchdog Timer Enable bit
 10324                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10325                           ;	Watchdog Timer Postscale Select bits
 10326                           ;	WDTPS = 0xF, unprogrammed default
 10327   300003                     	org	3145731
 10328   300003  1E                 	db	30
 10329                           
 10330                           ; Padding undefined space
 10331   300004                     	org	3145732
 10332   300004  FF                 	db	255
 10333                           
 10334                           ;Config register CONFIG3H @ 0x300005
 10335                           ;	CCP2 MUX bit
 10336                           ;	CCP2MX = 0x1, unprogrammed default
 10337                           ;	PORTB A/D Enable bit
 10338                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10339                           ;	Low-Power Timer1 Oscillator Enable bit
 10340                           ;	LPT1OSC = 0x0, unprogrammed default
 10341                           ;	MCLR Pin Enable bit
 10342                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10343   300005                     	org	3145733
 10344   300005  81                 	db	129
 10345                           
 10346                           ;Config register CONFIG4L @ 0x300006
 10347                           ;	Stack Full/Underflow Reset Enable bit
 10348                           ;	STVREN = 0x1, unprogrammed default
 10349                           ;	Single-Supply ICSP Enable bit
 10350                           ;	LVP = OFF, Single-Supply ICSP disabled
 10351                           ;	Boot Block Size Select bits
 10352                           ;	BBSIZ = 0x0, unprogrammed default
 10353                           ;	Extended Instruction Set Enable bit
 10354                           ;	XINST = 0x0, unprogrammed default
 10355                           ;	Background Debugger Enable bit
 10356                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10357   300006                     	org	3145734
 10358   300006  81                 	db	129
 10359                           
 10360                           ; Padding undefined space
 10361   300007                     	org	3145735
 10362   300007  FF                 	db	255
 10363                           
 10364                           ;Config register CONFIG5L @ 0x300008
 10365                           ;	unspecified, using default values
 10366                           ;	Code Protection bit
 10367                           ;	CP0 = 0x1, unprogrammed default
 10368                           ;	Code Protection bit
 10369                           ;	CP1 = 0x1, unprogrammed default
 10370   300008                     	org	3145736
 10371   300008  03                 	db	3
 10372                           
 10373                           ;Config register CONFIG5H @ 0x300009
 10374                           ;	unspecified, using default values
 10375                           ;	Boot Block Code Protection bitProtect Boot
 10376                           ;	CPB = 0x1, unprogrammed default
 10377                           ;	Data EEPROM Code Protection bit
 10378                           ;	CPD = 0x1, unprogrammed default
 10379   300009                     	org	3145737
 10380   300009  C0                 	db	192
 10381                           
 10382                           ;Config register CONFIG6L @ 0x30000A
 10383                           ;	unspecified, using default values
 10384                           ;	Write Protection bit
 10385                           ;	WRT0 = 0x1, unprogrammed default
 10386                           ;	Write Protection bit
 10387                           ;	WRT1 = 0x1, unprogrammed default
 10388   30000A                     	org	3145738
 10389   30000A  03                 	db	3
 10390                           
 10391                           ;Config register CONFIG6H @ 0x30000B
 10392                           ;	unspecified, using default values
 10393                           ;	Configuration Register Write Protection bit
 10394                           ;	WRTC = 0x1, unprogrammed default
 10395                           ;	Boot Block Write Protection bit
 10396                           ;	WRTB = 0x1, unprogrammed default
 10397                           ;	Data EEPROM Write Protection bit
 10398                           ;	WRTD = 0x1, unprogrammed default
 10399   30000B                     	org	3145739
 10400   30000B  E0                 	db	224
 10401                           
 10402                           ;Config register CONFIG7L @ 0x30000C
 10403                           ;	unspecified, using default values
 10404                           ;	Table Read Protection bit
 10405                           ;	EBTR0 = 0x1, unprogrammed default
 10406                           ;	Table Read Protection bit
 10407                           ;	EBTR1 = 0x1, unprogrammed default
 10408   30000C                     	org	3145740
 10409   30000C  03                 	db	3
 10410                           
 10411                           ;Config register CONFIG7H @ 0x30000D
 10412                           ;	unspecified, using default values
 10413                           ;	Boot Block Table Read Protection bit
 10414                           ;	EBTRB = 0x1, unprogrammed default
 10415   30000D                     	org	3145741
 10416   30000D  40                 	db	64
 10417                           tosu	equ	0xFFF
 10418                           tosh	equ	0xFFE
 10419                           tosl	equ	0xFFD
 10420                           stkptr	equ	0xFFC
 10421                           pclatu	equ	0xFFB
 10422                           pclath	equ	0xFFA
 10423                           pcl	equ	0xFF9
 10424                           tblptru	equ	0xFF8
 10425                           tblptrh	equ	0xFF7
 10426                           tblptrl	equ	0xFF6
 10427                           tablat	equ	0xFF5
 10428                           prodh	equ	0xFF4
 10429                           prodl	equ	0xFF3
 10430                           indf0	equ	0xFEF
 10431                           postinc0	equ	0xFEE
 10432                           postdec0	equ	0xFED
 10433                           preinc0	equ	0xFEC
 10434                           plusw0	equ	0xFEB
 10435                           fsr0h	equ	0xFEA
 10436                           fsr0l	equ	0xFE9
 10437                           wreg	equ	0xFE8
 10438                           indf1	equ	0xFE7
 10439                           postinc1	equ	0xFE6
 10440                           postdec1	equ	0xFE5
 10441                           preinc1	equ	0xFE4
 10442                           plusw1	equ	0xFE3
 10443                           fsr1h	equ	0xFE2
 10444                           fsr1l	equ	0xFE1
 10445                           bsr	equ	0xFE0
 10446                           indf2	equ	0xFDF
 10447                           postinc2	equ	0xFDE
 10448                           postdec2	equ	0xFDD
 10449                           preinc2	equ	0xFDC
 10450                           plusw2	equ	0xFDB
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8

Data Sizes:
    Strings     161
    Constant    0
    Data        1
    BSS         194
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     115
    BANK0           128     14     117
    BANK1           256      0       0

Pointer List with Targets:

    identificaComanda@comanda	PTR unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    iniciaAmb@entrada	PTR const unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    iniciaAmb@prefix	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_10(CODE[12]), STR_12(CODE[10]), STR_14(CODE[9]), STR_16(CODE[10]), 
		 -> STR_18(CODE[6]), 

    obtenirNumero@buf	PTR unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    obtenirNumero@idx	PTR unsigned char  size(1) Largest target is 1
		 -> parsejaInitialize@i(BANK0[1]), 

    parsejaInitialize@comanda	PTR unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    parsejaSetTime@comanda	PTR unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    processaComanda@comanda	PTR unsigned char  size(1) Largest target is 64
		 -> rxBuffer(BANK0[64]), 

    rtc_dd	PTR unsigned char  size(1) Largest target is 1
		 -> dia(COMRAM[1]), NULL(NULL[0]), 

    RTC_DemanaTime@dd	PTR unsigned char  size(1) Largest target is 1
		 -> dia(COMRAM[1]), 

    RTC_DemanaTime@hh	PTR unsigned char  size(1) Largest target is 1
		 -> hora(COMRAM[1]), 

    RTC_DemanaTime@mm	PTR unsigned char  size(1) Largest target is 1
		 -> minuts(COMRAM[1]), 

    RTC_DemanaTime@mo	PTR unsigned char  size(1) Largest target is 1
		 -> mes(COMRAM[1]), 

    RTC_DemanaTime@ss	PTR unsigned char  size(1) Largest target is 1
		 -> segons(COMRAM[1]), 

    RTC_DemanaTime@yy	PTR unsigned char  size(1) Largest target is 1
		 -> any(COMRAM[1]), 

    rtc_hh	PTR unsigned char  size(1) Largest target is 1
		 -> hora(COMRAM[1]), NULL(NULL[0]), 

    rtc_mm	PTR unsigned char  size(1) Largest target is 1
		 -> minuts(COMRAM[1]), NULL(NULL[0]), 

    rtc_mo	PTR unsigned char  size(1) Largest target is 1
		 -> mes(COMRAM[1]), NULL(NULL[0]), 

    rtc_ss	PTR unsigned char  size(1) Largest target is 1
		 -> segons(COMRAM[1]), NULL(NULL[0]), 

    rtc_yy	PTR unsigned char  size(1) Largest target is 1
		 -> any(COMRAM[1]), NULL(NULL[0]), 

    SIO_Receive@character	PTR unsigned char  size(1) Largest target is 1
		 -> received(COMRAM[1]), 

    SIO_SendBuffer@buffer	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_4(CODE[5]), STR_5(CODE[7]), STR_6(CODE[7]), STR_7(CODE[8]), 
		 -> STR_8(CODE[9]), 

    SIO_SendString@str	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_1(CODE[3]), STR_19(CODE[10]), STR_2(CODE[12]), STR_20(CODE[8]), 
		 -> STR_21(CODE[28]), STR_22(CODE[9]), STR_23(CODE[11]), STR_24(CODE[3]), 
		 -> STR_25(CODE[9]), STR_3(CODE[3]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timerFan(COMRAM[1]), timerRebots(COMRAM[1]), timerRGB(COMRAM[1]), timerTemperatura(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_RAM_Motor
    _SIS_MovementMotor->_TI_GetTics
    _resetCommand->_EEPROM_DemanaEsborrarLogs
    _resetCommand->_RAM_DemanaEsborrar
    _EEPROM_DemanaEsborrarLogs->_writeByte
    _parsejaSetTime->_RTC_SetTime
    _parsejaInitialize->_RTC_SetDate
    _parsejaInitialize->_RTC_SetTime
    _RTC_SetTime->_decToBcd
    _RTC_SetDate->_decToBcd
    _decToBcd->___lbmod
    _identificaComanda->_iniciaAmb
    _SIS_Init->_TI_NewTimer
    _SIS_ControlTemperatura->_EEPROM_DemanaDesarLog
    _RGB_SetColorAlternatCritic->_TI_ResetTics
    _RAM_DemanaDesar->_RAM_Write
    _EEPROM_DemanaDesarLog->___lbmod
    _RTC_Motor->_I2C_Read
    _RTC_Motor->_ReStartI2C_
    _RTC_Motor->_StartI2C
    _RTC_Motor->_bcdToDec
    _ReStartI2C_->_I2C_Write
    _RTC_Enable1HzInterrupt->_StartI2C
    _StartI2C->_I2C_Write
    _RGB_Motor->_TI_GetTics
    _RGB_Init->_TI_NewTimer
    _RAM_Motor->_SIO_SendDecimal
    _SIO_SendDecimal->___lbmod
    ___lbmod->___lbdiv
    _RAM_Read->_delay_us
    _RAM_Init->_RAM_DemanaEsborrar
    _RAM_DemanaEsborrar->_RAM_Write
    _RAM_Write->_delay_us
    _RAM_IncAddr->_delay_us
    _RAM_ResetAddr->_delay_us
    _FAN_Motor->_TI_GetTics
    _FAN_Init->_TI_NewTimer
    _EEPROM_Motor->_writeByte
    _writeByte->_readByte
    _SIO_SendString->_SIO_Send
    _EEPROM_Init->_readByte

Critical Paths under _RSI_High in COMRAM

    _RSI_INT1->i2_SIO_SendDecimal
    i2_SIO_SendString->i2_SIO_Send
    i2_SIO_SendDecimal->i2___awmod

Critical Paths under _main in BANK0

    _main->_SIS_ControlTemperatura
    _SIS_MovementMotor->_TI_GetTics
    _SIS_Motor->_processaComanda
    _processaComanda->_parsejaInitialize
    _processaComanda->_parsejaSetTime
    _parsejaSetTime->_RTC_SetTime
    _parsejaInitialize->_RTC_SetDate
    _parsejaInitialize->_RTC_SetTime
    _SIS_ControlTemperatura->_EEPROM_DemanaDesarLog
    _SIS_ControlTemperatura->_TI_GetTics
    _RGB_Motor->_TI_GetTics
    _FAN_Motor->_TI_GetTics

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10218
                                             13 BANK0      1     1      0
                        _EEPROM_Init
                       _EEPROM_Motor
                           _FAN_Init
                          _FAN_Motor
                           _INT_Init
                           _JOY_Init
                          _JOY_Motor
                           _RAM_Init
                          _RAM_Motor
                           _RGB_Init
                          _RGB_Motor
                           _RTC_Init
                          _RTC_Motor
                           _SIO_Init
             _SIS_ControlTemperatura
                           _SIS_Init
                          _SIS_Motor
                  _SIS_MovementMotor
                            _TI_Init
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SIS_MovementMotor                                    0     0      0     210
                       _JOY_IsCenter
                         _JOY_IsDown
                         _JOY_IsLeft
                        _JOY_IsRight
                           _JOY_IsUp
                     _SIO_SendBuffer
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _SIO_SendBuffer                                       4     2      2     100
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _JOY_IsUp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_IsRight                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_IsLeft                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_IsDown                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_IsCenter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SIS_Motor                                            0     0      0    5392
                        _SIO_Receive
                    _processaComanda
 ---------------------------------------------------------------------------------
 (2) _processaComanda                                      1     0      1    5369
                                              5 BANK0      1     0      1
            _EEPROM_DemanaLlegirLogs
                   _RAM_DemanaLlegir
                  _identificaComanda
                  _parsejaInitialize
                     _parsejaSetTime
                       _resetCommand
 ---------------------------------------------------------------------------------
 (3) _resetCommand                                         0     0      0     516
          _EEPROM_DemanaEsborrarLogs
                    _FAN_SetDutyFan0
                    _FAN_SetDutyFan1
                 _RAM_DemanaEsborrar
                       _RGB_SetColor
 ---------------------------------------------------------------------------------
 (4) _EEPROM_DemanaEsborrarLogs                            1     1      0     124
                                             14 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _parsejaSetTime                                       3     2      1    1181
                                              2 BANK0      3     2      1
                        _RTC_SetTime
 ---------------------------------------------------------------------------------
 (3) _parsejaInitialize                                    3     2      1    3321
                                              2 BANK0      3     2      1
                        _RTC_SetDate
                        _RTC_SetTime
                      _obtenirNumero
 ---------------------------------------------------------------------------------
 (4) _obtenirNumero                                        5     3      2     501
                                             11 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _RTC_SetTime                                          3     1      2     921
                                             22 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                          _I2C_Stop_
                          _I2C_Write
                           _StartI2C
                           _decToBcd
 ---------------------------------------------------------------------------------
 (4) _RTC_SetDate                                          3     1      2     915
                                             22 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                          _I2C_Stop_
                          _I2C_Write
                           _StartI2C
                           _decToBcd
 ---------------------------------------------------------------------------------
 (5) _decToBcd                                             3     3      0     659
                                             19 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _identificaComanda                                    1     0      1     255
                                             17 COMRAM     1     0      1
                          _iniciaAmb
 ---------------------------------------------------------------------------------
 (4) _iniciaAmb                                            6     4      2     144
                                             11 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RAM_DemanaLlegir                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEPROM_DemanaLlegirLogs                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SIO_Receive                                          1     0      1      23
                                             11 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _SIS_Init                                             0     0      0     144
                        _TI_NewTimer
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _SIS_ControlTemperatura                               8     8      0    1469
                                              5 BANK0      8     8      0
              _EEPROM_DemanaDesarLog
                    _FAN_SetDutyFan0
                    _FAN_SetDutyFan1
                    _RAM_DemanaDesar
                       _RGB_SetColor
         _RGB_SetColorAlternatCritic
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _RGB_SetColorAlternatCritic                           0     0      0      29
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _RGB_SetColor                                         3     1      2      81
                                             11 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RAM_DemanaDesar                                      1     1      0     145
                                             13 COMRAM     1     1      0
                        _RAM_IncAddr
                          _RAM_Write
 ---------------------------------------------------------------------------------
 (4) _FAN_SetDutyFan1                                      1     1      0      60
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _FAN_SetDutyFan0                                      1     1      0      60
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_DemanaDesarLog                                6     1      5     984
                                             19 COMRAM     1     1      0
                                              0 BANK0      5     0      5
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (1) _SIO_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_Motor                                            0     0      0     349
                           _I2C_Read
                          _I2C_Stop_
                          _I2C_Write
                        _ReStartI2C_
                           _StartI2C
                           _bcdToDec
 ---------------------------------------------------------------------------------
 (2) _bcdToDec                                             2     2      0      30
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReStartI2C_                                          1     1      0      94
                                             12 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             2     2      0      84
                                             11 COMRAM     2     2      0
                            _I2C_Ack
                           _I2C_Nack
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0     141
                            _InitI2C
             _RTC_Enable1HzInterrupt
 ---------------------------------------------------------------------------------
 (2) _RTC_Enable1HzInterrupt                               0     0      0     141
                          _I2C_Stop_
                          _I2C_Write
                           _StartI2C
 ---------------------------------------------------------------------------------
 (5) _StartI2C                                             1     1      0      94
                                             12 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (6) _I2C_Write                                            1     1      0      47
                                             11 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop_                                            0     0      0       0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (7) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RGB_Motor                                            0     0      0     110
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _RGB_Init                                             0     0      0     144
                        _TI_NewTimer
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _RAM_Motor                                            3     3      0    1424
                                             20 COMRAM     3     3      0
                        _RAM_IncAddr
                           _RAM_Read
                      _RAM_ResetAddr
                    _SIO_SendDecimal
                     _SIO_SendString
 ---------------------------------------------------------------------------------
 (2) _SIO_SendDecimal                                      1     1      0    1133
                                             19 COMRAM     1     1      0
                   _SIO_SendBlocking
                            ___awmod
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              4     3      1     278
                                             15 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              4     3      1     287
                                             11 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     298
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _RAM_Read                                             1     1      0      52
                                             12 COMRAM     1     1      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _RAM_Init                                             0     0      0     220
                 _RAM_DemanaEsborrar
                      _RAM_ResetAddr
 ---------------------------------------------------------------------------------
 (4) _RAM_DemanaEsborrar                                   2     2      0     191
                                             13 COMRAM     2     2      0
                        _RAM_IncAddr
                      _RAM_ResetAddr
                          _RAM_Write
 ---------------------------------------------------------------------------------
 (5) _RAM_Write                                            1     1      0      58
                                             12 COMRAM     1     1      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _RAM_IncAddr                                          0     0      0      58
                      _RAM_ResetAddr
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _RAM_ResetAddr                                        0     0      0      29
                           _delay_us
 ---------------------------------------------------------------------------------
 (6) _delay_us                                             1     1      0      29
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _JOY_Motor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _JOY_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INT_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FAN_Motor                                            0     0      0     110
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      81
                                             11 COMRAM     8     4      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _FAN_Init                                             0     0      0     144
                        _TI_NewTimer
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      29
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     115
                                             11 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Motor                                         3     3      0     264
                                             14 COMRAM     3     3      0
                   _SIO_SendBlocking
                     _SIO_SendString
                           _readByte
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            2     1      1      56
                                             12 COMRAM     2     1      1
                           _readByte (ARG)
 ---------------------------------------------------------------------------------
 (2) _SIO_SendString                                       1     0      1      81
                                             12 COMRAM     1     0      1
                           _SIO_Send
 ---------------------------------------------------------------------------------
 (3) _SIO_Send                                             1     1      0      29
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SIO_SendBlocking                                     1     1      0      29
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Init                                          0     0      0      29
                           _readByte
 ---------------------------------------------------------------------------------
 (2) _readByte                                             1     1      0      29
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _RSI_High                                             4     4      0    1058
                                              7 COMRAM     4     4      0
                           _RSI_INT1
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (9) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _RSI_INT1                                             0     0      0    1058
                     _RTC_DemanaTime
                 i2_SIO_SendBlocking
                  i2_SIO_SendDecimal
                   i2_SIO_SendString
 ---------------------------------------------------------------------------------
 (10) i2_SIO_SendString                                    1     0      1      77
                                              1 COMRAM     1     0      1
                         i2_SIO_Send
 ---------------------------------------------------------------------------------
 (11) i2_SIO_Send                                          1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2_SIO_SendDecimal                                   1     1      0     814
                                              6 COMRAM     1     1      0
                 i2_SIO_SendBlocking
                          i2___awmod
                          i2___lbdiv
                          i2___lbmod
 ---------------------------------------------------------------------------------
 (11) i2___lbmod                                           4     3      1     168
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (11) i2___lbdiv                                           4     3      1     172
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2_SIO_SendBlocking                                  1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _RTC_DemanaTime                                      6     0      6     138
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Init
     _readByte
   _EEPROM_Motor
     _SIO_SendBlocking
     _SIO_SendString
       _SIO_Send
     _readByte
     _writeByte
       _readByte (ARG)
   _FAN_Init
     _TI_NewTimer
     _TI_ResetTics
   _FAN_Motor
     _TI_GetTics
     _TI_ResetTics
   _INT_Init
   _JOY_Init
   _JOY_Motor
   _RAM_Init
     _RAM_DemanaEsborrar
       _RAM_IncAddr
         _RAM_ResetAddr
           _delay_us
         _delay_us
       _RAM_ResetAddr
       _RAM_Write
         _delay_us
     _RAM_ResetAddr
   _RAM_Motor
     _RAM_IncAddr
     _RAM_Read
       _delay_us
     _RAM_ResetAddr
     _SIO_SendDecimal
       _SIO_SendBlocking
       ___awmod
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
     _SIO_SendString
   _RGB_Init
     _TI_NewTimer
     _TI_ResetTics
   _RGB_Motor
     _TI_GetTics
     _TI_ResetTics
   _RTC_Init
     _InitI2C
     _RTC_Enable1HzInterrupt
       _I2C_Stop_
         _I2C_Ready
       _I2C_Write
         _I2C_Ready
       _StartI2C
         _I2C_Write
   _RTC_Motor
     _I2C_Read
       _I2C_Ack
       _I2C_Nack
       _I2C_Ready
     _I2C_Stop_
     _I2C_Write
     _ReStartI2C_
       _I2C_Write
     _StartI2C
     _bcdToDec
   _SIO_Init
   _SIS_ControlTemperatura
     _EEPROM_DemanaDesarLog
       ___lbdiv
       ___lbmod
     _FAN_SetDutyFan0
     _FAN_SetDutyFan1
     _RAM_DemanaDesar
       _RAM_IncAddr
       _RAM_Write
     _RGB_SetColor
     _RGB_SetColorAlternatCritic
       _TI_ResetTics
     _TI_GetTics
     _TI_ResetTics
   _SIS_Init
     _TI_NewTimer
     _TI_ResetTics
   _SIS_Motor
     _SIO_Receive
     _processaComanda
       _EEPROM_DemanaLlegirLogs
       _RAM_DemanaLlegir
       _identificaComanda
         _iniciaAmb
       _parsejaInitialize
         _RTC_SetDate
           _I2C_Stop_
           _I2C_Write
           _StartI2C
           _decToBcd
             ___lbdiv
             ___lbmod
         _RTC_SetTime
           _I2C_Stop_
           _I2C_Write
           _StartI2C
           _decToBcd
         _obtenirNumero
       _parsejaSetTime
         _RTC_SetTime
       _resetCommand
         _EEPROM_DemanaEsborrarLogs
           _writeByte
         _FAN_SetDutyFan0
         _FAN_SetDutyFan1
         _RAM_DemanaEsborrar
         _RGB_SetColor
   _SIS_MovementMotor
     _JOY_IsCenter
     _JOY_IsDown
     _JOY_IsLeft
     _JOY_IsRight
     _JOY_IsUp
     _SIO_SendBuffer
     _TI_GetTics
     _TI_ResetTics
   _TI_Init

 _RSI_High (ROOT)
   _RSI_INT1
     _RTC_DemanaTime
     i2_SIO_SendBlocking
     i2_SIO_SendDecimal
       i2_SIO_SendBlocking
       i2___awmod
       i2___lbdiv
       i2___lbmod
     i2_SIO_SendString
       i2_SIO_Send
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128     14     117     91.4%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     23     115     91.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
BITBIGSFRll          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     229      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri May 16 18:10:45 2025

                          _RSI_Timer0 1692                           _SSPSTATbits 0FC7  
                          _TI_GetTics 0FFC                        EEPROM_Motor@to 006B  
          __end_of_RAM_DemanaEsborrar 12C8                                   l114 1832  
                                 l130 16DA                                   l123 16F0  
                                 l108 183C                                   l142 17A0  
                                 l241 0FDA                                   l153 1482  
                                 l410 05CE                                   l228 13A4  
                                 l149 146A                                   l374 0E32  
                                 l519 145E                                   l632 0ED6  
                                 l553 0306                                   l634 0EE4  
                                 l549 02DE                                   l725 171C  
                                 l761 0ABA                                   l681 0B74  
                                 l594 04EA                                   l684 0B7A  
                    _SIO_SendBlocking 1816                                   l861 10BA  
                                 l687 0B9E                                   _dia 0057  
                     __end_of_I2C_Ack 1842                                   _any 0059  
                                 _mes 0058                                   _log 0001  
                                 _red 0030                          ___awmod@sign 006C  
                                 wreg 0FE8            RAM_DemanaDesar@temperatura 0069  
              __end_of_parsejaSetTime 0DF6                      ?_RAM_DemanaDesar 005C  
                 i2SIO_Send@character 005C                                  l4000 02D8  
                                l2232 14F0                                  l4010 0310  
                                l4002 02E4                                  l2250 1556  
                                l4020 0336                                  l4012 0318  
                                l3140 174C                                  l4030 035E  
                                l4022 033E                                  l4014 031E  
                                l3134 175E                                  l4104 04BC  
                                l4040 0374                                  l4032 0366  
                                l4024 0346                                  l4016 0326  
                                l3400 0CE0                                  l4050 03D4  
                                l4042 03B6                                  l4026 034E  
                                l4018 032E                                  l3402 0CE8  
                                l4060 03FC                                  l4052 03DC  
                                l4036 036E                                  l4028 0356  
                                l2620 10AA                                  l3172 12A8  
                                l3412 0D0A                                  l3156 155C  
                                l2268 1534                                  l3254 1772  
                                l4134 0530                                  l4118 04FE  
                                l4070 0440                                  l4054 03E4  
                                l4046 03C4                                  l2622 10B2  
                                l3182 0F64                                  l3190 0F90  
                                l2286 1512                                  l4128 0524  
                                l4144 0540                                  l4056 03EC  
                                l4048 03CC                                  l2616 109E  
                                l2632 10D2                                  l3416 0D18  
                                l3408 0D00                                  l3258 1818  
                                l4082 045E                                  l4074 044E  
                                l4058 03F4                                  l4090 046C  
                                l3362 0BFE                                  l4330 0AAE  
                                l4322 0A5C                                  l4068 040A  
                                l4092 04A6                                  l3540 112C  
                                l4260 11A8                                  l4420 147E  
                                l3188 0F8C                                  l3380 0C40  
                                l3356 0BE8                                  l4086 0468  
                                l4246 1714                                  l3374 0C2A  
                                l4318 0A38                                  l4096 04B0  
                                l3536 1122                                  l3392 0CC6  
                                l4256 11A2                                  l4272 11C6  
                                l4280 13D0                                  l3368 0C14  
                                l4504 0E44                                  l4610 0EB2  
                                l3562 16BC                                  l4442 0F16  
                                l4530 0936                                  l4522 090A  
                                l4514 08DA                                  l3706 134E  
                         _TI_NewTimer 111E                 __end_of_RAM_ResetAddr 12F4  
                                l3572 130C                                  l3396 0CD2  
                                l4268 11BE                                  l4444 0F20  
                                l4452 0F32                                  l3580 13BE  
                                l4508 08BA                                  l4622 0EE6  
                                l4606 0690                                  l4446 0F26  
                                l4438 0F08                                  l4526 0920  
                                l4518 08F4                                  l4542 0958  
                                l3568 12F6                                  l4288 13E8  
                                l4712 0986                                  l4704 0970  
                                l4552 0570                                  l4448 0F2C  
                                l4536 094C                                  l4618 0ED8  
                                l4634 0EFC                                  l4730 0A02  
                                l4482 0DF8                                  l4628 0EF2  
                                l4572 060E                                  l4564 05E6  
                                l4548 0564                                  l4654 0BC2  
                                l4590 065A                                  l4582 0636  
                                l4574 0612                                  l2984 1728  
                                l4680 0B06                                  l4496 0E36  
                                l4682 0B0C                                  l4666 0AD4  
                                l4684 0B16                                  l4756 0C70  
                                l3992 02C2                                  l4688 0B1E  
                                l3986 02B8                                  l4698 0B38  
                                l3996 02CA                                  STR_1 021A  
                                STR_2 021D                                  STR_3 021A  
                                STR_4 029D                                  STR_5 0289  
                                STR_6 0290                                  STR_7 0281  
                                STR_8 0267                                  STR_9 0229  
                                _LATD 0F8C                                  u3105 0B5C  
                                u1610 12C2                                  u3130 0B94  
                                u3106 0B5E                                  u3115 0B66  
                                u3140 0BB8                                  u3116 0B68  
                                u3125 0B70                                  u3126 0B72  
                                u1800 0CEC                                  u3208 0C80  
                                u1570 1412                                  u2700 11AC  
                                u3190 0C7C                                  u2650 17DC  
                                u2760 0A2E                                  u2780 0A8C  
                                u2890 08D0                                  u2990 05DE  
                                _TMR0 0FD6                                  _Tics 0010  
                                _iLog 0041                                  _jLog 0040  
                    EEPROM_Motor@addr 006C                                  _blue 002E  
                                _main 0C44                                  _hora 0056  
                    __end_of_I2C_Nack 1838                      EEPROM_Motor@from 006A  
                    __end_of_I2C_Read 148A                                  fsr2h 0FDA  
                                indf2 0FDF                                  fsr2l 0FD9  
                                btemp 0074                processaComanda@comanda 00EC  
                     __end_of_TI_Init 1376          ??_RGB_SetColorAlternatCritic 0068  
                                prodh 0FF4                                  prodl 0FF3  
                                start 003A                         ??_ReStartI2C_ 0068  
                        ___param_bank 0000                       __end_of_InitI2C 167A  
              ?_EEPROM_DemanaDesarLog 00E7                      __end_of_FAN_Init 1692  
                __end_of_EEPROM_Motor 055C            __end_ofi2_SIO_SendBlocking 182E  
                         ?i2_SIO_Send 005C                     ?_RAM_DemanaLlegir 005C  
                         ?_JOY_IsLeft 005C                           ?_JOY_IsDown 005C  
                               ?_main 005C                       __end_of___lbdiv 11CA  
                               _EEADR 0FA9                                 STR_10 0229  
                               STR_11 024A                                 STR_12 024A  
                               STR_20 0279                                 STR_13 0270  
                               STR_21 0201                                 STR_14 0270  
                               STR_22 025E                                 STR_15 0254  
                               STR_23 0235                                 STR_24 021A  
                               STR_16 0254                                 STR_25 025E  
                               STR_17 0297                                 STR_18 0297  
                               STR_19 0240                       __end_of___awmod 0D22  
                     __end_of___lbmod 13F0                                 _T0CON 0FD5  
                  ??_RAM_DemanaLlegir 0067                                 i2l241 107A  
                               _RCREG 0FAE               EEPROM_DemanaDesarLog@dd 00E9  
             EEPROM_DemanaDesarLog@hh 006F                                 _SPBRG 0FAF  
             EEPROM_DemanaDesarLog@mm 00E7                      __end_of_INT_Init 17BA  
                               _PORTD 0F83               EEPROM_DemanaDesarLog@mo 00EA  
             EEPROM_DemanaDesarLog@ss 00E8                                 _TRISD 0F95  
                    __end_of_RAM_Init 13A0                      __end_of_RAM_Read 1632  
                               _TXREG 0FAD                      __end_of_RGB_Init 1616  
            ReStartI2C_@slave_rw_addr 0068                 parsejaSetTime@comanda 00E9  
                    __end_of_JOY_IsUp 14F4                      __end_of_JOY_Init 15BE  
                     ?_parsejaSetTime 00E9                      ?_FAN_SetDutyFan0 005C  
                    ?_FAN_SetDutyFan1 005C                      __end_of_SIO_Init 164A  
                               _green 002F                                 _index 004F  
                     SIO_SendBuffer@i 006A                         _ramAddrBackup 0016  
                    __end_of_SIO_Send 1776                      __end_of_RSI_INT1 0EB0  
                        _TI_ResetTics 14AE                      __end_of_SIS_Init 129C  
                   ?i2_SIO_SendString 005D                     __end_of_I2C_Ready 17E6  
                    __end_of_RTC_Init 1816                      __end_of_RSI_High 003A  
                   __end_of_I2C_Stop_ 17AA                     __end_of_I2C_Write 1718  
                               tablat 0FF5                    ??i2_SIO_SendString 005E  
                               ttemp5 0075                                 ttemp6 0078  
                               ttemp7 007C                                 status 0FD8  
               StartI2C@slave_rw_addr 0068                                 wtemp8 0075  
                       i2___lbmod@rem 005F         EEPROM_DemanaEsborrarLogs@addr 006A  
                     ___lbdiv@divisor 0067                       ___lbdiv@counter 0069  
              SIS_MovementMotor@state 0046                          ?_RAM_IncAddr 005C  
                     __initialization 115A                      ??_SIO_SendBuffer 0069  
                        __end_of_main 0CB4                           ?_RSI_Timer0 005C  
                      TI_Init@counter 0067                     __end_of_FAN_Motor 0F06  
                    ??_SIO_SendString 0069                             ??_I2C_Ack 0067  
                         ?_TI_GetTics 0067                  i2SIO_SendDecimal@num 0062  
                 __end_of_ReStartI2C_ 16EC                         _indexJoystick 0020  
                              ??_main 00F4                         __activetblptr 0002  
                      JOY_Motor@canal 001C                        JOY_Motor@state 001D  
                    __end_of_StartI2C 1702                          ?_JOY_IsRight 005C  
             ?_SIS_ControlTemperatura 005C                                _ADCON1 0FC1  
                              _ADRESH 0FC4                                _EEDATA 0FA8  
                              _EECON2 0FA7                      __end_of_bcdToDec 16D6  
                           ??_TI_Init 0067                                i2l3500 1420  
                              i2l3430 1824                                i2l3450 0D4E  
                              i2l3442 0D34                                i2l3426 1796  
                              i2l3452 0D56                                i2l3508 1438  
                              i2l3462 0D78                                i2l3446 0D40  
                              i2l3480 11E0                                i2l3466 0D86  
                              i2l3458 0D6E                                i2l3476 11DA  
                              i2l3492 11FE                                i2l3670 1338  
                              i2l3488 11F6                                i2l3666 1322  
                    __end_of_decToBcd 159E                     i2_SIO_SendDecimal 104C  
             ?_RTC_Enable1HzInterrupt 005C                                _TMR0IF 7F92  
                              _SPBRGH 0FB0                                _SSPADD 0FC8  
                              _SSPBUF 0FC9                             ??_InitI2C 0067  
                  ?i2_SIO_SendDecimal 005C                     __end_of_RAM_Motor 0B4E  
                     iniciaAmb@prefix 0068                     __end_of_RGB_Motor 0BD2  
                   __end_of_RAM_Write 14AE                      __end_of_delay_us 172E  
                   __end_of_JOY_Motor 10E2                                _Timers 0080  
                 ??i2_SIO_SendDecimal 0062                             ??___lbdiv 0068  
                           ??___awmod 006B                             ??___lbmod 006C  
                              _enable 001F                                _idxLog 003E  
                    __end_of_readByte 17CA                                clear_0 1172  
                              clear_1 117E                                _minuts 0055  
                     ___awmod@divisor 0069                                _segons 0054  
                              isa$std 0001                                _rtc_dd 0025  
                              _rtc_hh 0028                                _rtc_mm 0027  
                              _rtc_mo 0024                       ___awmod@counter 006B  
                              _rtc_ss 0026                     __end_of_SIS_Motor 0E54  
                              _rtc_yy 0023                     __end_of_RTC_Motor 0A12  
                    ??_RTC_DemanaTime 0062                         RTC_SetDate@dd 0072  
                       RTC_SetDate@mo 00E7                         RTC_SetDate@yy 00E8  
                        __pdataCOMRAM 0073                             ?_I2C_Nack 005C  
                           ?_I2C_Read 005C                     __end_ofi2___lbdiv 1202  
                   __end_ofi2___awmod 0D90                     __end_ofi2___lbmod 1440  
      __end_of_SIS_ControlTemperatura 06A6                          __mediumconst 0200  
                              tblptrh 0FF7                                tblptrl 0FF6  
                              tblptru 0FF8                          ?_SIO_Receive 0067  
                      i2___awmod@sign 0061             __end_ofi2_SIO_SendDecimal 109C  
                       RTC_SetTime@hh 0072                         RTC_SetTime@mm 00E7  
                       RTC_SetTime@ss 00E8        __end_of_RTC_Enable1HzInterrupt 1662  
                           ?_FAN_Init 005C                      ___lbdiv@dividend 0068  
                     ___lbmod@divisor 006B                            __accesstop 0080  
             __end_of__initialization 1184                       ___lbmod@counter 006D  
  __end_of_RGB_SetColorAlternatCritic 180A            _RGB_SetColorAlternatCritic 17FE  
            __end_of_SIO_SendBlocking 1822                         ___rparam_used 0001  
                        ?_RTC_SetDate 00E7                          ?_RTC_SetTime 00E7  
                   ??_SIO_SendDecimal 006F                             ?_INT_Init 005C  
                           ?_RAM_Init 005C                             ?_RAM_Read 005C  
                         _ReStartI2C_ 16D6                             ?_RGB_Init 005C  
                      __pcstackCOMRAM 005C                             ?_JOY_IsUp 005C  
                           ?_JOY_Init 005C                             ?_SIO_Init 005C  
                           ?_SIO_Send 005C                             ?_RSI_INT1 005C  
                           ?_SIS_Init 005C                             ?_RTC_Init 005C  
                TI_NewTimer@Comptador 0069                      ___lbdiv@quotient 006A  
                           ?_RSI_High 005C     SIS_ControlTemperatura@temperatura 0044  
                          ??_I2C_Nack 0067                         ?_RGB_SetColor 0067  
                          ??_I2C_Read 0067             SIO_SendBlocking@character 0067  
                 i2SIO_SendString@str 005D                    _RAM_DemanaEsborrar 129C  
                        ?_TI_NewTimer 0067                            ??_FAN_Init 006A  
                        _EEPROM_Motor 02A4                            __pbssBANK0 0080  
                       RGB_SetColor@b 0068                         RGB_SetColor@g 0067  
                       RGB_SetColor@r 0069                   ?_RAM_DemanaEsborrar 005C  
             ??_EEPROM_DemanaDesarLog 006F                             RAM_Read@r 0068  
              TI_NewTimer@TimerHandle 0067                         ?_JOY_IsCenter 005C  
                          ??_INT_Init 0067                            ??_RAM_Init 006B  
                          ??_RAM_Read 0068                          I2C_Read@flag 0067  
                          ??_RGB_Init 006A                            ??_JOY_IsUp 0067  
                      I2C_Read@buffer 0068                            ??_JOY_Init 0067  
                   SIO_Send@character 0067                             ?_StartI2C 005C  
             TI_ResetTics@TimerHandle 0067                            ??_SIO_Init 0067  
                        ??i2_SIO_Send 005C                               _I2C_Ack 1838  
                          ??_SIO_Send 0067                            ??_RSI_INT1 0063  
                          ??_SIS_Init 006A                             ?_bcdToDec 005C  
                          ??_RTC_Init 0069                          ??_JOY_IsLeft 0067  
                        ??_JOY_IsDown 0067                            ??_RSI_High 0063  
            ?_EEPROM_DemanaLlegirLogs 005C                             ?_decToBcd 005C  
                    ??_parsejaSetTime 00EA                  ??_RAM_DemanaEsborrar 0069  
                      ??_RGB_SetColor 0069                            _idxDesplac 003D  
                       ?_resetCommand 005C                             ?_delay_us 005C  
                  i2_SIO_SendBlocking 1822                     _SIS_MovementMotor 08B8  
                             _SSPCON1 0FC6                               _SSPCON2 0FC5  
                    iniciaAmb@entrada 0067                               _SSPSTAT 0FC7  
                             _TI_Init 134C                    ?_SIS_MovementMotor 005C  
                        readByte@addr 0067                        SIS_Motor@state 0048  
                           ?_readByte 005C                   ?i2_SIO_SendBlocking 005C  
                  __end_ofi2_SIO_Send 179A                             _I2C_Ready 17D8  
                             _InitI2C 1662                    __end_of_JOY_IsLeft 1538  
                           _I2C_Stop_ 179A                    __end_of_JOY_IsDown 155A  
                           _I2C_Write 1702                        ??_JOY_IsCenter 0067  
                             __Hparam 0000                   ??_SIS_MovementMotor 006F  
                             __Lparam 0000                            _estatDesar 003A  
                          ??_StartI2C 0068                          ??_RSI_Timer0 005C  
                SIO_SendBuffer@buffer 0067                               ___lbdiv 1192  
                             ___awmod 0CB4                               ___lbmod 13C8  
                SIO_SendBuffer@length 0068                          __psmallconst 0200  
                        ??_TI_GetTics 006B                            ??_bcdToDec 0067  
                             __pcinit 115A                     ??_processaComanda 0073  
                             __ramtop 0200                     __end_of_iniciaAmb 0FAC  
                             __ptext0 0C44                               __ptext1 134C  
                             __ptext2 08B8                               __ptext3 13A0  
                             __ptext4 14D2                               __ptext5 14F4  
                             __ptext6 1516                               __ptext7 1538  
                             __ptext8 15BE                               __ptext9 0DF6  
                             _idxChar 003C                  ??i2_SIO_SendBlocking 005C  
                          ??_decToBcd 006F                             _FAN_Motor 0EB0  
                          _llindarLow 004D                               _logPend 0099  
                       _obtenirNumero 0A12                        ??_resetCommand 006B  
                    ___awmod@dividend 0067                     _systemInitialized 0050  
                          _pendingRTC 0029             __end_of_SIS_MovementMotor 0968  
                          ??_delay_us 0067                        FAN_Motor@state 0031  
                          _posAddrRAM 001A                  end_of_initialization 1184  
                          delay_us@us 0067                    __end_of_RSI_Timer0 16AA  
                       ??_EEPROM_Init 0068                            ??_readByte 0067  
                       __Lmediumconst 0000                    __end_of_TI_GetTics 104C  
                          ?_I2C_Ready 005C                            ?_I2C_Stop_ 005C  
                          ?_I2C_Write 005C                             _RCSTAbits 0FAB  
                           _RAM_Motor 0AB2                             _RGB_Motor 0B4E  
                           _RAM_Write 148A       __end_of_EEPROM_DemanaLlegirLogs 17FE  
                             postinc0 0FEE                               postinc2 0FDE  
                           _JOY_Motor 109C                             _PORTBbits 0F81  
                          ?_FAN_Motor 005C                        ?_obtenirNumero 0067  
                   __end_of_writeByte 1466                 TI_GetTics@TimerHandle 00EB  
                    ___lbmod@dividend 006C                             _SIS_Motor 0DF6  
                           _TRISAbits 0F92                             _TRISBbits 0F93  
                           _TRISCbits 0F94                             _RTC_Motor 0968  
                     _SIO_SendDecimal 0FAC                             i2___lbdiv 11CA  
                           i2___awmod 0D22                             i2___lbmod 1418  
          ?_EEPROM_DemanaEsborrarLogs 005C                         _RAM_ResetAddr 12C8  
                         ___lbmod@rem 006E                   RAM_DemanaEsborrar@i 0069  
                      RTC_Motor@state 0022           ?_RGB_SetColorAlternatCritic 005C  
                           _TXSTAbits 0FAC                     ?_SIO_SendBlocking 005C  
                __end_of_RGB_SetColor 1740           SIS_ControlTemperatura@state 0045  
                        ?_ReStartI2C_ 005C                    ??_SIO_SendBlocking 0067  
                 __end_of_EEPROM_Init 1788                            ?_RAM_Motor 005C  
                          ?_RGB_Motor 005C                            ?_RAM_Write 005C  
                     _llindarCritical 004A                     ??_RAM_DemanaDesar 0069  
                          ?_JOY_Motor 005C                           _BAUDCONbits 0FB8  
                       __pidataCOMRAM 1842                   FAN_SetDutyFan0@duty 0067  
                 FAN_SetDutyFan1@duty 0067                       _llindarModerate 004C  
          EEPROM_Motor@eepromSubState 0038                  __end_of_JOY_IsCenter 15DC  
                 start_initialization 115A                            ?_SIS_Motor 005C  
                          ?_RTC_Motor 005C                            iniciaAmb@i 006B  
                          ?i2___lbdiv 005C                            ?i2___awmod 005C  
                          ?i2___lbmod 005C                        ?_RAM_ResetAddr 005C  
                    _RAM_DemanaLlegir 17E6     __end_of_EEPROM_DemanaEsborrarLogs 157C  
                         ??_I2C_Ready 0067                           _canalActual 001E  
                         ??_I2C_Stop_ 0067                           ??_I2C_Write 0067  
                  i2___lbdiv@dividend 005D                     SIO_SendString@str 0068  
SIS_ControlTemperatura@estat_anterior 0043                  __end_of_resetCommand 111E  
       __end_of_EEPROM_DemanaDesarLog 08B8                           bcdToDec@val 0068  
                    i2_SIO_SendString 1320                     ??_FAN_SetDutyFan0 0067  
                   ??_FAN_SetDutyFan1 0067                              ?_I2C_Ack 005C  
                     ??_obtenirNumero 0069                           ??_FAN_Motor 006F  
                        _ramReadIndex 0018                          _ramReadState 002B  
            identificaComanda@comanda 006D               __end_of_SIO_SendDecimal 0FFC  
                         __pbssCOMRAM 0001                         __pcstackBANK0 00E7  
                  i2___lbdiv@quotient 005F                         ?_TI_ResetTics 005C  
                            ?_TI_Init 005C                           _EEPROM_Init 1776  
                            ?_InitI2C 005C                       _processaComanda 0F06  
                  _pendingReadRequest 003F                         ??_RAM_IncAddr 0068  
                          RAM_Motor@i 0071                            RAM_Motor@v 0070  
                         ??_RAM_Motor 0070                             __pintcode 0008  
                           _desantLog 003B                           ??_RGB_Motor 006F  
                         ??_RAM_Write 0068                            RAM_Write@v 0068  
                            ?___lbdiv 0067                              ?___awmod 0067  
                            ?___lbmod 006B                           ??_JOY_Motor 0067  
            ??_SIS_ControlTemperatura 00EC                           __smallconst 0200  
                      RGB_Motor@state 002C              ??_RTC_Enable1HzInterrupt 0069  
                            _I2C_Nack 182E                              _I2C_Read 1466  
                         decToBcd@val 0071                             _iniciaAmb 0F5A  
                         ??_SIS_Motor 0073                           ??_RTC_Motor 0069  
                       ??_JOY_IsRight 0067                        ??_TI_ResetTics 0067  
                     ??_RAM_ResetAddr 0068                           ??i2___lbdiv 005D  
                         ??i2___awmod 0060                           ??i2___lbmod 005D  
                            _FAN_Init 167A                              _LATAbits 0F89  
                            _LATBbits 0F8A                              _LATCbits 0F8B  
                            _PIE1bits 0F9D                              i2u192_40 11E4  
                            _PIR1bits 0F9E                              _PIR2bits 0FA1  
                            i2u188_40 0D5A                              _INT_Init 17AA  
                            _RAM_Init 1376                              _RAM_Read 1616  
                            _RGB_Init 15FA                              _RCONbits 0FD0  
                            _JOY_IsUp 14D2                              _JOY_Init 159E  
               EEPROM_Motor@sendIndex 0036              parsejaInitialize@comanda 00E9  
                            _SIO_Init 1632                    parsejaInitialize@i 00EB  
                            _SIO_Send 1764                              _RSI_INT1 0E54  
                 __end_of_RAM_IncAddr 1418                              _SIS_Init 126E  
                            _RTC_Init 180A                              _RSI_High 0008  
                  SIO_SendDecimal@num 006F                            _ADCON0bits 0FC2  
                          _ADCON2bits 0FC0                             _totalLogs 0042  
                      _SIO_SendBuffer 13A0                      ?_SIO_SendDecimal 005C  
         i2SIO_SendBlocking@character 005C                          _RGB_SetColor 172E  
                          ?_iniciaAmb 0067                         ??_SIO_Receive 0068  
                      _SIO_SendString 12F4                             _writeByte 1440  
                          SIS_Motor@i 0047                           _INTCON2bits 0FF1  
                         _INTCON3bits 0FF0                     _parsejaInitialize 06A6  
             __end_of_processaComanda 0F5A           ??_EEPROM_DemanaEsborrarLogs 006A  
                  i2___awmod@dividend 005C                    ?_parsejaInitialize 00E9  
                 __end_of_JOY_IsRight 1516                       _RAM_DemanaDesar 17CA  
                         _counterFan0 0033                           _counterFan1 0032  
                          _EECON1bits 0FA6                         ??_RTC_SetDate 0072  
                       ??_RTC_SetTime 0072                              __Hrparam 0000  
                   i2___lbdiv@divisor 005C                          _JOY_IsCenter 15BE  
                   i2___lbdiv@counter 005E                   ??_parsejaInitialize 00EA  
                            __Lrparam 0000                              _StartI2C 16EC  
                       I2C_Write@data 0067                           _estatCritic 002D  
            __end_of_RAM_DemanaLlegir 17F2                              _bcdToDec 16C0  
              __end_of_SIO_SendBuffer 13C8                         _tempsMostreig 004E  
                            _decToBcd 157C                  SIO_Receive@character 0067  
              __end_of_SIO_SendString 1320                  EEPROM_Motor@baseAddr 0037  
                            _delay_us 1718                          _resetCommand 10E2  
           __end_of_parsejaInitialize 07D8                              __ptext10 0F06  
                            __ptext11 10E2                              __ptext20 0F5A  
                            __ptext12 155A                              __ptext21 17E6  
                            __ptext13 0D90                              __ptext30 1752  
                            __ptext22 17F2                              __ptext14 06A6  
                            __ptext31 07D8                              __ptext23 16AA  
                            __ptext15 0A12                              __ptext40 164A  
                            __ptext32 1632                              __ptext24 126E  
                            __ptext16 1202                              __ptext41 16EC  
                            __ptext33 0968                              __ptext25 055C  
                            __ptext17 1238                              __ptext50 13C8  
                            __ptext42 1702                              __ptext34 16C0  
                            __ptext26 17FE                              __ptext18 157C  
                            __ptext51 1192                              __ptext43 179A  
                            __ptext35 16D6                              __ptext27 172E  
                            __ptext19 0BD2                              __ptext60 109C  
                            __ptext52 0CB4                              __ptext44 17D8  
                            __ptext36 1466                              __ptext28 17CA  
                            __ptext61 159E                              __ptext53 1616  
                            __ptext45 1662                              __ptext37 182E  
                            __ptext29 1740                              __ptext70 12F4  
                            __ptext62 17AA                              __ptext54 1376  
                            __ptext46 0B4E                              __ptext38 1838  
                            __ptext71 1764                              __ptext63 0EB0  
                            __ptext55 129C                              __ptext47 15FA  
                            __ptext39 180A                              __ptext80 104C  
                            __ptext72 1816                              __ptext64 0FFC  
                            __ptext56 148A                              __ptext48 0AB2  
                            __ptext81 1418                              __ptext73 1776  
                            __ptext65 167A                              __ptext57 13F0  
                            __ptext49 0FAC                              __ptext82 11CA  
                            __ptext74 17BA                              __ptext66 14AE  
                            __ptext58 12C8                              __ptext83 0D22  
                            __ptext67 111E                              __ptext59 1718  
                            __ptext84 1822                              __ptext76 1692  
                            __ptext68 02A4                              __ptext85 15DC  
                            __ptext77 0E54                              __ptext69 1440  
                            __ptext78 1320                              __ptext79 1788  
                            _flag_rtc 0049                            ?_writeByte 0068  
            __end_ofi2_SIO_SendString 134C                         ??_TI_NewTimer 0068  
                       ?_EEPROM_Motor 005C               _EEPROM_DemanaLlegirLogs 17F2  
                      _RTC_DemanaTime 15DC                     _identificaComanda 0BD2  
                         _llindarHigh 004B                    i2___lbmod@dividend 005D  
                    _timerTemperatura 0053                   __end_of_SIO_Receive 16C0  
                            _readByte 17BA                       _FAN_SetDutyFan0 1752  
                     _FAN_SetDutyFan1 1740                              _dutyFan0 0035  
                            _dutyFan1 0034                    ?_identificaComanda 006D  
                      _previousButton 0073                              _received 005A  
                            _rxBuffer 00A7                           _RAM_IncAddr 13F0  
                            _joystick 0014                              _timerRGB 0051  
                            _timerFan 0052                              isa$xinst 0000  
                 ??_identificaComanda 006E                  __end_of_TI_ResetTics 14D2  
                            int$flags 0074             _EEPROM_DemanaEsborrarLogs 155A  
                 __end_of_RTC_SetDate 126E                   __end_of_RTC_SetTime 1238  
                     ?_SIO_SendBuffer 0067               EEPROM_Motor@estatGlobal 0039  
                   i2___awmod@divisor 005E                     i2___awmod@counter 0060  
                     ?_SIO_SendString 0068                            _INTCONbits 0FF2  
                         ??_iniciaAmb 0069             TI_GetTics@CopiaTicsActual 00E7  
              __end_of_RTC_DemanaTime 15FA                           _JOY_IsRight 14F4  
                      ??_EEPROM_Motor 006A               __end_of_RAM_DemanaDesar 17D8  
           __end_of_identificaComanda 0C44                      RTC_DemanaTime@dd 005F  
                    RTC_DemanaTime@hh 005C                      RTC_DemanaTime@mm 005D  
                    RTC_DemanaTime@mo 0060                      RTC_DemanaTime@ss 005E  
                    RTC_DemanaTime@yy 0061                      ?_processaComanda 00EC  
                            intlevel2 0000                _SIS_ControlTemperatura 055C  
                        ?_EEPROM_Init 005C                     i2___lbmod@divisor 005C  
                 __end_of_TI_NewTimer 115A                _RTC_Enable1HzInterrupt 164A  
                   i2___lbmod@counter 005E                 _EEPROM_DemanaDesarLog 07D8  
                          i2_SIO_Send 1788                            _JOY_IsLeft 1516  
                          _JOY_IsDown 1538                 __end_of_obtenirNumero 0AB2  
                         _temperatura 0021                           _timerRebots 005B  
                       writeByte@addr 0069                         writeByte@data 0068  
           ??_EEPROM_DemanaLlegirLogs 0067             EEPROM_DemanaDesarLog@yyyy 00EB  
                         _SIO_Receive 16AA               __end_of_FAN_SetDutyFan0 1764  
             __end_of_FAN_SetDutyFan1 1752                           _SSPCON2bits 0FC5  
                     ?_RTC_DemanaTime 005C                      obtenirNumero@buf 0067  
                    obtenirNumero@idx 0068                           ??_writeByte 0069  
                    obtenirNumero@val 006B                        _parsejaSetTime 0D90  
                     parsejaSetTime@i 00EB                           _RTC_SetDate 1238  
                         _RTC_SetTime 1202      _pendingReadRequest@TAD_RAM$F1961 002A  
